"use strict";(self.webpackChunk_docspace_components=self.webpackChunk_docspace_components||[]).push([[4215],{"./toggle-content/toggle-content.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>toggle_content_stories});var _path,react=__webpack_require__("../../node_modules/react/index.js"),toggle_content=__webpack_require__("./toggle-content/index.js"),button_0=__webpack_require__("./button/index.js"),text_0=__webpack_require__("./text/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const check_react=function SvgCheckreact(props){return react.createElement("svg",_extends({width:16,height:16,viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"},props),_path||(_path=react.createElement("path",{d:"M6.97 12.91L1 6.94 2.94 5l4.03 4.03L13 3l1.94 1.94-7.97 7.97z",fill:"#000"})))};var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const toggle_content_stories={title:"Components/ToggleContent",component:toggle_content.Z,parameters:{docs:{description:{component:"ToggleContent allow you to adding information, which you may hide/show by clicking header"}}},argTypes:{children:{table:{disable:!0}},buttonLabel:{description:"Button text",control:"text"},onClickButton:{action:"button clicked!",table:{disable:!0}},text:{table:{disable:!0}},onChange:{control:"action",description:"The change event is triggered when the element's value is modified"},textInnerToggleContent:{table:{disable:!0}}}},Template=({buttonLabel,onClickButton,text,textInnerToggleContent,onChangeTextInput,isOpen,children,textInputValue,...args})=>{const[opened,setOpened]=(0,react.useState)(isOpen);let childrenItems=[];return children.map(((item,indx)=>{switch(item){case"button":childrenItems.push((0,jsx_runtime.jsx)(button_0.Z,{label:buttonLabel,onClick:onClickButton},indx));break;case"icon":childrenItems.push((0,jsx_runtime.jsx)(check_react,{},indx));break;case"text":childrenItems.push((0,jsx_runtime.jsx)(text_0.Z,{children:text},indx));break;case"toggleContent":childrenItems.push((0,jsx_runtime.jsx)(toggle_content.Z,{children:textInnerToggleContent},indx));break;case"textInput":childrenItems.push((0,jsx_runtime.jsx)(button_0.Z,{value:"text",onChange:event=>{onChangeTextInput(event.target.value)}},indx))}})),(0,jsx_runtime.jsx)(toggle_content.Z,{...args,isOpen:opened,onChange:checked=>{setOpened(checked)},children:childrenItems})};Template.displayName="Template";const Default=Template.bind({});Default.args={children:["text"],buttonLabel:"OK",text:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi.",textInnerToggleContent:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",isOpen:!0,label:"Some label"},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'({\n  buttonLabel,\n  onClickButton,\n  text,\n  textInnerToggleContent,\n  onChangeTextInput,\n  isOpen,\n  children,\n  textInputValue,\n  ...args\n}) => {\n  const [opened, setOpened] = useState(isOpen);\n  let childrenItems = [];\n  children.map((item, indx) => {\n    switch (item) {\n      case "button":\n        childrenItems.push(<Button label={buttonLabel} key={indx} onClick={onClickButton} />);\n        break;\n      case "icon":\n        childrenItems.push(<CheckReactSvg key={indx} />);\n        break;\n      case "text":\n        childrenItems.push(<Text key={indx}>{text}</Text>);\n        break;\n      case "toggleContent":\n        childrenItems.push(<ToggleContent key={indx}>{textInnerToggleContent}</ToggleContent>);\n        break;\n      case "textInput":\n        childrenItems.push(<TextInput key={indx} value="text" onChange={event => {\n          onChangeTextInput(event.target.value);\n        }} />);\n        break;\n      default:\n        break;\n    }\n  });\n  return <ToggleContent {...args} isOpen={opened} onChange={checked => {\n    setOpened(checked);\n  }}>\r\n      {childrenItems}\r\n    </ToggleContent>;\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]}}]);