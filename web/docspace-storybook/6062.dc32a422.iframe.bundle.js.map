{"version":3,"file":"6062.dc32a422.iframe.bundle.js","mappings":";AAwDA;;AAEA;;;AAMA;;;AAGA;;AAEA;;;;AAYA;;AAUA;AAIA;AAgCA;;AAEA;;;;;;;;;;AAUA;;;AAGA;;AAKA;AAEA;;;;AAIA;;;;AAIA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAQA;;;;AAQA;;;;;AAOA;;;;;;AAWA;;;;;;AAWA;;;;AAaA;;;AAWA;;AAKA;;;AAGA;AACA;;;;;;AAMA;AAEA;;;;;;AAQA;;AAcA","sources":["webpack://@docspace/shared/./components/textarea/Textarea.styled.tsx"],"sourcesContent":["// (c) Copyright Ascensio System SIA 2009-2024\r\n//\r\n// This program is a free software product.\r\n// You can redistribute it and/or modify it under the terms\r\n// of the GNU Affero General Public License (AGPL) version 3 as published by the Free Software\r\n// Foundation. In accordance with Section 7(a) of the GNU AGPL its Section 15 shall be amended\r\n// to the effect that Ascensio System SIA expressly excludes the warranty of non-infringement of\r\n// any third-party rights.\r\n//\r\n// This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty\r\n// of MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE. For details, see\r\n// the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html\r\n//\r\n// You can contact Ascensio System SIA at Lubanas st. 125a-25, Riga, Latvia, EU, LV-1021.\r\n//\r\n// The  interactive user interfaces in modified source and object code versions of the Program must\r\n// display Appropriate Legal Notices, as required under Section 5 of the GNU AGPL version 3.\r\n//\r\n// Pursuant to Section 7(b) of the License you must retain the original Product logo when\r\n// distributing the program. Pursuant to Section 7(e) we decline to grant you any rights under\r\n// trademark law for use of our trademarks.\r\n//\r\n// All the Product's GUI elements, including illustrations and icon sets, as well as technical writing\r\n// content are licensed under the terms of the Creative Commons Attribution-ShareAlike 4.0\r\n// International. See the License terms at http://creativecommons.org/licenses/by-sa/4.0/legalcode\r\n\r\nimport React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport TextareaAutosize from \"react-autosize-textarea\";\r\n\r\nimport CopyIcon from \"PUBLIC_DIR/images/copy.react.svg\";\r\n\r\nimport { commonInputStyles } from \"../../utils\";\r\nimport { Base, TColorScheme, TTheme } from \"../../themes\";\r\n\r\nimport { Scrollbar, ScrollbarProps } from \"../scrollbar\";\r\nimport { TextareaProps } from \"./Textarea.types\";\r\n\r\nconst ClearScrollbar = ({\r\n  isDisabled,\r\n  heightScale,\r\n  hasError,\r\n  heightTextAreaProp,\r\n  isFullHeight,\r\n  fullHeight,\r\n  ...props\r\n}: {\r\n  isDisabled?: boolean;\r\n  heightScale?: boolean;\r\n  hasError?: boolean;\r\n  heightTextAreaProp?: string;\r\n  ref?: React.Ref<HTMLDivElement>;\r\n  // @ts-expect-error error from custom scrollbar\r\n} & ScrollbarProps) => <Scrollbar {...props} />;\r\n\r\nconst StyledScrollbar = styled(ClearScrollbar)`\r\n  ${commonInputStyles};\r\n  :focus-within {\r\n    border-color: ${(props) =>\r\n      props.hasError\r\n        ? props.theme.textArea.focusErrorBorderColor\r\n        : props.theme.textArea.focusBorderColor};\r\n  }\r\n  :focus {\r\n    outline: ${(props) => props.theme.textArea.focusOutline};\r\n  }\r\n\r\n  width: ${(props) => props.theme.textArea.scrollWidth} !important;\r\n  height: calc(\r\n    ${(props) => {\r\n        return props.heightScale\r\n          ? \"67vh\"\r\n          : props.isFullHeight\r\n            ? `${props.fullHeight}px`\r\n            : props.heightTextAreaProp\r\n              ? props.heightTextAreaProp\r\n              : \"91px\";\r\n      }} + 2px\r\n  ) !important;\r\n\r\n  textarea {\r\n    height: ${(props) => {\r\n      return props.heightScale\r\n        ? \"65vh\"\r\n        : props.isFullHeight\r\n          ? `${props.fullHeight}px`\r\n          : props.heightTextAreaProp\r\n            ? props.heightTextAreaProp\r\n            : \"89px\";\r\n    }};\r\n  }\r\n  background-color: ${(props) =>\r\n    props.isDisabled && props.theme.textArea.disabledColor};\r\n`;\r\n\r\nStyledScrollbar.defaultProps = {\r\n  theme: Base,\r\n};\r\n\r\nconst ClearTextareaAutosize = React.forwardRef(\r\n  (\r\n    {\r\n      isDisabled,\r\n      heightScale,\r\n      hasError,\r\n      color,\r\n      paddingLeftProp,\r\n      isJSONField,\r\n      enableCopy,\r\n      heightTextArea,\r\n      ...props\r\n    }: TextareaProps & {\r\n      disabled?: boolean;\r\n      readOnly?: boolean;\r\n    },\r\n    ref: React.Ref<HTMLTextAreaElement>,\r\n  ) => <TextareaAutosize {...props} ref={ref} />,\r\n);\r\n\r\nClearTextareaAutosize.displayName = \"ClearTextareaAutosize\";\r\n\r\nconst StyledTextarea = styled(ClearTextareaAutosize).attrs(\r\n  ({ autoFocus, dir }: { autoFocus?: boolean; dir?: string }) => ({\r\n    autoFocus,\r\n    dir,\r\n  }),\r\n)`\r\n  ${commonInputStyles};\r\n\r\n  white-space: ${(props) => (props.isJSONField ? \"pre\" : \"pre-line\")};\r\n  width: 100%;\r\n\r\n  display: table;\r\n  width: -webkit-fill-available;\r\n\r\n  border: none;\r\n  outline: none;\r\n  resize: none;\r\n\r\n  overflow: ${(props) => (props.isJSONField ? \"visible !important\" : \"hidden\")};\r\n  padding: 5px 8px 2px;\r\n\r\n  ${(props) =>\r\n    props.theme.interfaceDirection === \"rtl\"\r\n      ? `padding-right: ${props.paddingLeftProp};`\r\n      : `padding-left: ${props.paddingLeftProp};`}\r\n\r\n  font-size: ${(props) =>\r\n    props.theme.getCorrectFontSize(`${props.fontSize}px`)};\r\n  font-family: ${(props) => props.theme.fontFamily};\r\n  line-height: 1.5;\r\n\r\n  :focus-within {\r\n    border-color: ${(props) => props.theme.textArea.focusBorderColor};\r\n  }\r\n\r\n  :focus {\r\n    outline: ${(props) => props.theme.textArea.focusOutline};\r\n  }\r\n\r\n  ::-webkit-input-placeholder {\r\n    color: ${(props) => props.theme.textInput.placeholderColor};\r\n    font-family: ${(props) => props.theme.fontFamily};\r\n    user-select: none;\r\n  }\r\n\r\n  :-moz-placeholder {\r\n    color: ${(props) => props.theme.textInput.placeholderColor};\r\n    font-family: ${(props) => props.theme.fontFamily};\r\n    user-select: none;\r\n  }\r\n\r\n  ::-moz-placeholder {\r\n    color: ${(props) => props.theme.textInput.placeholderColor};\r\n    font-family: ${(props) => props.theme.fontFamily};\r\n    user-select: none;\r\n  }\r\n\r\n  :-ms-input-placeholder {\r\n    color: ${(props) => props.theme.textInput.placeholderColor};\r\n    font-family: ${(props) => props.theme.fontFamily};\r\n    user-select: none;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${(props) => props.theme.textInput.placeholderColor};\r\n    font-family: ${(props) => props.theme.fontFamily};\r\n    user-select: none;\r\n  }\r\n\r\n  ${({ theme }) =>\r\n    theme.interfaceDirection === \"rtl\" &&\r\n    `\r\n      &:placeholder-shown {\r\n        text-align: right;\r\n      }`}\r\n`;\r\n\r\nStyledTextarea.defaultProps = { theme: Base };\r\n\r\nconst StyledCopyIcon = styled(({ isJSONField, heightScale, ...props }) => (\r\n  <CopyIcon {...props} />\r\n))`\r\n  width: 16px;\r\n  height: 16px;\r\n  z-index: 1;\r\n  filter: ${(props) => props.theme.textArea.copyIconFilter};\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nStyledCopyIcon.defaultProps = { theme: Base };\r\n\r\nconst CopyIconWrapper = styled.div<{\r\n  isJSONField: boolean;\r\n  heightScale?: boolean;\r\n}>`\r\n  position: absolute;\r\n  width: 20px;\r\n  height: 20px;\r\n  z-index: 2;\r\n\r\n  ${(props) =>\r\n    props.theme.interfaceDirection === \"rtl\"\r\n      ? `left: ${props.isJSONField && props.heightScale ? \"18px\" : \"10px\"};`\r\n      : `right: ${props.isJSONField && props.heightScale ? \"18px\" : \"10px\"};`}\r\n  top: 6px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nCopyIconWrapper.defaultProps = { theme: Base };\r\n\r\nconst Wrapper = styled.div<{\r\n  heightScale?: boolean;\r\n  isFullHeight?: boolean;\r\n  fullHeight?: number;\r\n  heightTextArea?: string;\r\n  enableCopy?: boolean;\r\n  isJSONField?: boolean;\r\n}>`\r\n  position: relative;\r\n\r\n  max-width: 1200px;\r\n  height: ${(props) => {\r\n    return props.heightScale\r\n      ? \"65vh\"\r\n      : props.isFullHeight\r\n        ? `${props.fullHeight}px`\r\n        : props.heightTextArea\r\n          ? props.heightTextArea\r\n          : \"89px\";\r\n  }};\r\n\r\n  .scroll-wrapper {\r\n    margin-right: ${(props) =>\r\n      props.enableCopy ? (props.isJSONField ? \"36px\" : \"8px\") : \"0\"};\r\n  }\r\n`;\r\n\r\nconst Numeration = styled.pre<{ fontSize: string }>`\r\n  display: block;\r\n  position: absolute;\r\n  font-size: ${(props) => props.theme.getCorrectFontSize(props.fontSize)}px;\r\n  font-family: ${(props) => props.theme.fontFamily};\r\n  line-height: 1.5;\r\n  margin: 0;\r\n  top: 6px;\r\n  text-align: right;\r\n\r\n  ${({ theme }) =>\r\n    theme.interfaceDirection === \"rtl\" ? `right: 18px;` : `left: 18px;`}\r\n  color: ${(props) => props.theme.textArea.numerationColor};\r\n\r\n  -webkit-user-select: none; /* Safari */\r\n  -moz-user-select: none; /* Firefox */\r\n  -ms-user-select: none; /* IE10+/Edge */\r\n  user-select: none; /* Standard */\r\n`;\r\n\r\nNumeration.defaultProps = { theme: Base };\r\n\r\nconst getDefaultStyles = ({\r\n  $currentColorScheme,\r\n  hasError,\r\n  theme,\r\n}: {\r\n  $currentColorScheme?: TColorScheme;\r\n  hasError?: boolean;\r\n  theme: TTheme;\r\n}) =>\r\n  $currentColorScheme &&\r\n  css`\r\n    :focus-within {\r\n      border-color: ${hasError\r\n        ? theme?.textArea.focusErrorBorderColor\r\n        : theme.textArea.focusBorderColor};\r\n    }\r\n  `;\r\n\r\nStyledScrollbar.defaultProps = {\r\n  theme: Base,\r\n};\r\n\r\nconst StyledThemeTextarea = styled(StyledScrollbar)(getDefaultStyles);\r\n\r\nexport {\r\n  StyledTextarea,\r\n  StyledScrollbar,\r\n  StyledCopyIcon,\r\n  Wrapper,\r\n  Numeration,\r\n  CopyIconWrapper,\r\n  StyledThemeTextarea,\r\n};\r\n"],"names":[],"sourceRoot":""}