"use strict";(self.webpackChunk_docspace_components=self.webpackChunk_docspace_components||[]).push([[4108],{"./tree-menu/tree-menu.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./tree-menu/index.js"),_sub_components_tree_node__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./tree-menu/sub-components/tree-node.js"),PUBLIC_DIR_images_expander_down_react_svg__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../public/images/expander-down.react.svg"),PUBLIC_DIR_images_expander_right_react_svg__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../public/images/expander-right.react.svg"),PUBLIC_DIR_images_catalog_folder_react_svg__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../public/images/catalog.folder.react.svg"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/TreeMenu",component:___WEBPACK_IMPORTED_MODULE_1__.Z,argTypes:{disableSwitch:{description:"Disables Switch",control:"action"},showBadge:{description:"Displays the badge"},newItems:{description:"The number of new elements in the node"},title:{description:"Title of the subTree"},data:{description:"Tree object that contains a key that facilitates building the tree structure"}}},Template=({data,title,newItems,showBadge,onSelect,onLoad,onCheck,onRightClick,...args})=>{const[gData,setGData]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(data),[autoExpandParent,setAutoExpandParent]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),[expandedKeys,setExpandedKeys]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["0-0-key","0-0-0-key","0-0-0-0-key"]),onBadgeClick=e=>{const id=e.currentTarget.dataset.id;console.log("Clocked on badge: ",id)},getTreeNodes=tree=>tree.map((item=>item.children&&item.children.length?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_sub_components_tree_node__WEBPACK_IMPORTED_MODULE_2__.Z,{title,icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(PUBLIC_DIR_images_catalog_folder_react_svg__WEBPACK_IMPORTED_MODULE_5__.Z,{size:"scale",color:"dimgray"}),onBadgeClick,newItems,showBadge,children:getTreeNodes(item.children)},item.key):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_sub_components_tree_node__WEBPACK_IMPORTED_MODULE_2__.Z,{title,icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(PUBLIC_DIR_images_catalog_folder_react_svg__WEBPACK_IMPORTED_MODULE_5__.Z,{size:"scale",color:"dimgray"})},item.key)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("div",{style:{width:"250px",margin:"20px"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.Z,{...args,onExpand:expandedKeys=>{setExpandedKeys(expandedKeys),setAutoExpandParent(!1)},autoExpandParent,expandedKeys,onDragStart:info=>(info=>{info.event.persist()})(info),onDrop:info=>(info=>{info.event.persist();const dropKey=info.node.props.eventKey,dragKey=info.dragNode.props.eventKey,dropPos=info.node.props.pos.split("-"),dropPosition=info.dropPosition-Number(dropPos[dropPos.length-1]),loop=(treeData,key,callback)=>{treeData.forEach(((item,index,arr)=>{item.key!==key?item.children&&loop(item.children,key,callback):callback(item,index,arr)}))},treeData=[...gData];let dragObj;if(loop(treeData,dragKey,((item,index,arr)=>{arr.splice(index,1),dragObj=item})),info.dropToGap)if((info.node.props.children||[]).length>0&&info.node.props.expanded&&1===dropPosition)loop(treeData,dropKey,(item=>{item.children=item.children||[],item.children.unshift(dragObj)}));else{let ar,i;loop(treeData,dropKey,((item,index,arr)=>{ar=arr,i=index})),-1===dropPosition?ar.splice(i,0,dragObj):ar.splice(i+1,0,dragObj)}else loop(treeData,dropKey,(item=>{item.children=item.children||[],item.children.push(dragObj)}));setGData(treeData)})(info),onDragEnter:info=>{setExpandedKeys(info.expandedKeys)},switcherIcon:obj=>obj.isLeaf?null:obj.expanded?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(PUBLIC_DIR_images_expander_down_react_svg__WEBPACK_IMPORTED_MODULE_3__.Z,{width:"8px",color:"dimgray"}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(PUBLIC_DIR_images_expander_right_react_svg__WEBPACK_IMPORTED_MODULE_4__.Z,{width:"8px",color:"dimgray"}),onSelect:()=>onSelect("select"),onLoad:()=>onLoad("load"),onCheck:()=>onCheck("check"),onRightClick:()=>onRightClick("rightClick"),children:getTreeNodes(gData)})})};Template.displayName="Template";const Default=Template.bind({});Default.args={checkable:!1,draggable:!1,disabled:!1,multiple:!1,showIcon:!0,isFullFillSelection:!0,isEmptyRootNode:!1,defaultExpandAll:!1,defaultExpandParent:!0,data:[{key:"0-0",children:[{key:"0-0-0"},{key:"0-0-1"}]}],title:"Title",newItems:0,showBadge:!1},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'({\n  data,\n  title,\n  newItems,\n  showBadge,\n  onSelect,\n  onLoad,\n  onCheck,\n  onRightClick,\n  ...args\n}) => {\n  const [gData, setGData] = useState(data);\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n  const [expandedKeys, setExpandedKeys] = useState(["0-0-key", "0-0-0-key", "0-0-0-0-key"]);\n  const onDragStart = info => {\n    info.event.persist();\n  };\n  const onDragEnter = info => {\n    setExpandedKeys(info.expandedKeys);\n  };\n  const onBadgeClick = e => {\n    const id = e.currentTarget.dataset.id;\n    console.log("Clocked on badge: ", id);\n  };\n  const onDrop = info => {\n    info.event.persist();\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split("-");\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n    const loop = (treeData, key, callback) => {\n      treeData.forEach((item, index, arr) => {\n        if (item.key === key) {\n          callback(item, index, arr);\n          return;\n        }\n        if (item.children) {\n          loop(item.children, key, callback);\n        }\n      });\n    };\n    const treeData = [...gData];\n    let dragObj;\n    loop(treeData, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n    if (!info.dropToGap) {\n      loop(treeData, dropKey, item => {\n        item.children = item.children || [];\n        item.children.push(dragObj);\n      });\n    } else if ((info.node.props.children || []).length > 0 && info.node.props.expanded && dropPosition === 1) {\n      loop(treeData, dropKey, item => {\n        item.children = item.children || [];\n        item.children.unshift(dragObj);\n      });\n    } else {\n      let ar;\n      let i;\n      loop(treeData, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    }\n    setGData(treeData);\n  };\n  const onExpand = expandedKeys => {\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n  const getTreeNodes = tree => {\n    return tree.map(item => {\n      if (item.children && item.children.length) {\n        return <TreeNode title={title} key={item.key} icon={<CatalogFolderReactSvg size="scale"\n        //isfill=true,\n        color="dimgray" />} onBadgeClick={onBadgeClick} newItems={newItems} showBadge={showBadge}>\r\n            {getTreeNodes(item.children)}\r\n          </TreeNode>;\n      }\n      return <TreeNode key={item.key} title={title} icon={React.createElement(CatalogFolderReactSvg, {\n        size: "scale",\n        //isfill: true,\n        color: "dimgray"\n      })}></TreeNode>;\n    });\n  };\n  const switcherIcon = obj => {\n    if (obj.isLeaf) {\n      return null;\n    }\n    if (obj.expanded) {\n      return <ExpanderDownReactSvg width="8px" color="dimgray" />;\n    } else {\n      return <ExpanderRightReactSvg width="8px" color="dimgray" />;\n    }\n  };\n  return <div style={{\n    width: "250px",\n    margin: "20px"\n  }}>\r\n      <TreeMenu {...args} onExpand={onExpand} autoExpandParent={autoExpandParent} expandedKeys={expandedKeys} onDragStart={info => onDragStart(info)} onDrop={info => onDrop(info)} onDragEnter={onDragEnter} switcherIcon={switcherIcon} onSelect={() => onSelect("select")} onLoad={() => onLoad("load")} onCheck={() => onCheck("check")} onRightClick={() => onRightClick("rightClick")}>\r\n        {getTreeNodes(gData)}\r\n      </TreeMenu>\r\n    </div>;\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]},"../../public/images/expander-right.react.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const __WEBPACK_DEFAULT_EXPORT__=function SvgExpanderRightreact(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({width:24,height:24,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{stroke:"#000",d:"M6.872 23.013L6.871 1.782l11.235 10.633L6.872 23.013z",strokeLinecap:"null",strokeLinejoin:"null",strokeDasharray:"null",strokeWidth:.1})))}}}]);