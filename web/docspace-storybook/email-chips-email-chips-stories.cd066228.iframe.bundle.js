"use strict";(self.webpackChunk_docspace_components=self.webpackChunk_docspace_components||[]).push([[8485],{"./email-chips/email-chips.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Empty:()=>Empty,__namedExportsOrder:()=>__namedExportsOrder,default:()=>email_chips_stories});var react=__webpack_require__("../../node_modules/react/index.js"),prop_types=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types);const useClickOutside=(ref,handler,...deps)=>{(0,react.useEffect)((()=>{const handleClickOutside=e=>{e.stopPropagation(),ref.current&&!ref.current.contains(e.target)&&handler()};return document.addEventListener("mousedown",handleClickOutside),()=>{document.removeEventListener("mousedown",handleClickOutside)}}),[ref,...deps])};var styled_components_browser_esm=__webpack_require__("../../node_modules/styled-components/dist/styled-components.browser.esm.js"),common_input_styles=__webpack_require__("./text-input/common-input-styles.js"),base=__webpack_require__("./themes/base.js"),text_input=__webpack_require__("./text-input/index.js"),rtlUtils=__webpack_require__("./utils/rtlUtils.js");const StyledChipWithInput=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledChipWithInput",componentId:"sc-b82f4c-0"})(["min-height:32px;max-height:220px;width:100%;display:flex;flex-wrap:wrap;height:fit-content;cursor:auto;width:",";"],(props=>0===props.length&&"100%")),StyledContent=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledContent",componentId:"sc-b82f4c-1"})(["position:relative;width:469px;height:220px;"]),StyledChipGroup=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledChipGroup",componentId:"sc-b82f4c-2"})([":focus-visible{outline:0px solid #2da7db !important;}height:fit-content;",":focus-within{border-color:",";}.ScrollbarsCustom-Wrapper,.ScrollbarsCustom-Scroller{position:inherit !important;}.scroll{height:fit-content;position:inherit !important;display:flex;flex-wrap:wrap;:focus-visible{outline:0px solid #2da7db !important;}}input{flex:1 0 auto;}"],common_input_styles.Z,(props=>props.theme.inputBlock.borderColor));StyledChipGroup.defaultProps={theme:base.Z};const StyledAllChips=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledAllChips",componentId:"sc-b82f4c-3"})(["width:448px;max-height:180px;display:flex;flex-wrap:wrap;flex:1 1 auto;"]),StyledChip=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledChip",componentId:"sc-b82f4c-4"})(["width:fit-content;max-width:calc(100% - 18px);display:flex;align-items:center;justify-content:center;box-sizing:border-box;background:#eceef1;height:32px;margin:2px 4px;padding:5px 7px;border-radius:3px 0 0 3px;background:",";border:",";user-select:none;.warning_icon_wrap{cursor:pointer;.warning_icon{","}}"],(props=>props.isValid?props.theme.selectedItem.background:"#F7CDBE"),(props=>props.isSelected?props.theme.emailChips.dashedBorder:props.theme.selectedItem.border),(props=>"rtl"===props.theme.interfaceDirection?"margin-left: 4px;":"margin-right: 4px;"));StyledChip.defaultProps={theme:base.Z};const StyledChipValue=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledChipValue",componentId:"sc-b82f4c-5"})([""," min-width:0px;max-width:395px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:normal;font-size:",";color:",";:hover{cursor:pointer;}"],(props=>"rtl"===props.theme.interfaceDirection?"margin-left: 8px;":"margin-right: 8px;"),(props=>props.theme.getCorrectFontSize("13px")),(props=>props.isValid?props.theme.selectedItem.text.color:"#333")),StyledContainer=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledContainer",componentId:"sc-b82f4c-6"})(["position:relative;height:32px;margin:3px 4px;"]),StyledChipInput=(0,styled_components_browser_esm.ZP)(text_input.Z).withConfig({displayName:"styled-emailchips__StyledChipInput",componentId:"sc-b82f4c-7"})(["flex:",";"],(props=>`${props.flexvalue}!important`)),StyledInputWithLink=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledInputWithLink",componentId:"sc-b82f4c-8"})(["position:relative;display:grid;gap:8px;grid-template-columns:auto 15%;align-content:space-between;width:calc(100% - 8px);.textInput{width:calc(100% - 8px);padding:0px;margin:",";}.link{text-align:end;margin:10px 0px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;","}"],(props=>(0,rtlUtils.AK)("8px 0px 10px 8px",props.theme.interfaceDirection)),(props=>"rtl"===props.theme.interfaceDirection?"margin-left: 8px;":"margin-right: 8px;")),StyledTooltip=styled_components_browser_esm.ZP.div.withConfig({displayName:"styled-emailchips__StyledTooltip",componentId:"sc-b82f4c-9"})(["position:absolute;top:-49px;"," max-width:435px;padding:16px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;background:#f8f7bf;border-radius:6px;opacity:0.9;"],(props=>"rtl"===props.theme.interfaceDirection?"right: 0;":"left: 0;")),truncate=(str,length)=>str?.length>length?str?.slice(0,length)+"...":str,sliceEmail=it=>{if("string"==typeof it){const res=truncate(it,320);return{name:res,email:res}}return{...it,name:truncate(it?.name,64),email:truncate(it?.email,256)}};var link_0=__webpack_require__("./link/index.js"),utils_email=__webpack_require__("./utils/email/index.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const InputGroup=(0,react.memo)((({placeholder,exceededLimitText,existEmailText,exceededLimitInputText,clearButtonLabel,inputRef,containerRef,maxLength,isExistedOn,isExceededLimitChips,isExceededLimitInput,goFromInputToChips,onClearClick,onHideAllTooltips,showTooltipOfLimit,onAddChip})=>{const[value,setValue]=(0,react.useState)(""),onEnterPress=()=>{if(isExceededLimitChips)return;if(isExistedOn)return;if(0==value.trim().length)return;const settings=new utils_email.EmailSettings;settings.allowName=!0;const chipsFromString=(0,utils_email.parseAddresses)(value,settings).map((it=>({name:""===it.name?it.email:it.name,email:it.email,isValid:it.isValid(),parseErrors:it.parseErrors})));onAddChip(chipsFromString),setValue("")};return(0,jsx_runtime.jsxs)(StyledInputWithLink,{children:[isExistedOn&&(0,jsx_runtime.jsx)(StyledTooltip,{children:existEmailText}),isExceededLimitChips&&(0,jsx_runtime.jsx)(StyledTooltip,{children:exceededLimitText}),isExceededLimitInput&&(0,jsx_runtime.jsx)(StyledTooltip,{children:exceededLimitInputText}),(0,jsx_runtime.jsx)(text_input.Z,{value,onChange:e=>{setValue(e.target.value),onHideAllTooltips(),e.target.value.length>=maxLength&&showTooltipOfLimit()},forwardedRef:inputRef,onKeyDown:e=>{switch(e.code){case"Enter":case"NumpadEnter":onEnterPress();break;case"ArrowLeft":if(!(0===inputRef.current.selectionStart))return;goFromInputToChips(),inputRef&&(onHideAllTooltips(),inputRef.current.blur(),containerRef.current.setAttribute("tabindex","0"),containerRef.current.focus())}},placeholder,withBorder:!1,className:"textInput",maxLength}),(0,jsx_runtime.jsx)(link_0.Z,{type:"action",isHovered:!0,className:"link",onClick:onClearClick,children:clearButtonLabel})]})}));InputGroup.propTypes={inputRef:prop_types_default().shape({current:prop_types_default().any}),containerRef:prop_types_default().shape({current:prop_types_default().any}),placeholder:prop_types_default().string,exceededLimitText:prop_types_default().string,existEmailText:prop_types_default().string,exceededLimitInputText:prop_types_default().string,clearButtonLabel:prop_types_default().string,maxLength:prop_types_default().number,goFromInputToChips:prop_types_default().func,onClearClick:prop_types_default().func,isExistedOn:prop_types_default().bool,isExceededLimitChips:prop_types_default().bool,isExceededLimitInput:prop_types_default().bool,onHideAllTooltips:prop_types_default().func,showTooltipOfLimit:prop_types_default().func,onAddChip:prop_types_default().func},InputGroup.displayName="InputGroup";const input_group=InputGroup;var icon_button=__webpack_require__("./icon-button/index.js"),tooltip=__webpack_require__("./tooltip/index.js");const Warningurl_namespaceObject=__webpack_require__.p+"images/Warning.svg?hash=4e8fcbd7703e31b80f0c",Deleteurl_namespaceObject=__webpack_require__.p+"images/Delete.svg?hash=ee3775ff507db3c405f9",Chip=props=>{const{value,currentChip,isSelected,isValid,invalidEmailText,chipOverLimitText,onDelete,onDoubleClick,onSaveNewChip,onClick}=props;function initNewValue(){return value?.email===value?.name||""===value?.name?value?.email:`"${value?.name}" <${value?.email}>`}const[newValue,setNewValue]=(0,react.useState)(initNewValue()),[chipWidth,setChipWidth]=(0,react.useState)(0),[isChipOverLimit,setIsChipOverLimit]=(0,react.useState)(!1),warningRef=(0,react.useRef)(null),chipRef=(0,react.useRef)(null),chipInputRef=(0,react.useRef)(null);(0,react.useEffect)((()=>{setChipWidth(chipRef.current?.clientWidth)}),[chipRef]),(0,react.useEffect)((()=>{isSelected&&chipRef.current?.scrollIntoView({block:"end"})}),[isSelected]),(0,react.useEffect)((()=>{newValue.length>320?setIsChipOverLimit(!0):setIsChipOverLimit(!1)}),[newValue]),useClickOutside(chipInputRef,(()=>{onSaveNewChip(value,newValue)}),newValue);const onChange=e=>{(e.target.value.length<=323||e.target.value.length<newValue.length)&&setNewValue(e.target.value)},onInputKeyDown=(0,react.useCallback)((e=>{switch(e.code){case"Enter":case"NumpadEnter":onSaveNewChip(value,newValue),setNewValue(sliceEmail(newValue).email);break;case"Escape":return setNewValue(initNewValue()),onDoubleClick(null),!1}}),[newValue]);return value?.email===currentChip?.email?(0,jsx_runtime.jsxs)(StyledContainer,{children:[isChipOverLimit&&(0,jsx_runtime.jsx)(tooltip.Z,{id:"input",float:!0}),(0,jsx_runtime.jsx)(StyledChipInput,{"data-tooltip-id":"input","data-tooltip-content":chipOverLimitText,value:newValue,forwardedRef:chipInputRef,onChange,onKeyDown:onInputKeyDown,isAutoFocussed:!0,withBorder:!1,maxLength:323,flexvalue:value?.name!==value?.email?"0 1 auto":`0 0 ${chipWidth}px`})]}):(0,jsx_runtime.jsxs)(StyledChip,{isSelected,onDoubleClick:()=>{onDoubleClick(value)},onClick:e=>{e.shiftKey&&document.getSelection().removeAllRanges(),onClick(value,e.shiftKey)},isValid,ref:chipRef,children:[!isValid&&(0,jsx_runtime.jsxs)("div",{className:"warning_icon_wrap",ref:warningRef,children:[(0,jsx_runtime.jsx)(icon_button.Z,{iconName:Warningurl_namespaceObject,size:12,className:"warning_icon_wrap warning_icon","data-tooltip-id":"group","data-tooltip-content":invalidEmailText}),(0,jsx_runtime.jsx)(tooltip.Z,{id:"group",place:"top"})]}),(0,jsx_runtime.jsx)(StyledChipValue,{dir:"auto",isValid,children:value?.name||value?.email}),(0,jsx_runtime.jsx)(icon_button.Z,{iconName:Deleteurl_namespaceObject,size:12,onClick:()=>{onDelete(value)}})]})};Chip.displayName="Chip",Chip.propTypes={value:prop_types_default().object,currentChip:prop_types_default().object,isSelected:prop_types_default().bool,isValid:prop_types_default().bool,invalidEmailText:prop_types_default().string,chipOverLimitText:prop_types_default().string,onClick:prop_types_default().func,onDoubleClick:prop_types_default().func,onDelete:prop_types_default().func,onSaveNewChip:prop_types_default().func},Chip.__docgenInfo={description:"",methods:[],displayName:"Chip",props:{value:{description:"",type:{name:"object"},required:!1},currentChip:{description:"",type:{name:"object"},required:!1},isSelected:{description:"",type:{name:"bool"},required:!1},isValid:{description:"",type:{name:"bool"},required:!1},invalidEmailText:{description:"",type:{name:"string"},required:!1},chipOverLimitText:{description:"",type:{name:"string"},required:!1},onClick:{description:"",type:{name:"func"},required:!1},onDoubleClick:{description:"",type:{name:"func"},required:!1},onDelete:{description:"",type:{name:"func"},required:!1},onSaveNewChip:{description:"",type:{name:"func"},required:!1}}};const chip=Chip,ChipsRender=(0,react.memo)((({chips,currentChip,blockRef,checkSelected,invalidEmailText,chipOverLimitText,onDelete,onDoubleClick,onSaveNewChip,onClick,...props})=>{const emailSettings=new utils_email.EmailSettings;return(0,jsx_runtime.jsx)(StyledAllChips,{ref:blockRef,children:chips?.map((it=>{return(0,jsx_runtime.jsx)(chip,{value:it,currentChip,isSelected:(value=it,checkSelected(value)),isValid:(email=it?.email,(0,utils_email.parseAddress)(email,emailSettings).isValid()),invalidEmailText,chipOverLimitText,onDelete,onDoubleClick,onSaveNewChip,onClick},it?.email);var email,value}))})}));ChipsRender.propTypes={chips:prop_types_default().arrayOf(prop_types_default().object),currentChip:prop_types_default().object,invalidEmailText:prop_types_default().string,chipOverLimitText:prop_types_default().string,blockRef:prop_types_default().shape({current:prop_types_default().any}),checkSelected:prop_types_default().func,onDelete:prop_types_default().func,onDoubleClick:prop_types_default().func,onSaveNewChip:prop_types_default().func,onClick:prop_types_default().func},ChipsRender.displayName="ChipsRender";const chips_render=ChipsRender;var index=__webpack_require__("./index.js");const calcMaxLengthInput=exceededLimit=>323*exceededLimit,EmailChips=({options,placeholder,onChange,clearButtonLabel,existEmailText,invalidEmailText,exceededLimit,exceededLimitText,exceededLimitInputText,chipOverLimitText,...props})=>{const[chips,setChips]=(0,react.useState)(options||[]),[currentChip,setCurrentChip]=(0,react.useState)(null),[selectedChips,setSelectedChips]=(0,react.useState)([]),[isExistedOn,setIsExistedOn]=(0,react.useState)(!1),[isExceededLimitChips,setIsExceededLimitChips]=(0,react.useState)(!1),[isExceededLimitInput,setIsExceededLimitInput]=(0,react.useState)(!1),containerRef=(0,react.useRef)(null),inputRef=(0,react.useRef)(null),blockRef=(0,react.useRef)(null),scrollbarRef=(0,react.useRef)(null),chipsCount=(0,react.useRef)(options?.length);(0,react.useEffect)((()=>{onChange(chips.map((it=>it?.name===it?.email||""===it?.name?{email:it?.email,isValid:it?.isValid}:{name:it?.name,email:it?.email,isValid:it?.isValid})))}),[chips]),(0,react.useEffect)((()=>{const isChipAdd=chips.length>chipsCount.current;scrollbarRef.current&&isChipAdd&&scrollbarRef.current?.scrollTo(0,scrollbarRef.current?.scrollHeight),chipsCount.current=chips.length}),[chips.length]),useClickOutside(blockRef,(()=>{selectedChips.length>0&&setSelectedChips([])}),selectedChips),useClickOutside(inputRef,(()=>{onHideAllTooltips()}));const onDelete=(0,react.useCallback)((value=>{setChips(chips.filter((it=>it.email!==value.email)))}),[chips]),onHideAllTooltips=()=>{setIsExceededLimitChips(!1),setIsExistedOn(!1),setIsExceededLimitInput(!1)};return(0,jsx_runtime.jsx)(StyledContent,{...props,children:(0,jsx_runtime.jsx)(StyledChipGroup,{onKeyDown:e=>{const code=e.code,isShiftDown=e.shiftKey,isCtrlDown=e.ctrlKey;if(["Enter","Escape","Backspace","Delete","ArrowRigth","ArrowLeft","ArrowLeft","ArrowRight","KeyC"].includes(code)||isCtrlDown||isShiftDown){if("Enter"===code&&1==selectedChips.length&&!currentChip)return e.stopPropagation(),void setCurrentChip(selectedChips[0]);if("Escape"===code)return setSelectedChips(currentChip?[currentChip]:[]),containerRef.current.setAttribute("tabindex","0"),void containerRef.current.focus();if(selectedChips.length>0&&("Backspace"===code||"Delete"===code)&&!currentChip){const filteredChips=chips.filter((e=>!~selectedChips.indexOf(e)));return setChips(filteredChips),setSelectedChips([]),void inputRef.current.focus()}if(selectedChips.length>0&&!currentChip){let chip=null;chip=isShiftDown&&"ArrowRigth"===code?selectedChips[selectedChips.length-1]:selectedChips[0];const index=chips.findIndex((it=>it.email===chip?.email));switch(code){case"ArrowLeft":isShiftDown?selectedChips.includes(chips[index-1])?setSelectedChips(selectedChips.filter((it=>it!==chips[index]))):chips[index-1]&&setSelectedChips([chips[index-1],...selectedChips]):0!=index&&setSelectedChips([chips[index-1]]);break;case"ArrowRight":isShiftDown?selectedChips.includes(chips[index+1])?setSelectedChips(selectedChips.filter((it=>it!==chips[index]))):chips[index+1]&&setSelectedChips([chips[index+1],...selectedChips]):index!=chips.length-1?setSelectedChips([chips[index+1]]):(setSelectedChips([]),inputRef&&inputRef.current.focus());break;case"KeyC":isCtrlDown&&null===currentChip&&navigator.clipboard.writeText(selectedChips.map((it=>it.name!==it.email?`"${it.name}" <${it.email}>`:it.email)).join(", "))}}}},ref:containerRef,tabindex:"-1",children:(0,jsx_runtime.jsxs)(StyledChipWithInput,{length:chips.length,children:[(0,jsx_runtime.jsx)(index.LW,{scrollclass:"scroll",stype:"preMediumBlack",ref:scrollbarRef,children:(0,jsx_runtime.jsx)(chips_render,{chips,checkSelected:value=>!!selectedChips?.find((item=>item?.email===value?.email)),currentChip,blockRef,onClick:(value,isShiftKey)=>{if(isShiftKey){const isExisted=!!selectedChips?.find((it=>it.email===value.email));return setSelectedChips(isExisted?selectedChips.filter((it=>it.email!=value.email)):[value,...selectedChips])}setSelectedChips([value])},invalidEmailText,chipOverLimitText,onDelete,onDoubleClick:value=>{setCurrentChip(value)},onSaveNewChip:(value,newValue)=>{const settings=new utils_email.EmailSettings;settings.allowName=!0;let parsed=(0,utils_email.parseAddresses)(newValue,settings);if(parsed[0].isValid=parsed[0].isValid(),newValue&&newValue!==`"${value?.name}" <${value?.email}>`){const newChips=chips.map((it=>it.email===value.email?sliceEmail(parsed[0]):it));setChips(newChips),setSelectedChips([sliceEmail(parsed[0])])}containerRef.current.setAttribute("tabindex","-1"),containerRef.current.focus(),setCurrentChip(null)}})}),(0,jsx_runtime.jsx)(input_group,{placeholder,exceededLimitText,existEmailText,exceededLimitInputText,clearButtonLabel,inputRef,containerRef,maxLength:calcMaxLengthInput(exceededLimit),goFromInputToChips:()=>{setSelectedChips([chips[chips?.length-1]])},onClearClick:()=>{setChips([])},isExistedOn,isExceededLimitChips,isExceededLimitInput,onHideAllTooltips,showTooltipOfLimit:()=>{setIsExceededLimitInput(!0)},onAddChip:chipsToAdd=>{if(setIsExceededLimitChips(chips.length>=exceededLimit),chips.length>=exceededLimit)return;const filterLimit=exceededLimit-chips.length,filteredChips=chipsToAdd.map(sliceEmail).filter(((it,index)=>{const isExisted=!!chips.find((chip=>chip.email===it||chip.email===it?.email));return(1!==chipsToAdd.length||(setIsExistedOn(isExisted),!isExisted))&&(!isExisted&&index<filterLimit)}));setChips([...chips,...filteredChips])}})]})})})};EmailChips.displayName="EmailChips",EmailChips.propTypes={options:prop_types_default().arrayOf(prop_types_default().object),placeholder:prop_types_default().string,clearButtonLabel:prop_types_default().string,existEmailText:prop_types_default().string,invalidEmailText:prop_types_default().string,exceededLimit:prop_types_default().number,exceededLimitText:prop_types_default().string,exceededLimitInputText:prop_types_default().string,chipOverLimitText:prop_types_default().string,onChange:prop_types_default().func.isRequired},EmailChips.defaultProps={placeholder:"Invite people by name or email",clearButtonLabel:"Clear list",existEmailText:"This email address has already been entered",invalidEmailText:"Invalid email address",exceededLimitText:"The limit on the number of emails has reached the maximum",exceededLimitInputText:"The limit on the number of characters has reached the maximum value",exceededLimit:50},EmailChips.__docgenInfo={description:"",methods:[],displayName:"EmailChips",props:{placeholder:{defaultValue:{value:'"Invite people by name or email"',computed:!1},description:"Placeholder text for the input",type:{name:"string"},required:!1},clearButtonLabel:{defaultValue:{value:'"Clear list"',computed:!1},description:"The text displayed in the button that triggers cleaning all chips",type:{name:"string"},required:!1},existEmailText:{defaultValue:{value:'"This email address has already been entered"',computed:!1},description:"Warning text when entering an existing email",type:{name:"string"},required:!1},invalidEmailText:{defaultValue:{value:'"Invalid email address"',computed:!1},description:"Warning text when entering an invalid email",type:{name:"string"},required:!1},exceededLimitText:{defaultValue:{value:'"The limit on the number of emails has reached the maximum"',computed:!1},description:"Warning text when entering the number of chips exceeding the limit",type:{name:"string"},required:!1},exceededLimitInputText:{defaultValue:{value:'"The limit on the number of characters has reached the maximum value"',computed:!1},description:"Warning text when the number of inputted characters exceeds the limit",type:{name:"string"},required:!1},exceededLimit:{defaultValue:{value:"50",computed:!1},description:"Limit of chips",type:{name:"number"},required:!1},options:{description:"Array of objects with chips",type:{name:"arrayOf",value:{name:"object"}},required:!1},chipOverLimitText:{description:"Warning text when the number of the email address characters exceeds the limit",type:{name:"string"},required:!1},onChange:{description:"Sets a callback function that will be called when the selected items are changed",type:{name:"func"},required:!0}}};const email_chips=EmailChips,email_chips_stories={title:"Components/EmailChips",component:email_chips},Wrapper=props=>(0,jsx_runtime.jsx)("div",{style:{height:"220px"},children:props.children});Wrapper.displayName="Wrapper";const Template=args=>(0,jsx_runtime.jsx)(Wrapper,{children:(0,jsx_runtime.jsx)(email_chips,{...args})});Template.displayName="Template";const Default=Template.bind({});Default.args={options:[{name:"Ivan Petrov",email:"myname@gmul.com",isValid:!0},{name:"Donna Cross",email:"myname45@gmul.com",isValid:!0},{name:"myname@gmul.co45",email:"myname@gmul.co45",isValid:!1},{name:"Lisa Cooper",email:"myn348ame@gmul.com",isValid:!0},{name:"myname19@gmail.com",email:"myname19@gmail.com",isValid:!0},{name:"myname@gmail.com",email:"myname@gmail.com",isValid:!0},{name:"mynameiskonstantine1353434@gmail.com",email:"mynameiskonstantine1353434@gmail.com",isValid:!0},{name:"mynameiskonstantine56454864846455488875454654846454@gmail.com",email:"mynameiskonstantine56454864846455488875454654846454@gmail.com",isValid:!0},{name:"mynameiskonstantine3246@gmail.com",email:"mynameiskonstantine3246@gmail.com",isValid:!0}],onChange:selected=>{},placeholder:"Invite people by name or email",clearButtonLabel:"Clear list",existEmailText:"This email address has already been entered",invalidEmailText:"Invalid email address",exceededLimitText:"The limit on the number of emails has reached the maximum",exceededLimitInputText:"The limit on the number of characters has reached the maximum value",chipOverLimitText:"The limit on the number of characters has reached the maximum value",exceededLimit:500};const Empty=Template.bind({});Empty.args={options:[],placeholder:"Type your chips...",clearButtonLabel:"Clear list",existEmailText:"This email address has already been entered",invalidEmailText:"Invalid email address",exceededLimitText:"The limit on the number of emails has reached the maximum",exceededLimitInputText:"The limit on the number of characters has reached the maximum value",chipOverLimitText:"The limit on the number of characters has reached the maximum value",exceededLimit:500},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => <Wrapper>\r\n    <EmailChips {...args} />\r\n  </Wrapper>",...Default.parameters?.docs?.source}}},Empty.parameters={...Empty.parameters,docs:{...Empty.parameters?.docs,source:{originalSource:"args => <Wrapper>\r\n    <EmailChips {...args} />\r\n  </Wrapper>",...Empty.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Empty"]}}]);