"use strict";(self.webpackChunk_docspace_shared=self.webpackChunk_docspace_shared||[]).push([[1224],{"./components/file-input/FileInput.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("../../node_modules/react/index.js");var _text_input__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./components/text-input/index.ts"),_FileInput__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./components/file-input/FileInput.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/FileInput",component:_FileInput__WEBPACK_IMPORTED_MODULE_2__.t,argTypes:{onInput:{action:"onInput"}},parameters:{docs:{description:{component:"File entry field"}}}},Template=args=>{const{onInput}=args;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_FileInput__WEBPACK_IMPORTED_MODULE_2__.t,{...args,onInput:file=>{onInput?.(file)}})};Template.displayName="Template";const Default={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Template,{...args}),args:{placeholder:"Input file",size:_text_input__WEBPACK_IMPORTED_MODULE_1__.YI.base,scale:!1,isDisabled:!1,id:"file-input-id",name:"demoFileInputName",hasError:!1,hasWarning:!1,accept:[".doc",".docx"]}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: args => <Template {...args} />,\n  args: {\n    placeholder: "Input file",\n    size: InputSize.base,\n    scale: false,\n    isDisabled: false,\n    id: "file-input-id",\n    name: "demoFileInputName",\n    hasError: false,\n    hasWarning: false,\n    accept: [".doc", ".docx"]\n  }\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]},"./components/icon-button/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K:()=>IconButton_IconButton});var react=__webpack_require__("../../node_modules/react/index.js"),react_svg_esm=__webpack_require__("../../node_modules/react-svg/dist/react-svg.esm.js"),styled_components_browser_esm=__webpack_require__("../../node_modules/styled-components/dist/styled-components.browser.esm.js"),themes=__webpack_require__("./themes/index.ts");const StyledOuter=styled_components_browser_esm.Ay.div`
  width: ${props=>props.size?`${props.size}px`:"20px"};
  height: ${props=>props.size?`${props.size}px`:"20px"};
  cursor: ${props=>props.isDisabled||!props.isClickable?"default":"pointer"};
  line-height: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

  ${props=>props.isStroke&&styled_components_browser_esm.AH`
      svg {
        &:not(:root) {
          width: 100%;
          height: 100%;
        }
        path {
          stroke: ${props.color||props.theme.iconButton.color};
        }
      }
      &:hover {
        svg {
          path {
            stroke: ${props.isDisabled?props.theme.iconButton.color:props.color||props.theme.iconButton.hoverColor};
          }
        }
      }
    `}

  ${props=>props.isFill&&!props.isStroke&&styled_components_browser_esm.AH`
      svg {
        &:not(:root) {
          width: 100%;
          height: 100%;
        }
        path {
          fill: ${props.color||props.theme.iconButton.color};
        }
      }
      &:hover {
        svg {
          path {
            fill: ${props.isDisabled?props.theme.iconButton.color:props.color||props.theme.iconButton.hoverColor};
          }
        }
      }
    `}
`;StyledOuter.defaultProps={theme:themes.C6};const IconButton_styled=StyledOuter;var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const IconButton_IconButton=({iconName,iconHoverName,iconClickName,iconNode,color,hoverColor,clickColor,isDisabled=!1,isFill=!0,isClickable=!1,className,size=25,title,id,style,dataTip="",isStroke=!1,onMouseEnter,onMouseLeave,onMouseDown,onMouseUp,onClick,...rest})=>{const[currentIconName,setCurrentIconName]=react.useState(iconName),[currentIconColor,setCurrentIconColor]=react.useState(iconName);return react.useEffect((()=>{setCurrentIconName(iconName),setCurrentIconColor(color||"")}),[iconName,color]),(0,jsx_runtime.jsx)(IconButton_styled,{className,size,title,isDisabled,onMouseEnter:e=>{isDisabled||("ontouchstart"in document.documentElement?(setCurrentIconName(iconName),setCurrentIconColor(hoverColor||color)):(setCurrentIconName(iconHoverName||iconName),setCurrentIconColor(hoverColor||color)),onMouseEnter?.(e))},onMouseLeave:e=>{isDisabled||(setCurrentIconName(iconName),setCurrentIconColor(color),onMouseLeave?.(e))},onMouseDown:e=>{isDisabled||("ontouchstart"in document.documentElement?(setCurrentIconName(iconName),setCurrentIconColor(clickColor||color)):(setCurrentIconName(iconClickName||iconName),setCurrentIconColor(clickColor||color)),onMouseDown?.(e))},onMouseUp:e=>{if(!isDisabled)switch(e.nativeEvent.button){case 1:"ontouchstart"in document.documentElement?(setCurrentIconName(iconName),setCurrentIconColor(hoverColor||color)):(setCurrentIconName(iconHoverName||iconName),setCurrentIconColor(hoverColor||color)),onMouseUp?.(e);break;case 2:onMouseUp?.(e)}},onClick:e=>{isDisabled||onClick?.(e)},isClickable:"function"==typeof onClick||isClickable,"data-tip":dataTip,"data-event":"click focus","data-for":id,id,style,color:currentIconColor,isFill,iconName,"data-testid":"icon-button",isStroke,...rest,children:iconNode||(0,jsx_runtime.jsx)(react_svg_esm.k,{className:"icon-button_svg not-selectable",src:currentIconName||""})})};IconButton_IconButton.displayName="IconButton";try{IconButton_IconButton.displayName="IconButton",IconButton_IconButton.__docgenInfo={description:"",displayName:"IconButton",props:{className:{defaultValue:null,description:"Sets component class",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"Icon color",name:"color",required:!1,type:{name:"string"}},hoverColor:{defaultValue:null,description:"Icon color on hover action",name:"hoverColor",required:!1,type:{name:"string"}},clickColor:{defaultValue:null,description:"Icon color on click action",name:"clickColor",required:!1,type:{name:"string"}},size:{defaultValue:{value:"25"},description:"Button height and width value",name:"size",required:!1,type:{name:"number | IconSizeType"}},isFill:{defaultValue:{value:"true"},description:"Determines if icon fill is needed",name:"isFill",required:!1,type:{name:"boolean"}},isStroke:{defaultValue:{value:"false"},description:"Determines if icon stroke is needed",name:"isStroke",required:!1,type:{name:"boolean"}},isDisabled:{defaultValue:{value:"false"},description:"Sets the button to present a disabled state",name:"isDisabled",required:!1,type:{name:"boolean"}},isClickable:{defaultValue:{value:"false"},description:"Sets cursor value",name:"isClickable",required:!1,type:{name:"boolean"}},iconNode:{defaultValue:null,description:"Icon node",name:"iconNode",required:!1,type:{name:"ReactNode"}},iconName:{defaultValue:null,description:"Icon name",name:"iconName",required:!1,type:{name:"string"}},iconHoverName:{defaultValue:null,description:"Icon name on hover action",name:"iconHoverName",required:!1,type:{name:"string"}},iconClickName:{defaultValue:null,description:"Icon name on click action",name:"iconClickName",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Sets a button callback function triggered when the button is clicked",name:"onClick",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},onMouseEnter:{defaultValue:null,description:"Sets a button callback function triggered when the cursor enters the area",name:"onMouseEnter",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void)"}},onMouseDown:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves down",name:"onMouseDown",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},onMouseUp:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves up",name:"onMouseUp",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},onMouseLeave:{defaultValue:null,description:"Sets a button callback function triggered when the cursor leaves the icon",name:"onMouseLeave",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void)"}},id:{defaultValue:null,description:"Sets component id",name:"id",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Accepts css style",name:"style",required:!1,type:{name:"CSSProperties"}},dataTip:{defaultValue:{value:""},description:"The data-* attribute is used to store custom data private to the page or application. Required to display a tip over the hovered element",name:"dataTip",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"Data when user hover on icon",name:"title",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/icon-button/IconButton.tsx#IconButton"]={docgenInfo:IconButton_IconButton.__docgenInfo,name:"IconButton",path:"components/icon-button/IconButton.tsx#IconButton"})}catch(__react_docgen_typescript_loader_error){}try{IconButton_IconButton.displayName="IconButton",__function.__docgenInfo={description:"",displayName:"IconButton",props:{className:{defaultValue:null,description:"Sets component class",name:"className",required:!1,type:{name:"string | undefined"}},color:{defaultValue:null,description:"Icon color",name:"color",required:!1,type:{name:"string | undefined"}},hoverColor:{defaultValue:null,description:"Icon color on hover action",name:"hoverColor",required:!1,type:{name:"string | undefined"}},clickColor:{defaultValue:null,description:"Icon color on click action",name:"clickColor",required:!1,type:{name:"string | undefined"}},size:{defaultValue:{value:25},description:"Button height and width value",name:"size",required:!1,type:{name:"number | IconSizeType | undefined"}},isFill:{defaultValue:{value:!0},description:"Determines if icon fill is needed",name:"isFill",required:!1,type:{name:"boolean | undefined"}},isStroke:{defaultValue:{value:!1},description:"Determines if icon stroke is needed",name:"isStroke",required:!1,type:{name:"boolean | undefined"}},isDisabled:{defaultValue:{value:!1},description:"Sets the button to present a disabled state",name:"isDisabled",required:!1,type:{name:"boolean | undefined"}},isClickable:{defaultValue:{value:!1},description:"Sets cursor value",name:"isClickable",required:!1,type:{name:"boolean | undefined"}},iconNode:{defaultValue:null,description:"Icon node",name:"iconNode",required:!1,type:{name:"ReactNode"}},iconName:{defaultValue:null,description:"Icon name",name:"iconName",required:!1,type:{name:"string | undefined"}},iconHoverName:{defaultValue:null,description:"Icon name on hover action",name:"iconHoverName",required:!1,type:{name:"string | undefined"}},iconClickName:{defaultValue:null,description:"Icon name on click action",name:"iconClickName",required:!1,type:{name:"string | undefined"}},onClick:{defaultValue:null,description:"Sets a button callback function triggered when the button is clicked",name:"onClick",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"}},onMouseEnter:{defaultValue:null,description:"Sets a button callback function triggered when the cursor enters the area",name:"onMouseEnter",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void) | undefined"}},onMouseDown:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves down",name:"onMouseDown",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"}},onMouseUp:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves up",name:"onMouseUp",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"}},onMouseLeave:{defaultValue:null,description:"Sets a button callback function triggered when the cursor leaves the icon",name:"onMouseLeave",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void) | undefined"}},id:{defaultValue:null,description:"Sets component id",name:"id",required:!1,type:{name:"string | undefined"}},style:{defaultValue:null,description:"Accepts css style",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dataTip:{defaultValue:{value:""},description:"The data-* attribute is used to store custom data private to the page or application. Required to display a tip over the hovered element",name:"dataTip",required:!1,type:{name:"string | undefined"}},title:{defaultValue:null,description:"Data when user hover on icon",name:"title",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/icon-button/IconButton.tsx#IconButton"]={docgenInfo:IconButton_IconButton.__docgenInfo,name:"IconButton",path:"components/icon-button/IconButton.tsx#IconButton"})}catch(__react_docgen_typescript_loader_error){}try{IconButton.displayName="IconButton",IconButton.__docgenInfo={description:"",displayName:"IconButton",props:{className:{defaultValue:null,description:"Sets component class",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"Icon color",name:"color",required:!1,type:{name:"string"}},hoverColor:{defaultValue:null,description:"Icon color on hover action",name:"hoverColor",required:!1,type:{name:"string"}},clickColor:{defaultValue:null,description:"Icon color on click action",name:"clickColor",required:!1,type:{name:"string"}},size:{defaultValue:{value:"25"},description:"Button height and width value",name:"size",required:!1,type:{name:"number | IconSizeType"}},isFill:{defaultValue:{value:"true"},description:"Determines if icon fill is needed",name:"isFill",required:!1,type:{name:"boolean"}},isStroke:{defaultValue:{value:"false"},description:"Determines if icon stroke is needed",name:"isStroke",required:!1,type:{name:"boolean"}},isDisabled:{defaultValue:{value:"false"},description:"Sets the button to present a disabled state",name:"isDisabled",required:!1,type:{name:"boolean"}},isClickable:{defaultValue:{value:"false"},description:"Sets cursor value",name:"isClickable",required:!1,type:{name:"boolean"}},iconNode:{defaultValue:null,description:"Icon node",name:"iconNode",required:!1,type:{name:"ReactNode"}},iconName:{defaultValue:null,description:"Icon name",name:"iconName",required:!1,type:{name:"string"}},iconHoverName:{defaultValue:null,description:"Icon name on hover action",name:"iconHoverName",required:!1,type:{name:"string"}},iconClickName:{defaultValue:null,description:"Icon name on click action",name:"iconClickName",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Sets a button callback function triggered when the button is clicked",name:"onClick",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},onMouseEnter:{defaultValue:null,description:"Sets a button callback function triggered when the cursor enters the area",name:"onMouseEnter",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void)"}},onMouseDown:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves down",name:"onMouseDown",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},onMouseUp:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves up",name:"onMouseUp",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},onMouseLeave:{defaultValue:null,description:"Sets a button callback function triggered when the cursor leaves the icon",name:"onMouseLeave",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void)"}},id:{defaultValue:null,description:"Sets component id",name:"id",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Accepts css style",name:"style",required:!1,type:{name:"CSSProperties"}},dataTip:{defaultValue:{value:""},description:"The data-* attribute is used to store custom data private to the page or application. Required to display a tip over the hovered element",name:"dataTip",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"Data when user hover on icon",name:"title",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/icon-button/index.tsx#IconButton"]={docgenInfo:IconButton.__docgenInfo,name:"IconButton",path:"components/icon-button/index.tsx#IconButton"})}catch(__react_docgen_typescript_loader_error){}try{IconButton.displayName="IconButton",__function.__docgenInfo={description:"",displayName:"IconButton",props:{className:{defaultValue:null,description:"Sets component class",name:"className",required:!1,type:{name:"string | undefined"}},color:{defaultValue:null,description:"Icon color",name:"color",required:!1,type:{name:"string | undefined"}},hoverColor:{defaultValue:null,description:"Icon color on hover action",name:"hoverColor",required:!1,type:{name:"string | undefined"}},clickColor:{defaultValue:null,description:"Icon color on click action",name:"clickColor",required:!1,type:{name:"string | undefined"}},size:{defaultValue:{value:25},description:"Button height and width value",name:"size",required:!1,type:{name:"number | IconSizeType | undefined"}},isFill:{defaultValue:{value:!0},description:"Determines if icon fill is needed",name:"isFill",required:!1,type:{name:"boolean | undefined"}},isStroke:{defaultValue:{value:!1},description:"Determines if icon stroke is needed",name:"isStroke",required:!1,type:{name:"boolean | undefined"}},isDisabled:{defaultValue:{value:!1},description:"Sets the button to present a disabled state",name:"isDisabled",required:!1,type:{name:"boolean | undefined"}},isClickable:{defaultValue:{value:!1},description:"Sets cursor value",name:"isClickable",required:!1,type:{name:"boolean | undefined"}},iconNode:{defaultValue:null,description:"Icon node",name:"iconNode",required:!1,type:{name:"ReactNode"}},iconName:{defaultValue:null,description:"Icon name",name:"iconName",required:!1,type:{name:"string | undefined"}},iconHoverName:{defaultValue:null,description:"Icon name on hover action",name:"iconHoverName",required:!1,type:{name:"string | undefined"}},iconClickName:{defaultValue:null,description:"Icon name on click action",name:"iconClickName",required:!1,type:{name:"string | undefined"}},onClick:{defaultValue:null,description:"Sets a button callback function triggered when the button is clicked",name:"onClick",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"}},onMouseEnter:{defaultValue:null,description:"Sets a button callback function triggered when the cursor enters the area",name:"onMouseEnter",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void) | undefined"}},onMouseDown:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves down",name:"onMouseDown",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"}},onMouseUp:{defaultValue:null,description:"Sets a button callback function triggered when the cursor moves up",name:"onMouseUp",required:!1,type:{name:"((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"}},onMouseLeave:{defaultValue:null,description:"Sets a button callback function triggered when the cursor leaves the icon",name:"onMouseLeave",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void) | undefined"}},id:{defaultValue:null,description:"Sets component id",name:"id",required:!1,type:{name:"string | undefined"}},style:{defaultValue:null,description:"Accepts css style",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dataTip:{defaultValue:{value:""},description:"The data-* attribute is used to store custom data private to the page or application. Required to display a tip over the hovered element",name:"dataTip",required:!1,type:{name:"string | undefined"}},title:{defaultValue:null,description:"Data when user hover on icon",name:"title",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/icon-button/index.tsx#IconButton"]={docgenInfo:IconButton.__docgenInfo,name:"IconButton",path:"components/icon-button/index.tsx#IconButton"})}catch(__react_docgen_typescript_loader_error){}},"./components/portal/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>Portal});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),react_dom__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react-dom/index.js");const Portal=({visible,element,appendTo})=>{const[mounted,setMounted]=react__WEBPACK_IMPORTED_MODULE_0__.useState(visible),domExist=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((()=>!("undefined"==typeof window||!window.document||!window.document.createElement)),[]);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{domExist()&&!mounted&&setMounted(!0)}),[domExist,mounted]),element&&mounted?react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(element,appendTo||document.body):null};Portal.defaultProps={visible:!1,appendTo:null}}}]);
//# sourceMappingURL=components-file-input-FileInput-stories.f0a40f71.iframe.bundle.js.map