"use strict";(self.webpackChunk_docspace_components=self.webpackChunk_docspace_components||[]).push([[8227],{"../../node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./password-input/password-input.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>password_input_stories});var react=__webpack_require__("../../node_modules/react/index.js"),password_input=__webpack_require__("./password-input/index.js"),text_input=__webpack_require__("./text-input/index.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("../../node_modules/@storybook/blocks/dist/index.mjs");__webpack_require__("./input-block/index.js");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h3:"h3",h2:"h2",h4:"h4",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Components/PasswordInput",component:password_input.Z}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"passwordinput",children:"PasswordInput"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Password entry field with advanced capabilities for displaying, validation of correspondence and generation based on settings"}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{children:(0,jsx_runtime.jsx)(dist.oG,{of:Default})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"properties",children:"Properties"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"You can apply all the parameters of the InputBlock component to the component."}),"\n",(0,jsx_runtime.jsx)(dist.ZX,{}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"description",children:"Description"}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"object-with-settings",children:"Object with settings:"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-js",children:"{\r\n  minLength: 6,\r\n  upperCase: false,\r\n  digits: false,\r\n  specSymbols: false\r\n}\n"})}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Check for compliance with settings is carried out on fly. As you type in required number of characters, progress bar will fill up and when all conditions are met, the color will change from red to green."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Depending on screen width of device, input will change location of elements."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"When setting focus to input, tooltip will be shown with progress in fulfilling conditions specified in settings. When unfocused, tooltip disappears."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"When button is pressed, copy data will be copied to clipboard and copy action will be blocked for 2 seconds. In future, the button is unlocked."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"If emailInputName parameter value is empty, copy action will be disabled."}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"passwordsettings-properties",children:"passwordSettings properties"}),"\n",(0,jsx_runtime.jsxs)(_components.table,{children:[(0,jsx_runtime.jsx)(_components.thead,{children:(0,jsx_runtime.jsxs)(_components.tr,{children:[(0,jsx_runtime.jsx)(_components.th,{children:"Props"}),(0,jsx_runtime.jsx)(_components.th,{align:"center",children:"Type"}),(0,jsx_runtime.jsx)(_components.th,{align:"center",children:"Required"}),(0,jsx_runtime.jsx)(_components.th,{align:"center",children:"Values"}),(0,jsx_runtime.jsx)(_components.th,{align:"center",children:"Default"}),(0,jsx_runtime.jsx)(_components.th,{children:"Description"})]})}),(0,jsx_runtime.jsxs)(_components.tbody,{children:[(0,jsx_runtime.jsxs)(_components.tr,{children:[(0,jsx_runtime.jsx)(_components.td,{children:(0,jsx_runtime.jsx)(_components.code,{children:"digits"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:(0,jsx_runtime.jsx)(_components.code,{children:"bool"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"✅"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{children:"Must contain digits"})]}),(0,jsx_runtime.jsxs)(_components.tr,{children:[(0,jsx_runtime.jsx)(_components.td,{children:(0,jsx_runtime.jsx)(_components.code,{children:"minLength"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:(0,jsx_runtime.jsx)(_components.code,{children:"number"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"✅"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{children:"Minimum password length"})]}),(0,jsx_runtime.jsxs)(_components.tr,{children:[(0,jsx_runtime.jsx)(_components.td,{children:(0,jsx_runtime.jsx)(_components.code,{children:"specSymbols"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:(0,jsx_runtime.jsx)(_components.code,{children:"bool"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"✅"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{children:"Must contain special characters"})]}),(0,jsx_runtime.jsxs)(_components.tr,{children:[(0,jsx_runtime.jsx)(_components.td,{children:(0,jsx_runtime.jsx)(_components.code,{children:"upperCase"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:(0,jsx_runtime.jsx)(_components.code,{children:"bool"})}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"✅"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{align:"center",children:"-"}),(0,jsx_runtime.jsx)(_components.td,{children:"Must contain uppercase letters"})]})]})]})]})}const password_input_password_input=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)},disable={table:{disable:!0}},password_input_stories={title:"Components/PasswordInput",component:password_input.Z,parameters:{docs:{description:{component:"Paging is used to navigate med content pages"},page:password_input_password_input}},argTypes:{settingMinLength:disable,settingsUpperCase:disable,settingsDigits:disable,settingsSpecSymbols:disable}},Template=({settingMinLength,settingsUpperCase,settingsDigits,settingsSpecSymbols,settingsDigitsRegexStr,settingsUpperCaseRegexStr,settingsSpecSymbolsRegexStr,tooltipPasswordLength,onChange,onValidateInput,onCopyToClipboard,...args})=>{const[value,setValue]=(0,react.useState)(""),[fakeSettings,setFakeSettings]=(0,react.useState)();(0,react.useEffect)((()=>{setFakeSettings({minLength:settingMinLength,upperCase:settingsUpperCase,digits:settingsDigits,specSymbols:settingsSpecSymbols,digitsRegexStr:settingsDigitsRegexStr,upperCaseRegexStr:settingsUpperCaseRegexStr,specSymbolsRegexStr:settingsSpecSymbolsRegexStr}),setValue("")}),[settingMinLength,settingsUpperCase,settingsDigits,settingsSpecSymbols,settingsDigitsRegexStr,settingsUpperCaseRegexStr,settingsSpecSymbolsRegexStr]);return(0,jsx_runtime.jsxs)("div",{style:{height:"110px",display:"grid",gridGap:"24px"},children:[(0,jsx_runtime.jsx)(text_input.Z,{name:"demoEmailInput",size:"base",isDisabled:args.isDisabled,isReadOnly:!0,scale:!0,value:"demo@gmail.com"}),(0,jsx_runtime.jsx)(password_input.Z,{...args,inputValue:value,onChange:e=>{onChange(e.currentTarget.value),setValue(e.currentTarget.value)},tooltipPasswordLength:`${tooltipPasswordLength} ${settingMinLength}`,passwordSettings:fakeSettings,onValidateInput:e=>{onValidateInput(e)}})]})};Template.displayName="Template";const Default=Template.bind({});Default.args={isDisabled:!1,settingMinLength:6,settingsUpperCase:!0,settingsDigits:!0,settingsSpecSymbols:!0,simpleView:!1,inputName:"demoPasswordInput",emailInputName:"demoEmailInput",isDisableTooltip:!1,isTextTooltipVisible:!1,tooltipPasswordTitle:"Password must contain:",tooltipPasswordLength:"minimum length: ",tooltipPasswordDigits:"digits",tooltipPasswordCapital:"capital letters",tooltipPasswordSpecial:"special characters (!@#$%^&*)",generatorSpecial:"!@#$%^&*",placeholder:"password",maxLength:30,settingsDigitsRegexStr:"(?=.*\\d)",settingsUpperCaseRegexStr:"(?=.*[A-Z])",settingsSpecSymbolsRegexStr:"(?=.*[\\x21-\\x2F\\x3A-\\x40\\x5B-\\x60\\x7B-\\x7E])"},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'({\n  settingMinLength,\n  settingsUpperCase,\n  settingsDigits,\n  settingsSpecSymbols,\n  settingsDigitsRegexStr,\n  settingsUpperCaseRegexStr,\n  settingsSpecSymbolsRegexStr,\n  tooltipPasswordLength,\n  onChange,\n  onValidateInput,\n  onCopyToClipboard,\n  ...args\n}) => {\n  const [value, setValue] = useState("");\n  const [fakeSettings, setFakeSettings] = useState();\n  useEffect(() => {\n    setFakeSettings({\n      minLength: settingMinLength,\n      upperCase: settingsUpperCase,\n      digits: settingsDigits,\n      specSymbols: settingsSpecSymbols,\n      digitsRegexStr: settingsDigitsRegexStr,\n      upperCaseRegexStr: settingsUpperCaseRegexStr,\n      specSymbolsRegexStr: settingsSpecSymbolsRegexStr\n    });\n    setValue("");\n  }, [settingMinLength, settingsUpperCase, settingsDigits, settingsSpecSymbols, settingsDigitsRegexStr, settingsUpperCaseRegexStr, settingsSpecSymbolsRegexStr]);\n  const onChangeHandler = e => {\n    onChange(e.currentTarget.value);\n    setValue(e.currentTarget.value);\n  };\n  const onValidateInputHandler = e => {\n    onValidateInput(e);\n  };\n  return <div style={{\n    height: "110px",\n    display: "grid",\n    gridGap: "24px"\n  }}>\r\n      <TextInput name="demoEmailInput" size="base" isDisabled={args.isDisabled} isReadOnly={true} scale={true} value="demo@gmail.com" />\r\n\r\n      <PasswordInput {...args} inputValue={value} onChange={onChangeHandler} tooltipPasswordLength={`${tooltipPasswordLength} ${settingMinLength}`} passwordSettings={fakeSettings} onValidateInput={onValidateInputHandler} />\r\n    </div>;\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]}}]);