"use strict";(self.webpackChunk_docspace_components=self.webpackChunk_docspace_components||[]).push([[8924],{"./cron/Cron.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Cron_stories});var react=__webpack_require__("../../node_modules/react/index.js"),es=__webpack_require__("../../node_modules/react-i18next/dist/es/index.js"),esm=__webpack_require__("../../node_modules/i18next-http-backend/esm/index.js");const newInstance=__webpack_require__("../../node_modules/i18next/dist/esm/i18next.js").Z.createInstance();newInstance.use(esm.Z).use(es.Db).init({load:"currentOnly",ns:["Common"],defaultNS:"Common",backend:{backendOptions:[{loadPath:"../../client/public/locales/{{lng}}/{{ns}}.json"},{loadPath:"../../../public/locales/{{lng}}/{{ns}}.json"}]},lng:"en",fallbackLng:"en",interpolation:{escapeValue:!1}});const i18n=newInstance;var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const i18nextStoryDecorator=Story=>(0,jsx_runtime.jsx)(react.Suspense,{fallback:(0,jsx_runtime.jsx)("div",{children:"loading translations..."}),children:(0,jsx_runtime.jsx)(es.a3,{i18n,children:(0,jsx_runtime.jsx)(Story,{})})});i18nextStoryDecorator.displayName="i18nextStoryDecorator",i18nextStoryDecorator.__docgenInfo={description:"",methods:[],displayName:"i18nextStoryDecorator"};const decorators_i18nextStoryDecorator=i18nextStoryDecorator;var combobox=__webpack_require__("./combobox/index.js");const getLabel=(period,t)=>{switch(period){case"Year":return t("EveryYear");case"Month":return t("EveryMonth");case"Week":return t("EveryWeek");case"Day":return t("EveryDay");case"Hour":return t("EveryHour");default:return""}};function Period({period="Hour",setPeriod,t}){const options=(0,react.useMemo)((()=>(t=>[{key:"Year",label:getLabel("Year",t)},{key:"Month",label:getLabel("Month",t)},{key:"Week",label:getLabel("Week",t)},{key:"Day",label:getLabel("Day",t)},{key:"Hour",label:getLabel("Hour",t)}])(t)),[t]),selectedOption=(0,react.useMemo)((()=>({key:period,label:getLabel(period,t)})),[period,t]);return(0,jsx_runtime.jsx)(combobox.Z,{scaledOptions:!0,size:"content",scaled:!1,noBorder:!1,options,showDisabledItems:!0,onSelect:arg=>{setPeriod(arg.key)},selectedOption})}Period.displayName="Period";const Period_Period=(0,react.memo)(Period);try{Period.displayName="Period",Period.__docgenInfo={description:"",displayName:"Period",props:{t:{defaultValue:null,description:"",name:"t",required:!0,type:{name:'TranslationFunction<"translation", undefined>'}},period:{defaultValue:{value:"Hour"},description:"",name:"period",required:!1,type:{name:"enum",value:[{value:'"Year"'},{value:'"Month"'},{value:'"Week"'},{value:'"Day"'},{value:'"Hour"'},{value:'"Minute"'}]}},setPeriod:{defaultValue:null,description:"",name:"setPeriod",required:!0,type:{name:"Dispatch<SetStateAction<PeriodType>>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Field/Period/Period.tsx#Period"]={docgenInfo:Period.__docgenInfo,name:"Period",path:"cron/Field/Period/Period.tsx#Period"})}catch(__react_docgen_typescript_loader_error){}var moment=__webpack_require__("../../node_modules/moment/moment.js"),moment_default=__webpack_require__.n(moment);const parseNumber=value=>{if("string"==typeof value){const str=value.trim();if(/^\d+$/.test(str)){const num=Number(str);if(!isNaN(num)&&isFinite(num))return num}}else if("number"==typeof value&&!isNaN(value)&&isFinite(value)&&value===Math.floor(value))return value},assertValidArray=arr=>{if(void 0===arr||!Array.isArray(arr)||5!==arr.length||arr.some((element=>!Array.isArray(element))))throw new Error("Invalid cron array")},range=(start,end)=>{const array=[];for(let i=start;i<=end;i++)array.push(i);return array},sort=array=>[...array].sort(((a,b)=>a-b)),dedup=array=>{const result=[];return array.forEach((i=>{result.indexOf(i)<0&&result.push(i)})),result},fixFormatValue=(value,local)=>value.toLocaleString(local,{minimumIntegerDigits:2,minimumFractionDigits:0,maximumFractionDigits:0,useGrouping:!1}),arrayToStringPart=(arr,unit,options)=>{const values=sort(dedup(fixSunday(arr.map((value=>{const parsedValue=parseNumber(value);if(void 0===parsedValue)throw getError(`Invalid value "${value}"`,unit);return parsedValue})),unit)));return assertInRange(values,unit),util_toString(values,unit,options)},util_toString=(values,unit,options)=>{let retval="";if(isFull(values,unit)||0===values.length)retval=options.outputHashes?"H":"*";else{const step=getStep(values);if(step&&isInterval(values,step))if(isFullInterval(values,unit,step))retval=options.outputHashes?`H/${step}`:`*/${step}`;else{const min=values[0],max=values[values.length-1],range=formatValue(min,unit,options)+"-"+formatValue(max,unit,options);retval=options.outputHashes?`H(${range})/${step}`:`${range}/${step}`}else retval=(values=>{const retval=[];let startPart;return values.forEach((function(value,index,self){value!==self[index+1]-1?void 0!==startPart?(retval.push([startPart,value]),startPart=void 0):retval.push([value]):void 0===startPart&&(startPart=value)})),retval})(values).map((range=>1===range.length?formatValue(range[0],unit,options):formatValue(range[0],unit,options)+"-"+formatValue(range[1],unit,options))).join(",")}return retval},formatValue=(value,unit,options)=>(options.outputWeekdayNames&&"weekday"===unit.name||options.outputMonthNames&&"month"===unit.name)&&unit.alt?unit.alt[value-unit.min]:value,getError=(error,unit)=>new Error(`${error} for ${unit.name}`),parseRange=(rangeString,context,unit)=>{const subparts=rangeString.split("-");if(1===subparts.length){const value=parseNumber(subparts[0]);if(void 0===value)throw getError(`Invalid value "${context}"`,unit);return[value]}if(2===subparts.length){const minValue=parseNumber(subparts[0]),maxValue=parseNumber(subparts[1]);if(void 0===minValue||void 0===maxValue)throw getError(`Invalid value "${context}"`,unit);if(maxValue<minValue)throw getError(`Max range is less than min range in "${rangeString}"`,unit);return range(minValue,maxValue)}throw getError(`Invalid value "${rangeString}"`,unit)},parseStep=(step,unit)=>{if(void 0!==step){const parsedStep=parseNumber(step);if(void 0===parsedStep)throw getError(`Invalid interval step value "${step}"`,unit);return parsedStep}return 0},applyInterval=(values,step)=>{if(step){const minVal=values[0];values=values.filter((value=>value%step==minVal%step||value===minVal))}return values},fixSunday=(values,unit)=>("weekday"===unit.name&&(values=values.map((value=>7===value?0:value))),values),replaceAlternatives=(str,unit)=>{if(unit.alt){str=str.toUpperCase();for(let i=0;i<unit.alt.length;i++)str=str.replace(unit.alt[i],String(i+unit.min))}return str},assertInRange=(values,unit)=>{const first=values[0],last=values[values.length-1];if(first<unit.min)throw getError(`Value "${first}" out of range`,unit);if(last>unit.max)throw getError(`Value "${last}" out of range`,unit)},isInterval=(values,step)=>{for(let i=1;i<values.length;i++){const prev=values[i-1];if(values[i]-prev!==step)return!1}return!0},isFullInterval=(values,unit,step)=>{const min=values[0],max=values[values.length-1],haveAllValues=values.length===(max-min)/step+1;return!!(min===unit.min&&max+step>unit.max&&haveAllValues)},getStep=values=>{if(values.length>2){const step=values[1]-values[0];if(step>1)return step}return 0},isFull=(values,unit)=>values.length===unit.max-unit.min+1,shiftMonth=(arr,date)=>{for(;-1===arr[3].indexOf(date.month);)date=date.plus({months:1}).startOf("month");return date},shiftDay=(arr,date)=>{const currentMonth=date.month;for(;-1===arr[2].indexOf(date.day)||-1===arr[4].indexOf(7===date.weekday?0:date.weekday);)if(currentMonth!==(date=date.plus({days:1}).startOf("day")).month)return[date,!0];return[date,!1]},shiftHour=(arr,date)=>{const currentDay=date.day;for(;-1===arr[1].indexOf(date.hour);)if(currentDay!==(date=date.plus({hours:1}).startOf("hour")).day)return[date,!0];return[date,!1]},shiftMinute=(arr,date)=>{const currentHour=date.hour;for(;-1===arr[0].indexOf(date.minute);)if(currentHour!==(date=date.plus({minutes:1}).startOf("minute")).hour)return[date,!0];return[date,!1]},getUnits=t=>Object.freeze([{name:"minute",min:0,max:59,total:60},{name:"hour",min:0,max:23,total:24},{name:"day",min:1,max:31,total:31},{name:"month",min:1,max:12,total:12,alt:["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"],altWithTranslation:t?[t("JAN"),t("FEB"),t("MAR"),t("APR"),t("MAY"),t("JUN"),t("JUL"),t("AUG"),t("SEP"),t("OCT"),t("NOV"),t("DEC")]:void 0,fullLabel:["January","February","March","April","May","June","July","August","September","October","November","December"]},{name:"weekday",min:0,max:6,total:7,alt:["SUN","MON","TUE","WED","THU","FRI","SAT"],altWithTranslation:t?[t("Common:SUN"),t("Common:MON"),t("Common:TUE"),t("Common:WED"),t("Common:THU"),t("Common:FRI"),t("Common:SAT")]:void 0}]);var styled_components_browser_esm=__webpack_require__("../../node_modules/styled-components/dist/styled-components.browser.esm.js");const SelectWrapper=styled_components_browser_esm.ZP.div.withConfig({displayName:"Selectstyled__SelectWrapper",componentId:"sc-1q68xjf-0"})(["display:flex;align-items:center;gap:8px;& > span{font-size:13px;}"]);function Select({unit,value,placeholder,setValue,prefix,dropDownMaxHeight}){const{i18n}=(0,es.$G)(),options=(0,react.useMemo)((()=>{const{altWithTranslation}=unit;let firstDayOfWeek=0;const isWeek="weekday"===unit.name;return isWeek&&(firstDayOfWeek=moment_default().localeData(i18n.language).firstDayOfWeek()),altWithTranslation?altWithTranslation.map(((item,index,array)=>{const number=0===unit.min?index:index+1,key=isWeek?(number+firstDayOfWeek)%unit.total:number;return{key,label:isWeek?array[key]:item}})):[...Array(unit.total)].map(((_,index)=>{const number=0===unit.min?index:index+1;return{key:number,label:fixFormatValue(number,i18n.language)}}))}),[i18n.language]),selectedOption=(0,react.useMemo)((()=>{const isEmpty=0===value.length;return{key:isEmpty?-1:value[0],label:isEmpty?placeholder:unit.altWithTranslation?unit.altWithTranslation[value[0]-unit.min]:fixFormatValue(value[0],i18n.language)}}),[value,placeholder,i18n.language]);return(0,jsx_runtime.jsxs)(SelectWrapper,{children:[(0,jsx_runtime.jsx)("span",{children:prefix}),(0,jsx_runtime.jsx)(combobox.Z,{scaledOptions:!0,size:"content",scaled:!1,noBorder:!1,showDisabledItems:!0,options,onSelect:option=>{setValue([option.key])},onClickSelectedItem:option=>{option.key===value[0]&&setValue([])},selectedOption,dropDownMaxHeight})]})}Select.displayName="Select";const Select_Select=Select;try{Select.displayName="Select",Select.__docgenInfo={description:"",displayName:"Select",props:{unit:{defaultValue:null,description:"",name:"unit",required:!0,type:{name:"Unit"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"number[]"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!0,type:{name:"string"}},setValue:{defaultValue:null,description:"",name:"setValue",required:!0,type:{name:"Dispatch<SetStateAction<number[]>>"}},prefix:{defaultValue:null,description:"",name:"prefix",required:!0,type:{name:"string"}},dropDownMaxHeight:{defaultValue:null,description:"",name:"dropDownMaxHeight",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Select/Select.tsx#Select"]={docgenInfo:Select.__docgenInfo,name:"Select",path:"cron/Select/Select.tsx#Select"})}catch(__react_docgen_typescript_loader_error){}function Months({months,unit,setMonths,t}){return(0,jsx_runtime.jsx)(Select_Select,{value:months,setValue:setMonths,placeholder:t("EveryMonth"),unit,prefix:t("In"),dropDownMaxHeight:300})}Months.displayName="Months";const Months_Months=(0,react.memo)(Months);try{Months.displayName="Months",Months.__docgenInfo={description:"",displayName:"Months",props:{months:{defaultValue:null,description:"",name:"months",required:!0,type:{name:"number[]"}},setMonths:{defaultValue:null,description:"",name:"setMonths",required:!0,type:{name:"Dispatch<SetStateAction<number[]>>"}},t:{defaultValue:null,description:"",name:"t",required:!0,type:{name:'TranslationFunction<"translation", undefined>'}},unit:{defaultValue:null,description:"",name:"unit",required:!0,type:{name:"Unit"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Field/Months/Months.tsx#Months"]={docgenInfo:Months.__docgenInfo,name:"Months",path:"cron/Field/Months/Months.tsx#Months"})}catch(__react_docgen_typescript_loader_error){}function MonthDays({weekDays,monthDays,unit,setMonthDays,t}){const placeholder=(0,react.useMemo)((()=>{const isEmpty=0===weekDays.length;return t(isEmpty?"EveryDayOfTheMonth":"DayOfTheMonth")}),[weekDays.length]);return(0,jsx_runtime.jsx)(Select_Select,{value:monthDays,setValue:setMonthDays,placeholder,unit,prefix:t("On"),dropDownMaxHeight:300})}MonthDays.displayName="MonthDays";const MonthDay_MonthDays=(0,react.memo)(MonthDays);try{MonthDays.displayName="MonthDays",MonthDays.__docgenInfo={description:"",displayName:"MonthDays",props:{monthDays:{defaultValue:null,description:"",name:"monthDays",required:!0,type:{name:"number[]"}},weekDays:{defaultValue:null,description:"",name:"weekDays",required:!0,type:{name:"number[]"}},setMonthDays:{defaultValue:null,description:"",name:"setMonthDays",required:!0,type:{name:"Dispatch<SetStateAction<number[]>>"}},t:{defaultValue:null,description:"",name:"t",required:!0,type:{name:'TranslationFunction<"translation", undefined>'}},unit:{defaultValue:null,description:"",name:"unit",required:!0,type:{name:"Unit"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Field/MonthDay/MonthDays.tsx#MonthDays"]={docgenInfo:MonthDays.__docgenInfo,name:"MonthDays",path:"cron/Field/MonthDay/MonthDays.tsx#MonthDays"})}catch(__react_docgen_typescript_loader_error){}function WeekDays({setWeekDays,unit,isWeek,weekDays,monthDays,period,t}){const prefix=t("Week"===period?"On":"And"),placeholder=(0,react.useMemo)((()=>{const isEmpty=0===monthDays.length;return t(isEmpty||isWeek?"EveryDayOfTheWeek":"DayOfTheWeek")}),[monthDays.length,isWeek]);return(0,jsx_runtime.jsx)(Select_Select,{value:weekDays,setValue:setWeekDays,placeholder,unit,prefix,dropDownMaxHeight:300})}WeekDays.displayName="WeekDays";const WeekDays_WeekDays=(0,react.memo)(WeekDays);try{WeekDays.displayName="WeekDays",WeekDays.__docgenInfo={description:"",displayName:"WeekDays",props:{isWeek:{defaultValue:null,description:"",name:"isWeek",required:!0,type:{name:"boolean"}},period:{defaultValue:null,description:"",name:"period",required:!0,type:{name:"enum",value:[{value:'"Year"'},{value:'"Month"'},{value:'"Week"'},{value:'"Day"'},{value:'"Hour"'},{value:'"Minute"'}]}},weekDays:{defaultValue:null,description:"",name:"weekDays",required:!0,type:{name:"number[]"}},monthDays:{defaultValue:null,description:"",name:"monthDays",required:!0,type:{name:"number[]"}},setWeekDays:{defaultValue:null,description:"",name:"setWeekDays",required:!0,type:{name:"Dispatch<SetStateAction<number[]>>"}},t:{defaultValue:null,description:"",name:"t",required:!0,type:{name:'TranslationFunction<"translation", undefined>'}},unit:{defaultValue:null,description:"",name:"unit",required:!0,type:{name:"Unit"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Field/WeekDays/WeekDays.tsx#WeekDays"]={docgenInfo:WeekDays.__docgenInfo,name:"WeekDays",path:"cron/Field/WeekDays/WeekDays.tsx#WeekDays"})}catch(__react_docgen_typescript_loader_error){}function Hours({hours,setHours,unit,t}){return(0,jsx_runtime.jsx)(Select_Select,{value:hours,setValue:setHours,placeholder:t("EveryHour"),unit,prefix:t("At"),dropDownMaxHeight:300})}Hours.displayName="Hours";const Hours_Hours=(0,react.memo)(Hours);try{Hours.displayName="Hours",Hours.__docgenInfo={description:"",displayName:"Hours",props:{hours:{defaultValue:null,description:"",name:"hours",required:!0,type:{name:"number[]"}},setHours:{defaultValue:null,description:"",name:"setHours",required:!0,type:{name:"Dispatch<SetStateAction<number[]>>"}},t:{defaultValue:null,description:"",name:"t",required:!0,type:{name:'TranslationFunction<"translation", undefined>'}},unit:{defaultValue:null,description:"",name:"unit",required:!0,type:{name:"Unit"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Field/Hours/Hours.tsx#Hours"]={docgenInfo:Hours.__docgenInfo,name:"Hours",path:"cron/Field/Hours/Hours.tsx#Hours"})}catch(__react_docgen_typescript_loader_error){}function Minutes({minutes,setMinutes,period,t,unit}){const prefix="Hour"===period?t("At"):":";return(0,jsx_runtime.jsx)(Select_Select,{value:minutes,setValue:setMinutes,placeholder:t("EveryMinute"),unit,prefix,dropDownMaxHeight:300})}Minutes.displayName="Minutes";const Minutes_Minutes=(0,react.memo)(Minutes);try{Minutes.displayName="Minutes",Minutes.__docgenInfo={description:"",displayName:"Minutes",props:{minutes:{defaultValue:null,description:"",name:"minutes",required:!0,type:{name:"number[]"}},setMinutes:{defaultValue:null,description:"",name:"setMinutes",required:!0,type:{name:"Dispatch<SetStateAction<number[]>>"}},period:{defaultValue:null,description:"",name:"period",required:!0,type:{name:"enum",value:[{value:'"Year"'},{value:'"Month"'},{value:'"Week"'},{value:'"Day"'},{value:'"Hour"'},{value:'"Minute"'}]}},t:{defaultValue:null,description:"",name:"t",required:!0,type:{name:'TranslationFunction<"translation", undefined>'}},unit:{defaultValue:null,description:"",name:"unit",required:!0,type:{name:"Unit"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Field/Minutes/Minutes.tsx#Minutes"]={docgenInfo:Minutes.__docgenInfo,name:"Minutes",path:"cron/Field/Minutes/Minutes.tsx#Minutes"})}catch(__react_docgen_typescript_loader_error){}var luxon=__webpack_require__("../../node_modules/luxon/src/luxon.js");const defaultOptions={outputHashes:!1,outputMonthNames:!1,outputWeekdayNames:!1},units=getUnits(),stringToArray=(str,full=!1)=>{if("string"!=typeof str)throw new Error("Invalid cron string");const parts=str.replace(/\s+/g," ").trim().split(" ");if(5!==parts.length)throw new Error("Invalid cron string format");return parts.map(((str,idx)=>((str,unit,full=!1)=>{if(("*"===str||"*/1"===str)&&!full)return[];const values=sort(dedup(fixSunday((arrays=replaceAlternatives(str,unit).split(",").map((value=>{const valueParts=value.split("/");if(valueParts.length>2)throw getError(`Invalid value "${str}"`,unit);let parsedValues;const left=valueParts[0],right=valueParts[1];parsedValues="*"===left?range(unit.min,unit.max):parseRange(left,str,unit);const step=parseStep(right,unit);return applyInterval(parsedValues,step)})),[].concat.apply([],arrays)),unit)));var arrays;return assertInRange(values,unit),values})(str,units[idx],full)))};function getCronStringFromValues(period,months,monthDays,weekDays,hours,minutes){return function arrayToString(arr,options){return assertValidArray(arr),arr.map(((part,idx)=>arrayToStringPart(part,units[idx],{...defaultOptions,...options}))).join(" ")}(["Minute"!==period&&minutes?minutes:[],"Minute"!==period&&"Hour"!==period&&hours?hours:[],"Year"!==period&&"Month"!==period||!monthDays?[]:monthDays,"Year"===period&&months?months:[],"Year"!==period&&"Month"!==period&&"Week"!==period||!weekDays?[]:weekDays])}const getNextSynchronization=(cronString,timezone)=>{try{const cron=stringToArray(cronString,!0);assertValidArray(cron);let date=luxon.ou.now();if(timezone&&(date=date.setZone(timezone)),!date.isValid)throw new Error("Invalid timezone provided");return date.second>0&&(date=date.plus({minute:1})),((arr,date)=>{let monthChanged,dayChanged,hourChanged,retry=24;for(;--retry&&(date=shiftMonth(arr,date),[date,monthChanged]=shiftDay(arr,date),monthChanged||([date,dayChanged]=shiftHour(arr,date),dayChanged||([date,hourChanged]=shiftMinute(arr,date),hourChanged))););if(!retry)throw new Error("Unable to find execution time for schedule");return date.set({second:0,millisecond:0})})(cron,date)}catch(error){console.log(error)}},CronWrapper=styled_components_browser_esm.ZP.div.withConfig({displayName:"Cronstyled__CronWrapper",componentId:"sc-1v7acoo-0"})(["display:flex;flex-wrap:wrap;align-items:center;gap:8px;"]),Suffix=styled_components_browser_esm.ZP.span.withConfig({displayName:"Cronstyled__Suffix",componentId:"sc-1v7acoo-1"})(["font-size:13px;line-height:20px;font-weight:400;"]);function Cron({value="* * * * *",setValue,onError}){const{t}=(0,es.$G)("Common"),valueRef=(0,react.useRef)(value),[period,setPeriod]=(0,react.useState)("Hour"),[hours,setHours]=(0,react.useState)([]),[months,setMonths]=(0,react.useState)([]),[minutes,setMinutes]=(0,react.useState)([]),[weekDays,setWeekDays]=(0,react.useState)([]),[monthDays,setMonthDays]=(0,react.useState)([]);(0,react.useEffect)((()=>{onError?.(void 0),valueRef.current!==value&&init()}),[value]),(0,react.useEffect)((()=>{try{const cornString=getCronStringFromValues(period,months,monthDays,weekDays,hours,minutes);setValue(cornString),valueRef.current=cornString,onError?.(void 0)}catch(error){error instanceof Error&&onError?.(error)}}),[period,hours,months,minutes,weekDays,monthDays]),(0,react.useEffect)((()=>{init()}),[]);const init=()=>{try{const cronParts=stringToArray(value),period=(cronParts=>cronParts[3].length>0?"Year":cronParts[2].length>0?"Month":cronParts[4].length>0?"Week":cronParts[1].length>0?"Day":(cronParts[0].length,"Hour"))(cronParts),[minutes,hours,monthDays,months,weekDays]=cronParts;setMinutes(minutes),setHours(hours),setMonthDays(monthDays),setMonths(months),setWeekDays(weekDays),setPeriod(period)}catch(error){console.log(error),error instanceof Error&&onError?.(error)}},{isYear,isMonth,isWeek,isHour,isMinute}=(0,react.useMemo)((()=>({isYear:"Year"===period,isMonth:"Month"===period,isWeek:"Week"===period,isHour:"Hour"===period,isMinute:"Minute"==period})),[period]),units=(0,react.useMemo)((()=>getUnits(t)),[t]);return(0,jsx_runtime.jsxs)(CronWrapper,{children:[(0,jsx_runtime.jsx)(Period_Period,{t,period,setPeriod}),isYear&&(0,jsx_runtime.jsx)(Months_Months,{unit:units[3],t,months,setMonths}),(isYear||isMonth)&&(0,jsx_runtime.jsx)(MonthDay_MonthDays,{t,unit:units[2],weekDays,monthDays,setMonthDays}),(isYear||isMonth||isWeek)&&(0,jsx_runtime.jsx)(WeekDays_WeekDays,{t,unit:units[4],isWeek,period,monthDays,weekDays,setWeekDays}),!isHour&&!isMinute&&(0,jsx_runtime.jsx)(Hours_Hours,{unit:units[1],t,hours,setHours}),!isMinute&&(0,jsx_runtime.jsx)(Minutes_Minutes,{t,unit:units[0],period,minutes,setMinutes}),(0,jsx_runtime.jsx)(Suffix,{children:t("Common:UTC")})]})}Cron.displayName="Cron";const cron_Cron=Cron;try{Cron.displayName="Cron",Cron.__docgenInfo={description:"",displayName:"Cron",props:{value:{defaultValue:{value:"* * * * *"},description:"",name:"value",required:!1,type:{name:"string"}},setValue:{defaultValue:null,description:"",name:"setValue",required:!0,type:{name:"(value: string) => void"}},onError:{defaultValue:null,description:"",name:"onError",required:!1,type:{name:"(error?: Error) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["cron/Cron.tsx#Cron"]={docgenInfo:Cron.__docgenInfo,name:"Cron",path:"cron/Cron.tsx#Cron"})}catch(__react_docgen_typescript_loader_error){}var text_input=__webpack_require__("./text-input/text-input.js"),button_0=__webpack_require__("./button/index.js");const Cron_stories={title:"Components/Cron",component:cron_Cron,argTypes:{value:{description:"Cron value"},setValue:{description:"Set the cron value, similar to onChange."},onError:{description:"Triggered when the cron component detects an error with the value."},locale:{control:"select",options:["az","ar-SA","zh-cn","cs","nl","en","fi","fr","de","de-ch","el","it","ja","ko","lv","pl","pt","pt-br","ru","sk","sl","es","tr","uk","vi"]}},decorators:[decorators_i18nextStoryDecorator]},Default={args:{locale:"en"},render:({value:defaultValue,locale})=>{const{i18n}=(0,es.$G)(),[input,setInput]=(0,react.useState)(defaultValue),[cron,setCron]=(0,react.useState)(defaultValue),[error,setError]=(0,react.useState)();(0,react.useEffect)((()=>{i18n.changeLanguage(locale)}),[locale]);const setValue=cron=>{setInput(cron),setCron(cron)};(0,react.useEffect)((()=>{setValue(defaultValue)}),[defaultValue]);const date=(0,react.useMemo)((()=>cron&&getNextSynchronization(cron)),[cron]);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)("div",{style:{display:"flex",gap:"6px",alignItems:"baseline",maxWidth:"max-content",marginBottom:"8px"},children:[(0,jsx_runtime.jsx)(text_input.Z,{value:input,onChange:e=>setInput(e.target.value),hasError:!!error,scale:!1}),(0,jsx_runtime.jsx)(button_0.Z,{size:"small",primary:!0,label:"Set value",onClick:()=>{setCron(input)}})]}),(0,jsx_runtime.jsx)(cron_Cron,{value:cron,setValue,onError:error=>{setError(error)}}),(0,jsx_runtime.jsxs)("p",{children:[(0,jsx_runtime.jsx)("strong",{children:"Cron string: "})," ",cron]}),(0,jsx_runtime.jsxs)("p",{children:[(0,jsx_runtime.jsx)("strong",{children:"Error message: "})," ",error?.message??"undefined"]}),date&&(0,jsx_runtime.jsxs)("p",{children:[(0,jsx_runtime.jsx)("strong",{children:"Next synchronization: "})," ",date.toUTC().setLocale(locale??"en").toFormat("DDDD tt")]})]})}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    locale: "en"\n  },\n  render: ({\n    value: defaultValue,\n    locale\n  }) => {\n    const {\n      i18n\n    } = useTranslation();\n    const [input, setInput] = useState(defaultValue);\n    const [cron, setCron] = useState(defaultValue);\n    const [error, setError] = useState<Error>();\n    useEffect(() => {\n      i18n.changeLanguage(locale);\n    }, [locale]);\n    const onError = (error?: Error) => {\n      setError(error);\n    };\n    const setValue = (cron?: string) => {\n      setInput(cron);\n      setCron(cron);\n    };\n    const onClick = () => {\n      setCron(input);\n    };\n    useEffect(() => {\n      setValue(defaultValue);\n    }, [defaultValue]);\n    const date = useMemo(() => cron && getNextSynchronization(cron), [cron]);\n    return <div>\r\n        <div style={{\n        display: "flex",\n        gap: "6px",\n        alignItems: "baseline",\n        maxWidth: "max-content",\n        marginBottom: "8px"\n      }}>\r\n          <TextInput value={input} onChange={e => setInput(e.target.value)} hasError={!!error} scale={false} />\r\n          {/*@ts-ignore*/}\r\n          <Button size="small" primary label={"Set value"} onClick={onClick} />\r\n        </div>\r\n\r\n        <Cron value={cron} setValue={setValue} onError={onError} />\r\n        <p>\r\n          <strong>Cron string: </strong> {cron}\r\n        </p>\r\n        <p>\r\n          <strong>Error message: </strong> {error?.message ?? "undefined"}\r\n        </p>\r\n        {date && <p>\r\n            <strong>Next synchronization: </strong>{" "}\r\n            {date.toUTC().setLocale(locale ?? "en").toFormat("DDDD tt")}\r\n          </p>}\r\n      </div>;\n  }\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]}}]);