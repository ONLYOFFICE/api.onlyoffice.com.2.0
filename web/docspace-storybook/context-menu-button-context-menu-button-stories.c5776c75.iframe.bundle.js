"use strict";(self.webpackChunk_docspace_components=self.webpackChunk_docspace_components||[]).push([[4884],{"./context-menu-button/context-menu-button.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),PUBLIC_DIR_images_vertical_dots_react_svg_url__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../public/images/vertical-dots.react.svg?url"),___WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./context-menu-button/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ContextMenuButton",component:___WEBPACK_IMPORTED_MODULE_2__.Z,argTypes:{clickColor:{control:"color"},color:{control:"color"},getData:{required:!0},hoverColor:{control:"color"},onClickLabel:{action:"onClickLabel",table:{disable:!0}},onMouseLeave:{action:"onMouseLeave"},onMouseEnter:{action:"onMouseEnter"},onMouseOver:{action:"onMouseOver"},onMouseOut:{action:"onMouseOut"}},parameters:{docs:{description:{component:"ContextMenuButton is used for displaying context menu actions on a list's item"}}}},Template=args=>{const[isOpen,setIsOpen]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(args.opened);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{style:{height:"100px"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.Z,{...args,opened:isOpen,getData:()=>[{key:"key1",label:"label1",onClick:()=>args.onClickLabel("label1")},{key:"key2",label:"label2",onClick:()=>args.onClickLabel("label2")}],isDisabled:!1,onClick:()=>{setIsOpen(!isOpen),args.onClickLabel()}})})};Template.displayName="Template";const Default=Template.bind({});Default.args={title:"Actions",displayType:"dropdown",iconName:PUBLIC_DIR_images_vertical_dots_react_svg_url__WEBPACK_IMPORTED_MODULE_1__,size:16,directionX:"left",isDisabled:!1},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'args => {\n  const [isOpen, setIsOpen] = useState(args.opened);\n  const getData = () => {\n    return [{\n      key: "key1",\n      label: "label1",\n      onClick: () => args.onClickLabel("label1")\n    }, {\n      key: "key2",\n      label: "label2",\n      onClick: () => args.onClickLabel("label2")\n    }];\n  };\n  const onClickHandler = () => {\n    setIsOpen(!isOpen);\n    args.onClickLabel();\n  };\n  return <div style={{\n    height: "100px"\n  }}>\r\n      <ContextMenuButton {...args} opened={isOpen} getData={getData} isDisabled={false} onClick={onClickHandler} />\r\n    </div>;\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]}}]);