{"version":3,"file":"4371.41dcb077.iframe.bundle.js","mappings":";;AA4CA;;;;;AAMA;;;;;;AASA;;;;;AAKA;;;;AAOA;AASA;;;;;;AAYA;;AAEA;AAIA;;;;;AAKA;;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;AAuBA;AAOA;AAGA;AACA;AACA;;;AAQA;AAIA;AAMA;;;;AAmBA;;;;AAIA;AAIA;;AAQA;;AAEA;;AAKA;AAQA;AAIA;;AAIA;;;AAWA;;AAKA;;;;AAOA;;AAOA;;AAGA;;AAQA;;;AAOA;;;;AAIA;;;;AAMA;;;;;;;AASA;AAIA;;AAOA;;AAMA;;;AAGA;;;;AAMA;;;;;;;AAOA;;AAEA;AAUA;;AAKA;;AAGA;;;;;AASA;;AAKA;;;;AAMA;;;;;;;AASA;AAEA;AAQA;AACA;;AAIA;;;AAGA;;AAEA;;AAIA;;;AAUA;AAQA;AACA;;AAIA;;AAEA;AACA;;AAEA;AACA;;;;;AAOA;;;;;;;;;AAmBA;;;;;;;;;;AAYA;AAIA;;AAEA;AACA;;AAKA;;;;AASA;;;;AAIA;;;;AAOA;AAEA;AAEA;AAEA;AAEA;AAGA;AAGA;;;AAKA;AAOA;;;AAKA;AAGA;AACA;AAEA;;;AAwBA;AAPA;;;AAGA","sources":["webpack://@docspace/shared/./components/combobox/Combobox.styled.ts"],"sourcesContent":["// (c) Copyright Ascensio System SIA 2009-2024\r\n//\r\n// This program is a free software product.\r\n// You can redistribute it and/or modify it under the terms\r\n// of the GNU Affero General Public License (AGPL) version 3 as published by the Free Software\r\n// Foundation. In accordance with Section 7(a) of the GNU AGPL its Section 15 shall be amended\r\n// to the effect that Ascensio System SIA expressly excludes the warranty of non-infringement of\r\n// any third-party rights.\r\n//\r\n// This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty\r\n// of MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE. For details, see\r\n// the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html\r\n//\r\n// You can contact Ascensio System SIA at Lubanas st. 125a-25, Riga, Latvia, EU, LV-1021.\r\n//\r\n// The  interactive user interfaces in modified source and object code versions of the Program must\r\n// display Appropriate Legal Notices, as required under Section 5 of the GNU AGPL version 3.\r\n//\r\n// Pursuant to Section 7(b) of the License you must retain the original Product logo when\r\n// distributing the program. Pursuant to Section 7(e) we decline to grant you any rights under\r\n// trademark law for use of our trademarks.\r\n//\r\n// All the Product's GUI elements, including illustrations and icon sets, as well as technical writing\r\n// content are licensed under the terms of the Creative Commons Attribution-ShareAlike 4.0\r\n// International. See the License terms at http://creativecommons.org/licenses/by-sa/4.0/legalcode\r\n\r\nimport styled, { css } from \"styled-components\";\r\n\r\nimport TriangleDownIcon from \"PUBLIC_DIR/images/triangle.down.react.svg\";\r\n\r\nimport { Base, TColorScheme, TTheme } from \"../../themes\";\r\nimport { mobile, NoUserSelect, commonIconsStyles } from \"../../utils\";\r\n\r\nimport { Loader } from \"../loader\";\r\n\r\nimport { ComboBoxSize } from \"./Combobox.enums\";\r\nimport { TCombobox } from \"./Combobox.types\";\r\n\r\n// for ComboButton with plusBadge (StyledGroupsCombobox)\r\nconst alternativeComboButtonStyles = css<{\r\n  isOpen?: boolean;\r\n  plusBadgeValue?: number;\r\n}>`\r\n  .combo-button-label {\r\n    color: ${({ theme, isOpen }) =>\r\n      theme.comboBox.label[isOpen ? \"selectedColor\" : \"alternativeColor\"]};\r\n  }\r\n\r\n  .combo-buttons_expander-icon {\r\n    path {\r\n      fill: ${({ theme, isOpen }) =>\r\n        theme.comboBox.plusBadge[\r\n          isOpen ? \"selectedBgColor\" : \"bgColor\"\r\n        ]} !important;\r\n    }\r\n  }\r\n\r\n  :hover {\r\n    .combo-button-label {\r\n      color: ${({ theme }) => theme.comboBox.label.selectedColor};\r\n    }\r\n\r\n    .combo-buttons_expander-icon {\r\n      path {\r\n        fill: ${({ theme }) =>\r\n          theme.comboBox.plusBadge.selectedBgColor} !important;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledComboBox = styled.div<{\r\n  scaled?: boolean;\r\n  size?: ComboBoxSize;\r\n  withoutPadding?: boolean;\r\n  isOpen?: boolean;\r\n  noBorder?: boolean;\r\n  advancedOptions?: React.ReactNode;\r\n  disableMobileView?: boolean;\r\n}>`\r\n  width: ${(props) =>\r\n    (props.scaled && \"100%\") ||\r\n    (props.size === ComboBoxSize.base && props.theme.comboBox.width.base) ||\r\n    (props.size === ComboBoxSize.middle && props.theme.comboBox.width.middle) ||\r\n    (props.size === ComboBoxSize.big && props.theme.comboBox.width.big) ||\r\n    (props.size === ComboBoxSize.huge && props.theme.comboBox.width.huge) ||\r\n    (props.size === ComboBoxSize.content && \"fit-content\")};\r\n\r\n  position: relative;\r\n  outline: 0;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n  padding: ${(props) => (props.withoutPadding ? \"0\" : \"4px 0\")};\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    props.noBorder &&\r\n    css`\r\n      background: ${props.theme.comboBox.background};\r\n      border-radius: 3px;\r\n    `}\r\n\r\n  .dropdown-container {\r\n    padding: ${(props) =>\r\n      props.advancedOptions && props.theme.comboBox.padding};\r\n\r\n    ${(props) =>\r\n      !props.disableMobileView &&\r\n      css`\r\n        @media ${mobile} {\r\n          position: fixed;\r\n          top: unset !important;\r\n          right: 0;\r\n          left: 0;\r\n          bottom: 0 !important;\r\n          width: 100%;\r\n          width: -moz-available;\r\n          width: -webkit-fill-available;\r\n          width: fill-available;\r\n          border: none;\r\n          border-radius: 6px 6px 0px 0px;\r\n        }\r\n      `}\r\n  }\r\n\r\n  -webkit-user-select: none;\r\n\r\n  .backdrop-active {\r\n    z-index: 210;\r\n  }\r\n`;\r\n\r\nStyledComboBox.defaultProps = {\r\n  theme: Base,\r\n};\r\n\r\nexport { StyledComboBox };\r\n\r\nconst StyledTriangleDownIcon = styled(TriangleDownIcon)`\r\n  ${commonIconsStyles}\r\n`;\r\n\r\nconst modernViewButton = css<{ isOpen?: boolean; isLoading?: boolean }>`\r\n  height: ${(props) => props.theme.comboBox.button.heightModernView};\r\n  background: ${(props) =>\r\n    props.isOpen || props.isLoading\r\n      ? props.theme.comboBox.button.focusBackgroundModernView\r\n      : props.theme.comboBox.button.backgroundModernView};\r\n\r\n  border: none !important;\r\n`;\r\n\r\nconst hoverModernViewButton = css<{\r\n  isOpen?: boolean;\r\n  isLoading?: boolean;\r\n}>`\r\n  background: ${(props) =>\r\n    props.isOpen || props.isLoading\r\n      ? props.theme.comboBox.button.focusBackgroundModernView\r\n      : props.theme.comboBox.button.hoverBackgroundModernView} !important;\r\n`;\r\n\r\nconst StyledComboButton = styled.div<{\r\n  type?: TCombobox;\r\n  noBorder?: boolean;\r\n  scaled?: boolean;\r\n  size?: ComboBoxSize;\r\n  displayArrow?: boolean;\r\n  isDisabled?: boolean;\r\n  isOpen?: boolean;\r\n  modernView?: boolean;\r\n  fillIcon?: boolean;\r\n  containOptions?: number;\r\n  withAdvancedOptions?: boolean;\r\n  isLoading?: boolean;\r\n  isSelected?: boolean;\r\n  plusBadgeValue?: number;\r\n}>`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  gap: ${(props) => props.type && \"4px\"};\r\n  justify-content: center;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n  height: ${(props) =>\r\n    props.noBorder\r\n      ? props.theme.comboBox.button.height\r\n      : props.theme.comboBox.button.heightWithBorder};\r\n  width: ${(props) =>\r\n    (props.scaled && \"100%\") ||\r\n    (props.size === ComboBoxSize.base && props.theme.comboBox.width.base) ||\r\n    (props.size === ComboBoxSize.middle && props.theme.comboBox.width.middle) ||\r\n    (props.size === ComboBoxSize.big && props.theme.comboBox.width.big) ||\r\n    (props.size === ComboBoxSize.huge && props.theme.comboBox.width.huge) ||\r\n    (props.size === ComboBoxSize.content && \"fit-content\")};\r\n\r\n  ${NoUserSelect};\r\n\r\n  padding-left: ${(props) =>\r\n    props.size === \"content\"\r\n      ? props.theme.comboBox.button.paddingLeft\r\n      : props.theme.comboBox.button.selectPaddingLeft};\r\n\r\n  padding-right: ${(props) =>\r\n    props.size === \"content\"\r\n      ? props.displayArrow\r\n        ? props.theme.comboBox.button.paddingRight\r\n        : props.theme.comboBox.button.paddingRightNoArrow\r\n      : props.displayArrow\r\n        ? props.theme.comboBox.button.selectPaddingRight\r\n        : props.theme.comboBox.button.selectPaddingRightNoArrow};\r\n  ${(props) => {\r\n    return (\r\n      props.theme.interfaceDirection === \"rtl\" &&\r\n      css`\r\n        padding-right: ${props.size === \"content\"\r\n          ? props.theme.comboBox.button.paddingLeft\r\n          : props.theme.comboBox.button.selectPaddingLeft};\r\n\r\n        padding-left: ${props.size === \"content\"\r\n          ? props.displayArrow\r\n            ? props.theme.comboBox.button.paddingRight\r\n            : props.theme.comboBox.button.paddingRightNoArrow\r\n          : props.displayArrow\r\n            ? props.theme.comboBox.button.selectPaddingRight\r\n            : props.theme.comboBox.button.selectPaddingRightNoArrow};\r\n      `\r\n    );\r\n  }}\r\n\r\n  background: ${(props) =>\r\n    !props.noBorder\r\n      ? props.theme.comboBox.button.background\r\n      : props.theme.comboBox.button.backgroundWithBorder};\r\n\r\n  color: ${(props) =>\r\n    props.isDisabled\r\n      ? props.theme.comboBox.button.disabledColor\r\n      : props.theme.comboBox.button.color};\r\n\r\n  box-sizing: border-box;\r\n\r\n  ${(props) =>\r\n    !props.noBorder &&\r\n    `\r\n    border:  ${props.theme.comboBox.button.border};\r\n    border-radius: ${props.theme.comboBox.button.borderRadius};\r\n  `}\r\n\r\n  border-color: ${(props) =>\r\n    props.isOpen && props.theme.comboBox.button.openBorderColor};\r\n\r\n  ${(props) =>\r\n    props.isDisabled &&\r\n    !props.noBorder &&\r\n    `\r\n    border-color: ${props.theme.comboBox.button.disabledBorderColor};\r\n    background: ${props.theme.comboBox.button.disabledBackground};\r\n  `}\r\n\r\n  ${(props) =>\r\n    !props.noBorder &&\r\n    `\r\n    height: 32px;\r\n  `}\r\n\r\n  \r\n  ${(props) => props.modernView && modernViewButton}\r\n\r\n\r\n  \r\n  ${(props) =>\r\n    props.fillIcon &&\r\n    css`\r\n      .optionalBlock {\r\n        svg {\r\n          path {\r\n            fill: ${props.isOpen\r\n              ? props.theme.iconButton.hoverColor\r\n              : props.theme.iconButton.color};\r\n          }\r\n        }\r\n      }\r\n    `};\r\n\r\n  :hover {\r\n    border-color: ${(props) =>\r\n      props.isOpen\r\n        ? props.theme.comboBox.button.hoverBorderColorOpen\r\n        : props.theme.comboBox.button.hoverBorderColor};\r\n    cursor: ${(props) =>\r\n      props.isDisabled ||\r\n      (!props.containOptions && !props.withAdvancedOptions) ||\r\n      props.isLoading\r\n        ? \"default\"\r\n        : \"pointer\"};\r\n\r\n    ${(props) =>\r\n      props.isDisabled &&\r\n      `\r\n      border-color: ${props.theme.comboBox.button.hoverDisabledBorderColor};\r\n    `}\r\n\r\n    ${(props) => props.modernView && !props.isDisabled && hoverModernViewButton}\r\n\r\n      \r\n      ${({ fillIcon }) =>\r\n      fillIcon &&\r\n      css`\r\n        .optionalBlock {\r\n          svg {\r\n            path {\r\n              fill: ${(props) => props.theme.iconButton.hoverColor};\r\n            }\r\n          }\r\n        }\r\n      `}\r\n  }\r\n  .combo-button-label {\r\n    visibility: ${(props) => (props.isLoading ? \"hidden\" : \"visible\")};\r\n\r\n    ${({ theme, plusBadgeValue, noBorder }) => {\r\n      const property = `margin-${theme.interfaceDirection === \"rtl\" ? \"left\" : \"right\"}`;\r\n      const value = plusBadgeValue\r\n        ? 0\r\n        : noBorder\r\n          ? theme.comboBox.label.marginRight\r\n          : theme.comboBox.label.marginRightWithBorder;\r\n\r\n      return `${property}: ${value};`;\r\n    }}\r\n    color: ${(props) =>\r\n      props.isDisabled\r\n        ? props.theme.comboBox.label.disabledColor\r\n        : props.theme.comboBox.label.selectedColor};\r\n\r\n    max-width: ${(props) =>\r\n      props.scaled ? \"100%\" : props.theme.comboBox.label.maxWidth};\r\n\r\n    ${(props) =>\r\n      props.noBorder &&\r\n      `\r\n      line-height: ${props.theme.comboBox.label.lineHeightWithoutBorder};\r\n    `}\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    border-color: ${(props) =>\r\n      props.isOpen\r\n        ? props.theme.comboBox.button.hoverBorderColorOpen\r\n        : props.theme.comboBox.button.hoverBorderColor};\r\n\r\n    ${(props) =>\r\n      props.fillIcon &&\r\n      css`\r\n        .optionalBlock {\r\n          svg {\r\n            path {\r\n              fill: ${props.isOpen\r\n                ? props.theme.iconButton.hoverColor\r\n                : props.theme.iconButton.color};\r\n            }\r\n          }\r\n        }\r\n      `}\r\n  }\r\n\r\n  ${({ plusBadgeValue }) => plusBadgeValue && alternativeComboButtonStyles}\r\n`;\r\nStyledComboButton.defaultProps = { theme: Base };\r\n\r\nconst StyledOptionalItem = styled.div<{\r\n  isLoading?: boolean;\r\n  fillIcon?: boolean;\r\n  defaultOption?: boolean;\r\n  isDisabled?: boolean;\r\n}>`\r\n  margin-right: ${(props) => props.theme.comboBox.childrenButton.marginRight};\r\n  ${(props) =>\r\n    props.theme.interfaceDirection === \"rtl\" &&\r\n    css`\r\n      margin-right: 0;\r\n      margin-left: ${props.theme.comboBox.childrenButton.marginRight};\r\n    `}\r\n\r\n  visibility: ${(props) => (props.isLoading ? \"hidden\" : \"visible\")};\r\n\r\n  ${(props) =>\r\n    props.fillIcon &&\r\n    css`\r\n      path {\r\n        fill: ${props.defaultOption\r\n          ? props.isDisabled\r\n            ? props.theme.comboBox.childrenButton.defaultDisabledColor\r\n            : props.theme.comboBox.childrenButton.defaultColor\r\n          : props.isDisabled\r\n            ? props.theme.comboBox.childrenButton.disabledColor\r\n            : props.theme.comboBox.childrenButton.color};\r\n      }\r\n    `}\r\n`;\r\nStyledOptionalItem.defaultProps = { theme: Base };\r\n\r\nconst StyledIcon = styled.div<{\r\n  isLoading?: boolean;\r\n  defaultOption?: boolean;\r\n  isDisabled?: boolean;\r\n  isSelected?: boolean;\r\n}>`\r\n  margin-right: ${(props) => props.theme.comboBox.childrenButton.marginRight};\r\n  ${(props) =>\r\n    props.theme.interfaceDirection === \"rtl\" &&\r\n    css`\r\n      margin-right: 0;\r\n      margin-left: ${props.theme.comboBox.childrenButton.marginRight};\r\n    `}\r\n  width: ${(props) => props.theme.comboBox.childrenButton.width};\r\n  height: ${(props) => props.theme.comboBox.childrenButton.height};\r\n\r\n  visibility: ${(props) => (props.isLoading ? \"hidden\" : \"visible\")};\r\n  ${(props) =>\r\n    props.theme.interfaceDirection === \"rtl\" &&\r\n    css`\r\n      transform: scaleX(-1);\r\n    `}\r\n  .combo-button_selected-icon {\r\n    path {\r\n      fill: ${(props) =>\r\n        props.defaultOption\r\n          ? props.isDisabled\r\n            ? props.theme.comboBox.childrenButton.defaultDisabledColor\r\n            : props.theme.comboBox.childrenButton.defaultColor\r\n          : props.isDisabled\r\n            ? props.theme.comboBox.childrenButton.disabledColor\r\n            : props.isSelected\r\n              ? props.theme.comboBox.childrenButton.selectedColor\r\n              : props.theme.comboBox.childrenButton.color};\r\n    }\r\n  }\r\n  svg {\r\n    &:not(:root) {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  }\r\n`;\r\nStyledIcon.defaultProps = { theme: Base };\r\n\r\nconst StyledPlusBadge = styled.div<{ isOpen?: boolean }>`\r\n  height: 12px;\r\n  padding: 0px 3px;\r\n  gap: 10px;\r\n  border-radius: 12px;\r\n\r\n  line-height: 12px;\r\n  font-size: 9px;\r\n  font-weight: 800;\r\n\r\n  background-color: ${({ theme, isOpen }) =>\r\n    isOpen\r\n      ? theme.comboBox.plusBadge.selectedBgColor\r\n      : theme.comboBox.plusBadge.bgColor};\r\n  color: ${({ theme }) => theme.comboBox.plusBadge.color};\r\n\r\n  ${StyledComboButton}:hover & {\r\n    background-color: ${({ theme }) =>\r\n      theme.comboBox.plusBadge.selectedBgColor};\r\n  }\r\n`;\r\n\r\nconst StyledArrowIcon = styled.div<{\r\n  isLoading?: boolean;\r\n  displayArrow?: boolean;\r\n  isOpen?: boolean;\r\n  isDisabled?: boolean;\r\n}>`\r\n  display: flex;\r\n  align-self: center;\r\n\r\n  visibility: ${(props) => (props.isLoading ? \"hidden\" : \"visible\")};\r\n\r\n  .combo-buttons_expander-icon {\r\n    path {\r\n      fill: ${(props) =>\r\n        props.isDisabled\r\n          ? props.theme.comboBox.label.disabledColor\r\n          : props.theme.comboBox.label.selectedColor};\r\n    }\r\n  }\r\n\r\n  width: ${(props) =>\r\n    props.displayArrow ? props.theme.comboBox.arrow.width : \"0px\"};\r\n  flex: ${(props) =>\r\n    props.displayArrow ? props.theme.comboBox.arrow.flex : \"0px\"};\r\n  margin-right: ${(props) =>\r\n    props.displayArrow ? props.theme.comboBox.arrow.marginRight : \"0px\"};\r\n  margin-left: ${(props) =>\r\n    props.displayArrow ? props.theme.comboBox.arrow.marginLeft : \"0px\"};\r\n  ${(props) =>\r\n    props.theme.interfaceDirection === \"rtl\" &&\r\n    css`\r\n      margin-right: ${props.displayArrow\r\n        ? props.theme.comboBox.arrow.marginLeft\r\n        : \"0px\"};\r\n      margin-left: ${props.displayArrow\r\n        ? props.theme.comboBox.arrow.marginRight\r\n        : \"0px\"};\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    `\r\n    transform: scale(1, -1);\r\n  `}\r\n`;\r\n\r\nStyledArrowIcon.defaultProps = { theme: Base };\r\n\r\nconst StyledLoader = styled(Loader)<{ displaySize?: ComboBoxSize }>`\r\n  position: absolute;\r\n\r\n  ${(props) =>\r\n    props.theme.interfaceDirection === \"rtl\"\r\n      ? css`\r\n          margin-right: ${props.displaySize === \"content\" ? \"-16px\" : \"-8px\"};\r\n        `\r\n      : css`\r\n          margin-left: ${props.displaySize === \"content\" ? \"-16px\" : \"-8px\"};\r\n        `}\r\n  margin-top: 2px;\r\n`;\r\n\r\nconst getDefaultStyles = ({\r\n  $currentColorScheme,\r\n  isOpen,\r\n  theme,\r\n}: {\r\n  $currentColorScheme?: TColorScheme;\r\n  theme: TTheme;\r\n  isOpen?: boolean;\r\n}) =>\r\n  $currentColorScheme &&\r\n  theme.isBase &&\r\n  css`\r\n    border-color: ${isOpen && $currentColorScheme?.main?.accent};\r\n\r\n    :focus {\r\n      border-color: ${isOpen && $currentColorScheme?.main?.accent};\r\n    }\r\n  `;\r\n\r\nconst StyledThemeComboButton = styled(StyledComboButton)(getDefaultStyles);\r\n\r\nexport {\r\n  StyledArrowIcon,\r\n  StyledPlusBadge,\r\n  StyledIcon,\r\n  StyledOptionalItem,\r\n  StyledComboButton,\r\n  StyledTriangleDownIcon,\r\n  StyledLoader,\r\n  StyledThemeComboButton,\r\n};\r\n"],"names":[],"sourceRoot":""}