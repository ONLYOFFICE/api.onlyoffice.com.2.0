<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASC.Files</name>
    </assembly>
    <members>
        <member name="T:ASC.Files.Api.ApiControllerBase">
            <summary>
            Provides access to documents.
            </summary>
            <name>files</name>
        </member>
        <member name="M:ASC.Files.Api.EditorControllerThirdparty.OpenEditThirdPartyAsync(System.String)">
            <summary>
            Opens a third-party file with the ID specified in the request for editing.
            </summary>
            <short>
            Open a third-party file
            </short>
            <category>Third-party integration</category>
            <param type="System.String, System" name="fileId">File ID</param>
            <returns>Configuration parameters: document config, document type, editor config, editor type, editor URL, token, platform type</returns>
            <path>api/2.0/files/file/app-{fileId}/openedit</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>false</requiresAuthorization>
        </member>
        <member name="M:ASC.Files.Api.EditorController`1.SaveEditingFromFormAsync(`0,ASC.Files.Core.ApiModels.RequestDto.SaveEditingRequestDto)">
            <summary>
            Saves edits to a file with the ID specified in the request.
            </summary>
            <short>Save file edits</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SaveEditingRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for saving file edits: <![CDATA[
            <ul>
                <li><b>FileExtension</b> (string) - file extension,</li>
                <li><b>DownloadUri</b> (string) - URI to download a file,</li>
                <li><b>File</b> (IFormFile) - request file stream,</li>
                <li><b>Doc</b> (string) - shared token,</li>
                <li><b>Forcesave</b> (bool) - specifies whether to force save a file or not.</li>
            </ul>
            ]]></param>
            <category>Files</category>
            <returns>Saved file parameters: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}/saveediting</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.EditorController`1.StartEditAsync(`0,ASC.Files.Core.ApiModels.RequestDto.StartEditRequestDto)">
            <summary>
            Informs about opening a file with the ID specified in the request for editing, locking it from being deleted or moved (this method is called by the mobile editors).
            </summary>
            <short>Start file editing</short>
            <param type="System.Int32, System" method="url" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.StartEditRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for starting file editing: <![CDATA[
            <ul>
                <li><b>EditingAlone</b> (bool) - specifies whether to share a file with other users for editing or not,</li>
                <li><b>Doc</b> (string) - shared token.</li>
            </ul>
            ]]></param>
            <category>Files</category>
            <returns>File key for Document Service</returns>
            <path>api/2.0/files/file/{fileId}/startedit</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.EditorController`1.TrackEditFileAsync(`0,System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Tracks file changes when editing.
            </summary>
            <short>Track file editing</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Guid, System" name="tabId">Tab ID</param>
            <param type="System.String, System" name="docKeyForTrack">Document key for tracking</param>
            <param type="System.String, System" name="doc">Shared token</param>
            <param type="System.Boolean, System" name="isFinish">Specifies whether to finish file tracking or not</param>
            <category>Files</category>
            <returns>File changes</returns>
            <path>api/2.0/files/file/{fileId}/trackeditfile</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.EditorController`1.OpenEditAsync(`0,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the initialization configuration of a file to open it in the editor.
            </summary>
            <short>Open a file</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Int32, System" name="version">File version</param>
            <param type="System.String, System" name="doc">Shared token</param>
            <param type="System.Boolean, System" name="view">Specifies if a document will be opened for viewing only or not</param>
            <category>Files</category>
            <returns>Configuration parameters: document config, document type, editor config, editor type, editor URL, token, platform type, file parameters</returns>
            <path>api/2.0/files/file/{fileId}/openedit</path>
            <requiresAuthorization>false</requiresAuthorization>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.EditorController`1.GetPresignedUriAsync(`0)">
            <summary>
            Returns a link to download a file with the ID specified in the request asynchronously.
            </summary>
            <short>Get file download link asynchronously</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <returns>File download link</returns>
            <path>api/2.0/files/file/{fileId}/presigned</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.EditorController`1.SharedUsers(`0)">
            <summary>
            Returns a list of users with their access rights to the file with the ID specified in the request.
            </summary>
            <short>Get shared users</short>
            <category>Sharing</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <returns>List of users with their access rights to the file: user information, user email, user ID, has access to the file or not, user display name</returns>
            <path>api/2.0/files/file/{fileId}/sharedusers</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.EditorController.CheckDocServiceUrl(ASC.Files.Core.ApiModels.RequestDto.CheckDocServiceUrlRequestDto)">
            <summary>
            Checks the document service location.
            </summary>
            <short>Check the document service URL</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CheckDocServiceUrlRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for checking the document service location: <![CDATA[
            <ul>
                <li><b>DocServiceUrl</b> (string) - the Document Server address,</li>
                <li><b>DocServiceUrlInternal</b> (string) - the Document Server address in the local private network,</li>
                <li><b>DocServiceUrlPortal</b> (string) - the Community Server address.</li>
            </ul>
            ]]></param>
            <category>Settings</category>
            <returns>Document service information: the Document Server address, the Document Server address in the local private network, the Community Server address</returns>
            <path>api/2.0/files/docservice</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.EditorController.GetDocServiceUrlAsync(System.Boolean)">
            <summary>
            Returns the address of the connected editors.
            </summary>
            <short>Get the document service URL</short>
            <category>Settings</category>
            <param type="System.Boolean, System" name="version">Specifies the editor version or not</param>
            <returns>The document service URL with the editor version specified</returns>
            <path>api/2.0/files/docservice</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>false</requiresAuthorization>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerThirdparty.GetFileInfoThirdPartyAsync(System.String)">
            <summary>
            Returns the detailed information about a third-party file with the ID specified in the request.
            </summary>
            <short>Get the third-party file information</short>
            <param type="System.String, System" name="fileId">File ID</param>
            <category>Files</category>
            <returns>File entry information: title, access rights, shared or not, creation time, author, time of the last file update, root folder type, a user who updated a file, provider is specified or not, provider key, provider ID</returns>
            <path>api/2.0/files/file/app-{fileId}</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.ChangeHistoryAsync(`0,ASC.Files.Core.ApiModels.RequestDto.ChangeHistoryRequestDto)">
            <summary>
            Changes the version history of a file with the ID specified in the request.
            </summary>
            <short>Change version history</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.ChangeHistoryRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for changing version history: <![CDATA[
            <ul>
                <li><b>Version</b> (integer) - file version,</li>
                <li><b>ContinueVersion</b> (bool) - marks as a version or revision.</li>
            </ul>
            ]]></param>
            <category>Files</category>
            <returns>Updated information about file versions: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}/history</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.CheckConversionAsync(`0,System.Boolean)">
            <summary>
            Checks the conversion status of a file with the ID specified in the request.
            </summary>
            <short>Get conversion status</short>
            <category>Operations</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Boolean, System" name="start">Specifies if a conversion operation is started or not</param>
            <returns>Conversion result: operation ID, operation result, operation progress, source file, resulting file, error, processed or not</returns>
            <path>api/2.0/files/file/{fileId}/checkconversion</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.GetPresignedUri(`0)">
            <summary>
            Returns a link to download a file with the ID specified in the request.
            </summary>
            <short>Get file download link</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <returns>File download link</returns>
            <path>api/2.0/files/file/{fileId}/presigneduri</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.CopyFileAs(`0,ASC.Files.Core.ApiModels.RequestDto.CopyAsRequestDto{System.Text.Json.JsonElement})">
            <summary>
            Copies (and converts if possible) an existing file to the specified folder.
            </summary>
            <short>Copy a file</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CopyAsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for copying a file: <![CDATA[
            <ul>
                <li><b>DestTitle</b> (string) - destination file title,</li>
                <li><b>DestFolderId</b> (T) - destination folder ID,</li>
                <li><b>Password</b> (string) - password.</li>
            </ul>
            ]]></param>
            <returns>Copied file entry information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}/copyas</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.CreateFileAsync(`0,ASC.Files.Core.ApiModels.RequestDto.CreateFileRequestDto{System.Text.Json.JsonElement})">
            <summary>
            Creates a new file in the specified folder with the title specified in the request.
            </summary>
            <short>Create a file</short>
            <category>Files</category>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>TemplateId</b> (T) - template file ID,</li>
                <li><b>EnableExternalExt</b> (bool) - specifies whether to allow the creation of external extension files or not,</li>
                <li><b>FormId</b> (integer) - form ID.</li>
            </ul>
            ]]></param>
            <remarks>If a file extension is different from DOCX/XLSX/PPTX and refers to one of the known text, spreadsheet, or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not specified or is unknown, the DOCX extension will be added to the file title.</remarks>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/{folderId}/file</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.CreateHtmlFileAsync(`0,ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto)">
            <summary>
            Creates an HTML (.html) file in the selected folder with the title and contents specified in the request.
            </summary>
            <short>Create an HTML file</short>
            <category>Files</category>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating an HTML file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>Content</b> (string) - file contents.</li>
            </ul>
            ]]></param>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/{folderId}/html</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.CreateTextFileAsync(`0,ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto)">
            <summary>
            Creates a text (.txt) file in the selected folder with the title and contents specified in the request.
            </summary>
            <short>Create a txt file</short>
            <category>Files</category>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a text file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>Content</b> (string) - file contents.</li>
            </ul>
            ]]></param>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/{folderId}/text</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.DeleteFile(`0,ASC.Files.Core.ApiModels.RequestDto.DeleteRequestDto)">
            <summary>
            Deletes a file with the ID specified in the request.
            </summary>
            <short>Delete a file</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DeleteRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for deleting a file: <![CDATA[
            <ul>
                <li><b>DeleteAfter</b> (bool) - specifies whether to delete a file after the editing session is finished or not,</li>
                <li><b>Immediately</b> (bool) - specifies whether to move a file to the "Trash" folder or delete it immediately.</li>
            </ul>
            ]]></param>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/file/{fileId}</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.GetEditDiffUrlAsync(`0,System.Int32,System.String)">
            <summary>
            Returns a URL to the changes of a file version specified in the request.
            </summary>
            <short>Get changes URL</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Int32, System" name="version">File version</param>
            <param type="System.String, System" name="doc">Shared token</param>
            <returns>File version history data: URL to the file changes, key, previous version, token, file URL, file version, file type</returns>
            <path>api/2.0/files/file/{fileId}/edit/diff</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>false</requiresAuthorization>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.GetEditHistoryAsync(`0,System.String)">
            <summary>
            Returns the version history of a file with the ID specified in the request.
            </summary>
            <short>Get version history</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.String, System" name="doc">Shared token</param>
            <returns>Version history data: file ID, key, file version, version group, a user who updated a file, creation time, history changes in the string format, list of history changes, server version</returns>
            <path>api/2.0/files/file/{fileId}/edit/history</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>false</requiresAuthorization>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.GetFileInfoAsync(`0,System.Int32)">
            <summary>
            Returns the detailed information about a file with the ID specified in the request.
            </summary>
            <short>Get the file information</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Int32, System" name="version">File version</param>
            <category>Files</category>
            <returns>File information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.GetFileVersionInfoAsync(`0)">
            <summary>
            Returns the detailed information about all the available file versions with the ID specified in the request.
            </summary>
            <short>Get file versions</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <returns>Information about file versions: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}/history</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.LockFileAsync(`0,ASC.Files.Core.ApiModels.RequestDto.LockFileRequestDto)">
            <summary>
            Locks a file with the ID specified in the request.
            </summary>
            <short>Lock a file</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.LockFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for locking a file: LockFile (bool) - specifies whether to lock a file or not</param>
            <returns>Locked file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}/lock</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.RestoreVersionAsync(`0,System.Int32,System.String,System.String)">
            <summary>
            Restores a file version specified in the request.
            </summary>
            <short>Restore a file version</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Int32, System" name="version">File version</param>
            <param type="System.String, System" name="url">File version URL</param>
            <param type="System.String, System" name="doc">Shared token</param>
            <returns>Version history data: file ID, key, file version, version group, a user who updated a file, creation time, history changes in the string format, list of history changes, server version</returns>
            <path>api/2.0/files/file/{fileId}/restoreversion</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>false</requiresAuthorization>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.StartConversion(`0,ASC.Files.Core.ApiModels.RequestDto.CheckConversionRequestDto{`0})">
            <summary>
            Starts a conversion operation of a file with the ID specified in the request.
            </summary>
            <short>Start file conversion</short>
            <category>Operations</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CheckConversionRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for starting file conversion: <![CDATA[
            <ul>
                <li><b>FileId</b> (T) - file ID,</li>
                <li><b>Sync</b> (bool) - specifies if the conversion process is synchronous or not,</li>
                <li><b>StartConvert</b> (bool) - specifies whether to start a conversion process or not,</li>
                <li><b>Version</b> (integer) - file version,</li>
                <li><b>Password</b> (string) - password.</li>
            </ul>
            ]]></param>
            <returns>Conversion result: operation ID, operation result, operation progress, source file, resulting file, error, processed or not</returns>
            <path>api/2.0/files/file/{fileId}/checkconversion</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.UpdateCommentAsync(`0,ASC.Files.Core.ApiModels.RequestDto.UpdateCommentRequestDto)">
            <summary>
            Updates a comment in a file with the ID specified in the request.
            </summary>
            <short>Update a comment</short>
            <category>Operations</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.UpdateCommentRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for updating a comment: <![CDATA[
            <ul>
                <li><b>Version</b> (integer) - file version,</li>
                <li><b>Comment</b> (string) - comment text.</li>
            </ul>
            ]]></param>
            <returns>Updated comment</returns>
            <path>api/2.0/files/file/{fileId}/comment</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.UpdateFileAsync(`0,ASC.Files.Core.ApiModels.RequestDto.UpdateFileRequestDto)">
            <summary>
            Updates the information of the selected file with the parameters specified in the request.
            </summary>
            <short>Update a file</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.UpdateFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for updating a file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>LastVersion</b> (integer) - number of the latest file version.</li>
            </ul>
            ]]></param>
            <returns>Updated file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.UpdateFileStreamFromFormAsync(`0,ASC.Files.Core.ApiModels.RequestDto.FileStreamRequestDto)">
            <summary>
            Updates the contents of a file with the ID specified in the request.
            </summary>
            <short>Update file contents</short>
            <category>Files</category>
            <param type="System.Int32, System" method="url" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.FileStreamRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for updating file contents: <![CDATA[
            <ul>
                <li><b>File</b> (IFormFile) - request input stream,</li>
                <li><b>Encrypted</b> (bool) - specifies whether to encrypt a file or not,</li>
                <li><b>Forcesave</b> (bool) - specifies whether to force save a file or not,</li>
                <li><b>FileExtension</b> (string) - file extension.</li>
            </ul>
            ]]></param>
            <path>api/2.0/files/{fileId}/update</path>
            <httpMethod>PUT</httpMethod>
            <returns>Updated file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.GetProperties(`0)">
            <summary>
            Returns file properties of the specified file.
            </summary>
            <short>Get file properties</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <category>Files</category>
            <returns>File properties: collects the data from the filled forms or not, folder ID where a file will be saved, folder path where a file will be saved, new folder title, file name mask</returns>
            <path>api/2.0/files/{fileId}/properties</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesController`1.SetProperties(`0,ASC.Files.Core.ApiModels.RequestDto.EntryPropertiesRequestDto)">
            <summary>
            Saves file properties to the specified file.
            </summary>
            <short>Save file properties to a file</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.EntryPropertiesRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="fileProperties">File properties request parameters: <![CDATA[
            <ul>
                <li><b>FormFilling</b> (FormFillingPropertiesRequestDto) - form filling request parameters:</li>
                <ul>
                    <li><b>CollectFillForm</b> (bool) - specifies if the data will be collected from the filled forms or not,</li>
                    <li><b>ToFolderId</b> (string) - folder ID where a file will be saved,</li>
                    <li><b>ToFolderPath</b> (string) - folder path where a file will be saved,</li>
                    <li><b>CreateFolderTitle</b> (string) - new folder title,</li>
                    <li><b>CreateFileMask</b> (string) - file name mask.</li>
                </ul>
            </ul>
            ]]></param>
            <category>Files</category>
            <returns>File properties: collects the data from the filled forms or not, folder ID where a file will be saved, folder path where a file will be saved, new folder title, file name mask</returns>
            <path>api/2.0/files/{fileId}/properties</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerCommon.CreateFileAsync(ASC.Files.Core.ApiModels.RequestDto.CreateFileRequestDto{System.Text.Json.JsonElement})">
            <summary>
            Creates a new file in the "My documents" section with the title specified in the request.
            </summary>
            <short>Create a file in the "My documents" section</short>
            <category>Files</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>TemplateId</b> (T) - template file ID,</li>
                <li><b>EnableExternalExt</b> (bool) - specifies whether to allow the creation of external extension files or not,</li>
                <li><b>FormId</b> (integer) - form ID.</li>
            </ul>
            ]]></param>
            <remarks>If a file extension is different from DOCX/XLSX/PPTX and refers to one of the known text, spreadsheet, or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not specified or is unknown, the DOCX extension will be added to the file title.</remarks>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@my/file</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerCommon.CreateHtmlFileInCommonAsync(ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto)">
            <summary>
            Creates an HTML (.html) file in the "Common" section with the title and contents specified in the request.
            </summary>
            <short>Create an HTML file in the "Common" section</short>
            <category>Files</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating an HTML file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>Content</b> (string) - file contents.</li>
            </ul>
            ]]></param>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@common/html</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerCommon.CreateHtmlFileInMyAsync(ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto)">
            <summary>
            Creates an HTML (.html) file in the "My documents" section with the title and contents specified in the request.
            </summary>
            <short>Create an HTML file in the "My documents" section</short>
            <category>Files</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating an HTML file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>Content</b> (string) - file contents.</li>
            </ul>
            ]]></param>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@my/html</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerCommon.CreateTextFileInCommonAsync(ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto)">
            <summary>
            Creates a text (.txt) file in the "Common" section with the title and contents specified in the request.
            </summary>
            <short>Create a text file in the "Common" section</short>
            <category>Files</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a text file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>Content</b> (string) - file contents.</li>
            </ul>
            ]]></param>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@common/text</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerCommon.CreateTextFileInMyAsync(ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto)">
            <summary>
            Creates a text (.txt) file in the "My documents" section with the title and contents specified in the request.
            </summary>
            <short>Create a text file in the "My documents" section</short>
            <category>Files</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateTextOrHtmlFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a text file: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - file title,</li>
                <li><b>Content</b> (string) - file contents.</li>
            </ul>
            ]]></param>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@my/text</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerCommon.CreateThumbnailsAsync(ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto)">
            <summary>
            Creates thumbnails for the files with the IDs specified in the request.
            </summary>
            <short>Create thumbnails</short>
            <category>Files</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Base batch request parameters: FileIds (IEnumerable&lt;JsonElement&gt;) - list of file IDs</param>
            <returns>List of file IDs</returns>
            <path>api/2.0/files/thumbnails</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FilesControllerCommon.SetProperties(ASC.Files.Core.ApiModels.RequestDto.BatchEntryPropertiesRequestDto)">
            <summary>
            Saves file properties to the specified files.
            </summary>
            <short>Save file properties to files</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BatchEntryPropertiesRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="batchEntryPropertiesRequestDto">Batch entry properties request parameters: <![CDATA[
            <ul>
                <li><b>FilesId</b> (JsonElement[]) - list of file IDs,</li>
                <li><b>CreateSubfolder</b> (bool) - specifies whether to create a subfolder or not,</li>
                <li><b>FileProperties</b> (EntryPropertiesRequestDto) - file properties:</li>
                <p><b>FormFilling</b> (FormFillingPropertiesRequestDto) - form filling properties:</p>
                <ul>
                    <li><b>CollectFillForm</b> (bool) - specifies if the data will be collected from the filled forms or not,</li>
                    <li><b>ToFolderId</b> (string) - folder ID where a file will be saved,</li>
                    <li><b>ToFolderPath</b> (string) - folder path where a file will be saved,</li>
                    <li><b>CreateFolderTitle</b> (string) - new folder title,</li>
                    <li><b>CreateFileMask</b> (string) - file name mask.</li>
                </ul>
            </ul>
            ]]></param>
            <category>Files</category>
            <returns>List of file properties: collects the data from the filled forms or not, folder ID where a file will be saved, folder path where a file will be saved, new folder title, file name mask</returns>
            <path>api/2.0/files/batch/properties</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.CreateFolderAsync(`0,ASC.Files.Core.ApiModels.RequestDto.CreateFolderRequestDto)">
            <summary>
            Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
            </summary>
            <short>
            Create a folder
            </short>
            <category>Folders</category>
            <param type="System.Int32, System" method="url" name="folderId">Parent folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateFolderRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a folder: Title (string) - folder title</param>
            <returns>New folder parameters: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.DeleteFolder(`0,ASC.Files.Core.ApiModels.RequestDto.DeleteFolderDto)">
            <summary>
            Deletes a folder with the ID specified in the request.
            </summary>
            <short>Delete a folder</short>
            <category>Folders</category>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DeleteFolderDto, ASC.Files.Core.ApiModels.RequestDto" name="model">Request parameters for deleting a folder: <![CDATA[
            <ul>
                <li><b>DeleteAfter</b> (bool) - specifies whether to delete a folder after the editing session is finished or not,</li>
                <li><b>Immediately</b> (bool) - specifies whether to move a folder to the "Trash" folder or delete it immediately.</li>
            </ul>
            ]]></param>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.GetFolderAsync(`0,System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},`0,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the folder with the ID specified in the request.
            </summary>
            <short>
            Get a folder by ID
            </short>
            <category>Folders</category>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Int32, System" name="roomId">Room ID</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <param type="System.Nullable{System.Boolean}, System" name="excludeSubject">Specifies whether to exclude a subject or not</param>
            <returns>Folder contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/{folderId}</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.GetFolderInfoAsync(`0)">
            <summary>
            Returns the detailed information about a folder with the ID specified in the request.
            </summary>
            <short>Get the folder information</short>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <category>Folders</category>
            <returns>Folder parameters: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.GetFolderPathAsync(`0)">
            <summary>
            Returns a path to the folder with the ID specified in the request.
            </summary>
            <short>Get the folder path</short>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <category>Folders</category>
            <returns>List of file entry information: title, access rights, shared or not, creation time, author, time of the last file update, root folder type, a user who updated a file, provider is specified or not, provider key, provider ID</returns>
            <path>api/2.0/files/folder/{folderId}/path</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.GetFoldersAsync(`0)">
            <summary>
            Returns a list of all the subfolders from a folder with the ID specified in the request.
            </summary>
            <short>Get subfolders</short>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <category>Folders</category>
            <returns>List of file entry information: title, access rights, shared or not, creation time, author, time of the last file update, root folder type, a user who updated a file, provider is specified or not, provider key, provider ID</returns>
            <path>api/2.0/files/{folderId}/subfolders</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.GetNewItemsAsync(`0)">
            <summary>
            Returns a list of all the new items from a folder with the ID specified in the request.
            </summary>
            <short>Get new folder items</short>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <category>Folders</category>
            <returns>List of file entry information: title, access rights, shared or not, creation time, author, time of the last file update, root folder type, a user who updated a file, provider is specified or not, provider key, provider ID</returns>
            <path>api/2.0/files/{folderId}/news</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersController`1.RenameFolderAsync(`0,ASC.Files.Core.ApiModels.RequestDto.CreateFolderRequestDto)">
            <summary>
            Renames the selected folder with a new title specified in the request.
            </summary>
            <short>
            Rename a folder
            </short>
            <category>Folders</category>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateFolderRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a folder: Title (string) - new folder title</param>
            <returns>Folder parameters: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetCommonFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the "Common" section.
            </summary>
            <short>Get the "Common" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "Common" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@common</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetFavoritesFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the "Favorites" section.
            </summary>
            <short>Get the "Favorites" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "Favorites" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@favorites</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetMyFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the "My documents" section.
            </summary>
            <short>Get the "My documents" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "My documents" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@my</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetPrivacyFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the "Private Room" section.
            </summary>
            <short>Get the "Private Room" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "Private Room" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@privacy</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetProjectsFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the "In projects" section.
            </summary>
            <short>Get the "In projects" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "In projects" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@projects</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetRecentFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files located in the "Recent" section.
            </summary>
            <short>Get the "Recent" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "Recent" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@recent</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetRootFoldersAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns all the sections matching the parameters specified in the request.
            </summary>
            <short>Get filtered sections</short>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <param type="System.Nullable{System.Boolean}, System" name="withoutTrash">Specifies whether to return the "Trash" section or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withoutAdditionalFolder">Specifies whether to return sections with or without additional folders</param>
            <category>Folders</category>
            <returns>List of section contents with the following parameters: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@root</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetShareFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the "Shared with me" section.
            </summary>
            <short>Get the "Shared with me" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "Shared with me" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@share</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetTemplatesFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files located in the "Templates" section.
            </summary>
            <short>Get the "Templates" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "Templates" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@templates</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.FoldersControllerCommon.GetTrashFolderAsync(System.Nullable{System.Guid},System.Nullable{ASC.Files.Core.FilterType},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the detailed list of files and folders located in the "Trash" section.
            </summary>
            <short>Get the "Trash" section</short>
            <category>Folders</category>
            <param type="System.Nullable{System.Guid}, System" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param type="System.Nullable{ASC.Files.Core.FilterType}, System" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5), ImagesOnly (7), ByUser (8), ByDepartment (9), ArchiveOnly (10), ByExtension (11), MediaOnly (12), FillingFormsRooms (13), EditingRooms (14), ReviewRooms (15), ReadOnlyRooms (16), CustomRooms (17), OFormTemplateOnly (18), OFormOnly (19)">Filter type</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withsubfolders">Specifies whether to return sections with or without subfolders</param>
            <returns>The "Trash" section contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/@trash</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.MasterFormController`1.CheckFillFormDraftAsync(`0,ASC.Files.Core.ApiModels.RequestDto.CheckFillFormDraftRequestDto)">
            <summary>
            Checks if the current file is a form draft which can be filled out.
            </summary>
            <short>Check the form draft</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CheckFillFormDraftRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for checking a form draft: <![CDATA[
            <ul>
                <li><b>Version</b> (integer) - file version,</li>
                <li><b>Doc</b> (string) - shared token,</li>
                <li><b>RequestView</b> (bool) - specifies whether to request a form for viewing or not,</li>
                <li><b>RequestEmbedded</b> (bool) - specifies whether to request an embedded form or not.</li>
            </ul>
            ]]></param>
            <returns>Link to the form</returns>
            <path>api/2.0/files/masterform/{fileId}/checkfillformdraft</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.BulkDownload(ASC.Files.Core.ApiModels.RequestDto.DownloadRequestDto)">
            <summary>
            Starts the download process of files and folders with the IDs specified in the request.
            </summary>
            <short>Bulk download</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DownloadRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for downloading files: <![CDATA[
            <ul>
                <li><b>FileConvertIds</b> (IEnumerable&lt;ItemKeyValuePair&lt;JsonElement, string&gt;&gt;) - list of file IDs which will be converted,</li>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <category>Operations</category>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops/bulkdownload</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.CopyBatchItems(ASC.Files.Core.ApiModels.RequestDto.BatchRequestDto)">
            <summary>
            Copies all the selected files and folders to the folder with the ID specified in the request.
            </summary>
            <short>Copy to a folder</short>
            <category>Operations</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for copying files: <![CDATA[
            <ul>
                <li><b>DestFolderId</b> (JsonElement) - destination folder ID,</li>
                <li><b>ConflictResolveType</b> (FileConflictResolveType) - overwriting behavior: Skip (0), Overwrite (1), or Duplicate (2),</li>
                <li><b>DeleteAfter</b> (bool) - specifies whether to delete a folder after the editing session is finished or not,</li>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops/copy</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.DeleteBatchItems(ASC.Files.Core.ApiModels.RequestDto.DeleteBatchRequestDto)">
            <summary>
            Deletes the files and folders with the IDs specified in the request.
            </summary>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DeleteBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for deleting files: <![CDATA[
            <ul>
                <li><b>DeleteAfter</b> (bool) - specifies whether to delete a file after the editing session is finished or not,</li>
                <li><b>Immediately</b> (bool) - specifies whether to move a file to the "Trash" folder or delete it immediately,</li>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <short>Delete files and folders</short>
            <category>Operations</category>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops/delete</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.EmptyTrashAsync">
            <summary>
            Deletes all the files and folders from the "Trash" folder.
            </summary>
            <short>Empty the "Trash" folder</short>
            <category>Operations</category>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops/emptytrash</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.GetOperationStatuses">
            <summary>
             Returns a list of all the active operations.
            </summary>
            <short>Get active operations</short>
            <category>Operations</category>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.MarkAsRead(ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto)">
            <summary>
            Marks the files and folders with the IDs specified in the request as read.
            </summary>
            <short>Mark as read</short>
            <category>Operations</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Base batch request parameters: <![CDATA[
            <ul>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops/markasread</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.MoveBatchItems(ASC.Files.Core.ApiModels.RequestDto.BatchRequestDto)">
            <summary>
            Moves all the selected files and folders to the folder with the ID specified in the request.
            </summary>
            <short>Move to a folder</short>
            <category>Operations</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for moving files and folders: <![CDATA[
            <ul>
                <li><b>DestFolderId</b> (JsonElement) - destination folder ID,</li>
                <li><b>ConflictResolveType</b> (FileConflictResolveType) - overwriting behavior: Skip (0), Overwrite (1), or Duplicate (2),</li>
                <li><b>DeleteAfter</b> (bool) - specifies whether to delete a folder after the editing session is finished or not,</li>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops/move</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.MoveOrCopyBatchCheckAsync(ASC.Files.Core.ApiModels.RequestDto.BatchRequestDto)">
            <summary>
            Checks a batch of files and folders for conflicts when moving or copying them to the folder with the ID specified in the request.
            </summary>
            <short>Check files and folders for conflicts</short>
            <category>Operations</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for checking files and folders for conflicts: <![CDATA[
            <ul>
                <li><b>DestFolderId</b> (JsonElement) - destination folder ID,</li>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>List of file entry information: title, access rights, shared or not, creation time, author, time of the last file update, root folder type, a user who updated a file, provider is specified or not, provider key, provider ID</returns>
            <path>api/2.0/files/fileops/move</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.OperationController.TerminateTasks">
            <summary>
            Finishes all the active operations.
            </summary>
            <short>Finish active operations</short>
            <category>Operations</category>
            <returns>List of file operations: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/fileops/terminate</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.GenerateSharedLinkAsync(`0,ASC.Files.Core.ApiModels.RequestDto.GenerateSharedLinkRequestDto)">
            <summary>
            Returns an external link to the shared file with the ID specified in the request.
            </summary>
            <short>Get the shared link</short>
            <param type="System.Int32, System" method="url" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.GenerateSharedLinkRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for generating the shared link: Share (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing)</param>
            <category>Sharing</category>
            <returns>Shared file link</returns>
            <path>api/2.0/files/{fileId}/sharedlinkAsync</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.GetFileSecurityInfoAsync(`0)">
            <summary>
            Returns the detailed information about the shared file with the ID specified in the request.
            </summary>
            <short>Get the shared file information</short>
            <category>Sharing</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <returns>List of shared file information: sharing rights, a user who has the access to the specified file, the file is locked by this user or not, this user is an owner of the specified file or not, this user can edit the access to the specified file or not</returns>
            <path>api/2.0/files/file/{fileId}/share</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.GetFolderSecurityInfoAsync(`0)">
            <summary>
            Returns the detailed information about the shared folder with the ID specified in the request.
            </summary>
            <short>Get the shared folder information</short>
            <param type="System.Int32, System" method="url" name="folderId">Folder ID</param>
            <category>Sharing</category>
            <returns>List of shared folder information: sharing rights, a user who has the access to the specified folder, the folder is locked by this user or not, this user is an owner of the specified folder or not, this user can edit the access to the specified folder or not</returns>
            <path>api/2.0/files/folder/{folderId}/share</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.SetAceLinkAsync(`0,ASC.Files.Core.ApiModels.RequestDto.GenerateSharedLinkRequestDto)">
            <summary>
            Sets the access status for the external link to the file with the ID specified in the request.
            </summary>
            <short>Set the link access status</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.GenerateSharedLinkRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for generating the sharing link: Share (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing)</param>
            <category>Sharing</category>
            <returns>Boolean value: true if the file is successfully shared</returns>
            <path>api/2.0/files/{fileId}/setacelink</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.SetFileSecurityInfoAsync(`0,ASC.Files.Core.ApiModels.RequestDto.SecurityInfoRequestDto)">
            <summary>
            Sets the sharing settings to a file with the ID specified in the request.
            </summary>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SecurityInfoRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Security information request parameters: <![CDATA[
            <ul>
                <li><b>Share</b> (IEnumerable&lt;FileShareParams&gt;) - collection of sharing parameters:</li>
                <ul>
                    <li><b>ShareTo</b> (Guid) - ID of the user with whom we want to share a file,</li>
                    <li><b>Email</b> (string) - user email address,</li>
                    <li><b>Access</b> (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing).</li>
                </ul>
                <li><b>Notify</b> (bool) - notifies users about the shared file or not,</li>
                <li><b>SharingMessage</b> (string) - message to send when notifying about the shared file.</li>
            </ul>
            ]]></param>
            <short>Share a file</short>
            <category>Sharing</category>
            <returns>List of shared file information: sharing rights, a user who has the access to the specified file, the file is locked by this user or not, this user is an owner of the specified file or not, this user can edit the access to the specified file or not</returns>
            <path>api/2.0/files/file/{fileId}/share</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.SetFolderSecurityInfoAsync(`0,ASC.Files.Core.ApiModels.RequestDto.SecurityInfoRequestDto)">
            <summary>
            Sets the sharing settings to a folder with the ID specified in the request.
            </summary>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SecurityInfoRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Security information request parameters: <![CDATA[
            <ul>
                <li><b>Share</b> (IEnumerable&lt;FileShareParams&gt;) - collection of sharing parameters:</li>
                <ul>
                    <li><b>ShareTo</b> (Guid) - ID of the user with whom we want to share a folder,</li>
                    <li><b>Email</b> (string) - user email address,</li>
                    <li><b>Access</b> (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing).</li>
                </ul>
                <li><b>Notify</b> (bool) - notifies users about the shared folder or not,</li>
                <li><b>SharingMessage</b> (string) - message to send when notifying about the shared folder.</li>
            </ul>
            ]]></param>
            <short>Share a folder</short>
            <category>Sharing</category>
            <returns>List of shared folder information: sharing rights, a user who has the access to the specified folder, the folder is locked by this user or not, this user is an owner of the specified folder or not, this user can edit the access to the specified folder or not</returns>
            <path>api/2.0/files/folder/{folderId}/share</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.GetEncryptionAccess(`0)">
            <summary>
            Returns the encryption keys to access a file with the ID specified in the request.
            </summary>
            <short>Get file encryption keys</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <category>Sharing</category>
            <returns>List of encryption key pairs: encrypted private key, public key, user ID</returns>
            <path>api/2.0/files/file/{fileId}/publickeys</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryController`1.SendEditorNotify(`0,ASC.Web.Files.Services.WCFService.MentionMessageWrapper)">
            <summary>
            Sends a message to the users who are mentioned in the file with the ID specified in the request.
            </summary>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="ASC.Web.Files.Services.WCFService.MentionMessageWrapper, ASC.Web.Files.Services.WCFService" name="mentionMessage">Mention message request parameters: <![CDATA[
            <ul>
                <li><b>ActionLink</b> (ActionLinkConfig) - the config parameter which contains the information about the comment in the document that will be scrolled to:</li>
                <ul>
                    <li>Action (ActionConfig) - the information about the comment in the document that will be scrolled to (Data (string) and Type (string)).</li>
                </ul>
                <li><b>Emails</b> (List&lt;string&gt;) - a list of emails which will receive the mention message,</li>
                <li><b>Message</b> (string) - the comment message.</li>
            </ul>
            ]]></param>
            <short>Send the mention message</short>
            <category>Sharing</category>
            <returns>List of access rights information: user, their access rights to the file, the external link is available or not</returns>
            <path>api/2.0/files/file/{fileId}/sendeditornotify</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryControllerCommon.ChangeOwnerAsync(ASC.Files.Core.ApiModels.RequestDto.ChangeOwnerRequestDto)">
            <summary>
            Changes the owner of the file with the ID specified in the request.
            </summary>
            <param type="ASC.Files.Core.ApiModels.RequestDto.ChangeOwnerRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for changing the file owner: UserId (Guid) - new file owner ID</param>
            <short>Change the file owner</short>
            <category>Sharing</category>
            <returns>File entry information: title, access rights, shared or not, creation time, author, time of the last file update, root folder type, a user who updated a file, provider is specified or not, provider key, provider ID</returns>
            <path>api/2.0/files/owner</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryControllerCommon.GetSecurityInfoAsync(ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto)">
            <summary>
            Returns the sharing rights for all the files and folders specified in the request.
            </summary>
            <short>Get the sharing rights</short>
            <category>Sharing</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Base batch request parameters: <![CDATA[
            <ul>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>List of shared files and folders information: sharing rights, a user who has the access to the specified folder, the folder is locked by this user or not, this user is an owner of the specified folder or not, this user can edit the access to the specified folder or not</returns>
            <path>api/2.0/files/share</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryControllerCommon.RemoveSecurityInfoAsync(ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto)">
            <summary>
            Removes the sharing rights from all the files and folders specified in the request.
            </summary>
            <short>Remove the sharing rights</short>
            <category>Sharing</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Base batch request parameters: <![CDATA[
            <ul>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/share</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SecutiryControllerCommon.SetSecurityInfoAsync(ASC.Files.Core.ApiModels.RequestDto.SecurityInfoRequestDto)">
            <summary>
            Sets the sharing rights to all the files and folders specified in the request.
            </summary>
            <short>Set the sharing rights</short>
            <category>Sharing</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SecurityInfoRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Security information request parameters: <![CDATA[
            <ul>
                <li><b>Share</b> (IEnumerable&lt;FileShareParams&gt;) - collection of sharing parameters:</li>
                <ul>
                    <li><b>ShareTo</b> (Guid) - ID of the user with whom we want to share a file/folder,</li>
                    <li><b>Email</b> (string) - user email address,</li>
                    <li><b>Access</b> (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing).</li>
                </ul>
                <li><b>Notify</b> (bool) - notifies users about the shared file/folder or not,</li>
                <li><b>SharingMessage</b> (string) - message to send when notifying about the shared file/folder,</li>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>List of shared files and folders information: sharing rights, a user who has the access to the specified folder, the folder is locked by this user or not, this user is an owner of the specified folder or not, this user can edit the access to the specified folder or not</returns>
            <path>api/2.0/files/share</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ChangeAccessToThirdparty(ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto)">
            <summary>
            Changes the access to the third-party settings.
            </summary>
            <short>Change the third-party settings access</short>
            <category>Settings</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/thirdparty</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ChangeDeleteConfrim(ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto)">
            <summary>
            Specifies whether to confirm the file deletion or not.
            </summary>
            <short>Confirm the file deletion</short>
            <category>Settings</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/changedeleteconfrim</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ChangeDownloadZipFromBody(ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto)">
            <summary>
            Changes the format of the downloaded archive from .zip to .tar.gz. This method uses the body parameters.
            </summary>
            <short>Change the archive format (using body parameters)</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Archive</returns>
            <path>api/2.0/files/settings/downloadtargz</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ChangeDownloadZipFromForm(ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto)">
            <summary>
            Changes the format of the downloaded archive from .zip to .tar.gz. This method uses the form parameters.
            </summary>
            <short>Change the archive format (using form parameters)</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Archive</returns>
            <path>api/2.0/files/settings/downloadtargz</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.DisplayFavorite(ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto)">
            <summary>
            Displays the "Favorites" folder.
            </summary>
            <short>Display the "Favorites" folder</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Boolean value: true if the parameter is enabled</returns>
            <path>api/2.0/files/settings/favorites</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.DisplayRecent(ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto)">
            <summary>
            Displays the "Recent" folder.
            </summary>
            <short>Display the "Recent" folder</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Boolean value: true if the parameter is enabled</returns>
            <path>api/2.0/files/displayRecent</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.DisplayTemplates(ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto)">
            <summary>
            Displays the "Templates" folder.
            </summary>
            <short>Display the "Templates" folder</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Boolean value: true if the parameter is enabled</returns>
            <path>api/2.0/files/settings/templates</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ExternalShare(ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto)">
            <summary>
            Changes the ability to share a file externally.
            </summary>
            <short>Change the external sharing ability</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Boolean value: true if the parameter is enabled</returns>
            <path>api/2.0/files/settings/external</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ExternalShareSocialMedia(ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto)">
            <summary>
            Changes the ability to share a file externally on social networks.
            </summary>
            <short>Change the external sharing ability on social networks</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DisplayRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Boolean value: true if the parameter is enabled</returns>
            <path>api/2.0/files/settings/externalsocialmedia</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.Forcesave(ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto)">
            <summary>
            Changes the ability to force save a file.
            </summary>
            <short>Change the forcasaving ability</short>
            <category>Settings</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/forcesave</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.GetFilesSettings">
            <summary>
            Returns all the file settings.
            </summary>
            <short>Get file settings</short>
            <category>Settings</category>
            <returns>File settings</returns>
            <path>api/2.0/files/settings</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.GetModule">
            <summary>
            Returns the information about the Documents module.
            </summary>
            <short>Get the Documents information</short>
            <category>Settings</category>
            <returns>Module information: ID, product class name, title, description, icon URL, large icon URL, start URL, primary or nor, help URL</returns>
            <path>api/2.0/files/info</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.HideConfirmConvert(ASC.Files.Core.ApiModels.RequestDto.HideConfirmConvertRequestDto)">
            <summary>
            Hides the confirmation dialog for saving the file copy in the original format when converting a file.
            </summary>
            <short>Hide the confirmation dialog when converting</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.HideConfirmConvertRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for hiding the confirmation dialog: Save (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/hideconfirmconvert</path>
            <httpMethod>PUT</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.IsAvailablePrivacyRoomSettings">
            <summary>
            Checks if the Private Room settings are available or not.
            </summary>
            <short>Check the Private Room availability</short>
            <category>Settings</category>
            <returns>Boolean value: true if the Private Room settings are available</returns>
            <path>api/2.0/files/@privacy/available</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.StoreForcesave(ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto)">
            <summary>
            Changes the ability to store the forcesaved file versions.
            </summary>
            <short>Change the ability to store the forcesaved files</short>
            <category>Settings</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/storeforcesave</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.StoreOriginal(ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto)">
            <summary>
            Changes the ability to upload documents in the original formats as well.
            </summary>
            <short>Change the ability to upload original formats</short>
            <category>Settings</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/storeoriginal</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.KeepNewFileName(ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto)">
            <summary>
            Updates a file version if a file with such a name already exists.
            </summary>
            <short>Update a file version if it exists</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Settings request parameters: Set (bool) - specifies whether to set the specified settings or not</param>
            <category>Settings</category>
            <returns>Boolean value: true if the parameter is enabled</returns>
            <path>api/2.0/files/updateifexist</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.UpdateIfExist(ASC.Files.Core.ApiModels.RequestDto.SettingsRequestDto)">
            <summary>
            
            </summary>
            <param name="inDto"></param>
            <returns></returns>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ChangeAutomaticallyCleanUp(ASC.Files.Core.ApiModels.RequestDto.AutoCleanupRequestDto)">
            <summary>
            Updates the trash bin auto-clearing setting.
            </summary>
            <short>Update the trash bin auto-clearing setting</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.AutoCleanupRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Auto-clearing request parameters: <![CDATA[
            <ul>
                <li><b>Set</b> (bool) - enables the auto-clearing or not,</li>
                <li><b>Gap</b> (DateToAutoCleanUp) - a time interval when the auto-clearing will be performed (OneWeek, TwoWeeks, OneMonth, TwoMonths, ThreeMonths).</li>
            </ul>
            ]]></param>
            <category>Settings</category>
            <returns>The auto-clearing setting properties: auto-clearing or not, a time interval when the auto-clearing will be performed</returns>
            <path>api/2.0/files/settings/autocleanup</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.GetAutomaticallyCleanUp">
            <summary>
            Returns the auto-clearing setting properties.
            </summary>
            <short>Get the auto-clearing setting properties</short>
            <category>Settings</category>
            <returns>The auto-clearing setting properties: auto-clearing or not, a time interval when the auto-clearing will be performed</returns>
            <path>api/2.0/files/settings/autocleanup</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.SettingsController.ChangeDafaultAccessRights(System.Collections.Generic.List{ASC.Files.Core.Security.FileShare})">
            <summary>
            Changes the default access rights in the sharing settings.
            </summary>
            <short>Change the default access rights</short>
            <param type="System.Collections.Generic.List{ASC.Files.Core.Security.FileShare}, System.Collections.Generic" name="value">Sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing)</param>
            <category>Settings</category>
            <returns>Updated sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing)</returns>
            <path>api/2.0/files/settings/dafaultaccessrights</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.TagsController`1.AddToRecentAsync(`0)">
            <summary>
            Adds a file with the ID specified in the request to the "Recent" section.
            </summary>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <short>Add a file to the "Recent" section</short>
            <category>Files</category>
            <returns>New file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/file/{fileId}/recent</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.TagsController`1.ToggleFileFavoriteAsync(`0,System.Boolean)">
            <summary>
            Changes the favorite status of the file with the ID specified in the request.
            </summary>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Boolean, System" name="favorite">Specifies if this file is marked as favorite or not</param>
            <short>Change the file favorite status</short>
            <category>Files</category>
            <returns>Boolean value: true - the file is favorite, false - the file is not favorite</returns>
            <path>api/2.0/files/favorites/{fileId}</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.TagsControllerCommon.AddFavoritesAsync(ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto)">
            <summary>
            Adds files and folders with the IDs specified in the request to the favorite list.
            </summary>
            <short>Add favorite files and folders</short>
            <category>Operations</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Base batch request parameters: <![CDATA[
            <ul>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/favorites</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.TagsControllerCommon.AddTemplatesAsync(ASC.Files.Core.ApiModels.RequestDto.TemplatesRequestDto)">
            <summary>
            Adds files with the IDs specified in the request to the template list.
            </summary>
            <short>Add template files</short>
            <category>Files</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.TemplatesRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for adding files to the template list: FileIds (IEnumerable&lt;int&gt;) - list of file IDs</param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/templates</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.TagsControllerCommon.DeleteFavoritesFromBodyAsync(ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto)">
            <summary>
            Removes files and folders with the IDs specified in the request from the favorite list. This method uses the body parameters.
            </summary>
            <short>Delete favorite files and folders (using body parameters)</short>
            <category>Operations</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Base batch request parameters: <![CDATA[
            <ul>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/favorites</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.TagsControllerCommon.DeleteFavoritesFromQueryAsync(ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto)">
            <summary>
            Removes files and folders with the IDs specified in the request from the favorite list. This method uses the query parameters.
            </summary>
            <short>Delete favorite files and folders (using query parameters)</short>
            <category>Operations</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BaseBatchRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Base batch request parameters: <![CDATA[
            <ul>
                <li><b>FileIds</b> (IEnumerable&lt;JsonElement&gt;) - list of file IDs,</li>
                <li><b>FolderIds</b> (IEnumerable&lt;JsonElement&gt;) - list of folder IDs.</li>
            </ul>
            ]]></param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/favorites</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.TagsControllerCommon.DeleteTemplatesAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes files with the IDs specified in the request from the template list.
            </summary>
            <short>Delete template files</short>
            <category>Files</category>
            <param type="System.Collections.Generic.IEnumerable{System.Int32}, System.Collections.Generic" name="fileIds">List of file IDs</param>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/templates</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.Capabilities">
            <summary>
            Returns a list of the available providers.
            </summary>
            <short>Get providers</short>
            <category>Third-party integration</category>
            <returns>List of provider keys</returns>
            <remarks>Available provider keys: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive, kDrive.</remarks>
            <path>api/2.0/files/thirdparty/capabilities</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.CreateWordpressPost(ASC.Files.Core.ApiModels.RequestDto.CreateWordpressPostRequestDto)">
            <summary>
            Creates a WordPress post with the parameters specified in the request.
            </summary>
            <short>Create a WordPress post</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateWordpressPostRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a WordPress post: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - post title,</li>
                <li><b>Content</b> (string) - post contents,</li>
                <li><b>Status</b> (integer) - operation status.</li>
            </ul>
            ]]></param>
            <category>WordPress</category>
            <returns>Boolean value: true if the operation is successful</returns>
            <path>api/2.0/files/wordpress</path>
            <httpMethod>POST</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.DeleteThirdPartyAsync(System.Int32)">
            <summary>
            Removes the third-party storage service account with the ID specified in the request.
            </summary>
            <param type="System.Int32, System" name="providerId">Provider ID. It is a part of the folder ID. Example: folder ID is "sbox-123", then provider ID is "123"</param>
            <short>Remove a third-party account</short>
            <category>Third-party integration</category>
            <returns>Third-party folder ID</returns>
            <path>api/2.0/files/thirdparty/{providerId:int}</path>
            <httpMethod>DELETE</httpMethod>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.DeleteWordpressInfo">
            <summary>
            Deletes the WordPress plugin information.
            </summary>
            <short>Delete the WordPress information</short>
            <category>WordPress</category>
            <returns>Object with the "success" field: true if the operation is successful</returns>
            <path>api/2.0/files/wordpress-delete</path>
            <httpMethod>GET</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.GetCommonThirdPartyFoldersAsync">
            <summary>
            Returns a list of the third-party services connected to the "Common" section.
            </summary>
            <category>Third-party integration</category>
            <short>Get common third-party services</short>
            <returns>List of common third-party folders: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/thirdparty/common</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.GetThirdPartyAccountsAsync">
            <summary>
            Returns a list of all the connected third-party accounts.
            </summary>
            <category>Third-party integration</category>
            <short>Get third-party accounts</short>
            <returns>List of connected providers information: customer title, root folder type, provider ID, provider key</returns>
            <path>api/2.0/files/thirdparty</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.GetBackupThirdPartyAccountAsync">
            <summary>
            Return a backup of the connected third-party account.
            </summary>
            <category>Third-party integration</category>
            <short>Get the third-party account backup</short>
            <returns>Folder for the third-party account backup: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/thirdparty/backup</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.GetWordpressInfo">
            <summary>
            Returns the WordPress plugin information.
            </summary>
            <short>Get the WordPress information</short>
            <category>WordPress</category>
            <returns>Object with the following parameters: "success" - specifies if the operation is successful or not, "data" - blog information</returns>
            <path>api/2.0/files/wordpress-info</path>
            <httpMethod>GET</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.SaveThirdPartyAsync(ASC.Files.Core.ApiModels.RequestDto.ThirdPartyRequestDto)">
            <summary>
            Saves the third-party storage service account. For WebDav, Yandex, kDrive and SharePoint, the login and password are used for authentication. For other providers, the authentication is performed using a token received via OAuth 2.0.
            </summary>
            <short>Save a third-party account</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.ThirdPartyRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Third-party request parameters: <![CDATA[
            <ul>
                <li><b>Url</b> (string) - connection URL for the sharepoint,</li>
                <li><b>Login</b> (string) - login,</li>
                <li><b>Password</b> (string) - password,</li>
                <li><b>Token</b> (string) - authentication token,</li>
                <li><b>IsCorporate</b> (bool) - specifies if this is a corporate account or not,</li>
                <li><b>IsRoomsStorage</b> (bool) - specifies if this is a room storage or not,</li>
                <li><b>CustomerTitle</b> (string) - customer title,</li>
                <li><b>ProviderKey</b> (string) - provider key,</li>
                <li><b>ProviderId</b> (string) - provider ID.</li>
            </ul>
            ]]></param>
            <category>Third-party integration</category>
            <returns>Connected provider folder: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <remarks>List of provider keys: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive, kDrive.</remarks>
            <path>api/2.0/files/thirdparty</path>
            <httpMethod>POST</httpMethod>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.SaveThirdPartyBackupAsync(ASC.Files.Core.ApiModels.RequestDto.ThirdPartyBackupRequestDto)">
            <summary>
            Saves a backup of the connected third-party account.
            </summary>
            <short>Save the third-party account backup</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.ThirdPartyBackupRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Third-party backup request parameters: <![CDATA[
            <ul>
                <li><b>Url</b> (string) - connection URL for the sharepoint,</li>
                <li><b>Login</b> (string) - login,</li>
                <li><b>Password</b> (string) - password,</li>
                <li><b>Token</b> (string) - authentication token,</li>
                <li><b>CustomerTitle</b> (string) - customer title,</li>
                <li><b>ProviderKey</b> (string) - provider key.</li>
            </ul>
            ]]></param>
            <category>Third-party integration</category>
            <returns>Folder for the third-party account backup: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <remarks>List of provider key: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive, kDrive</remarks>
            <path>api/2.0/files/thirdparty/backup</path>
            <httpMethod>POST</httpMethod>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Files.Api.ThirdpartyController.WordpressSave(ASC.Files.Core.ApiModels.RequestDto.WordpressSaveRequestDto)">
            <summary>
            Saves the user WordPress information when logging in.
            </summary>
            <short>Save the user WordPress information</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.WordpressSaveRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for saving WordPress information: Code (string) - authorization code</param>
            <category>WordPress</category>
            <returns>Object with the following parameters: "success" - specifies if the operation is successful or not, "data" - blog information</returns>
            <path>api/2.0/files/wordpress-save</path>
            <httpMethod>POST</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Files.Api.UploadController`1.CreateUploadSessionAsync(`0,ASC.Files.Core.ApiModels.RequestDto.SessionRequestDto)">
            <summary>
            Creates a session to upload large files in multiple chunks to the folder with the ID specified in the request.
            </summary>
            <short>Chunked upload</short>
            <category>Operations</category>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.SessionRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Session request parameters: <![CDATA[
            <ul>
                <li><b>FileName</b> (string) - file name,</li>
                <li><b>FileSize</b> (long) - file length in bytes,</li>
                <li><b>RelativePath</b> (string) - relative path to the folder,</li>
                <li><b>CreateOn</b> (ApiDateTime) - creation time,</li>
                <li><b>Encrypted</b> (bool) - specifies whether to encrypt a file or not.</li>
            </ul>
            ]]></param>
            <remarks>
            <![CDATA[
            Each chunk can have different length but the length should be multiple of <b>512</b> and greater or equal to <b>10 mb</b>. Last chunk can have any size.
            After the initial response to the request with the <b>200 OK</b> status, you must get the <em>location</em> field value from the response. Send all your chunks to this location.
            Each chunk must be sent in the exact order the chunks appear in the file.
            After receiving each chunk, the server will respond with the current information about the upload session if no errors occurred.
            When the number of bytes uploaded is equal to the number of bytes you sent in the initial request, the server responds with the <b>201 Created</b> status and sends you information about the uploaded file.
            ]]>
            </remarks>
            <returns>
            <![CDATA[
            Information about created session which includes:
            <ul>
            <li><b>id:</b> unique ID of this upload session,</li>
            <li><b>created:</b> UTC time when the session was created,</li>
            <li><b>expired:</b> UTC time when the session will expire if no chunks are sent before that time,</li>
            <li><b>location:</b> URL where you should send your next chunk,</li>
            <li><b>bytes_uploaded:</b> number of bytes uploaded for the specific upload ID,</li>
            <li><b>bytes_total:</b> total number of bytes which will be uploaded.</li>
            </ul>
            ]]>
            </returns>
            <path>api/2.0/files/{folderId}/upload/create_session</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.UploadController`1.CreateEditSession(`0,System.Int64)">
            <summary>
            Creates a session to edit the existing file with multiple chunks (needed for WebDAV).
            </summary>
            <short>Create the editing session</short>
            <category>Files</category>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <param type="System.Int64, System" name="fileSize">File size in bytes</param>
            <returns>
            <![CDATA[
            Information about created session which includes:
            <ul>
            <li><b>id:</b> unique ID of this upload session,</li>
            <li><b>created:</b> UTC time when the session was created,</li>
            <li><b>expired:</b> UTC time when the session will expire if no chunks are sent before that time,</li>
            <li><b>location:</b> URL where you should send your next chunk,</li>
            <li><b>bytes_uploaded:</b> number of bytes uploaded for the specific upload ID,</li>
            <li><b>bytes_total:</b> total number of bytes which will be uploaded.</li>
            </ul>
            ]]>
            </returns>
            <path>api/2.0/files/file/{fileId}/edit_session</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.UploadController`1.InsertFileAsync(`0,ASC.Files.Core.ApiModels.RequestDto.InsertFileRequestDto)">
            <summary>
            Inserts a file specified in the request to the selected folder by single file uploading.
            </summary>
            <short>Insert a file</short>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.InsertFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for inserting a file: <![CDATA[
            <ul>
                <li><b>Stream</b> (Stream) - request input stream,</li>
                <li><b>Title</b> (string) - file name,</li>
                <li><b>CreateNewIfExist</b> (bool?) - specifies whether to create a new file if it already exists or not,</li>
                <li><b>KeepConvertStatus</b> (bool) - specifies whether to keep the file converting status or not.</li>
            </ul>
            ]]></param>
            <category>Folders</category>
            <returns>Inserted file information: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/{folderId}/insert</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.UploadController`1.UploadFileAsync(`0,ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto)">
            <summary>
            Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.
            </summary>
            <short>Upload a file</short>
            <category>Folders</category>
            <remarks>
            <![CDATA[
             You can upload files in two different ways:
             <ol>
            <li>Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.</li>
            <li>Using standart multipart/form-data method.</li>
            </ol>]]>
            </remarks>
            <param type="System.Int32, System" name="folderId">Folder ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for uploading a file: <![CDATA[
            <ul>
                <li><b>File</b> (IFormFile) - request input stream,</li>
                <li><b>ContentType</b> (ContentType) - Content-Type header,</li>
                <li><b>ContentDisposition</b> (ContentDisposition) - Content-Disposition header,</li>
                <li><b>Files</b> (IEnumerable&lt;IFormFile&gt;) - list of files when specified as multipart/form-data,</li>
                <li><b>CreateNewIfExist</b> (bool?) - specifies whether to create a new file if it already exists or not,</li>
                <li><b>StoreOriginalFileFlag</b> (bool?) - specifies whether to upload documents in the original formats as well or not,</li>
                <li><b>KeepConvertStatus</b> (bool) - specifies whether to keep the file converting status or not.</li>
            </ul>
            ]]></param>
            <returns>Uploaded file(s): folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/{folderId}/upload</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.UploadControllerCommon.InsertFileToCommonFromBodyAsync(ASC.Files.Core.ApiModels.RequestDto.InsertFileRequestDto)">
            <summary>
            Inserts a file specified in the request to the "Common" section by single file uploading.
            </summary>
            <short>Insert a file to the "Common" section</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.InsertFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for inserting a file: <![CDATA[
            <ul>
                <li><b>Stream</b> (Stream) - request input stream,</li>
                <li><b>Title</b> (string) - file name,</li>
                <li><b>CreateNewIfExist</b> (bool?) - specifies whether to create a new file if it already exists or not,</li>
                <li><b>KeepConvertStatus</b> (bool) - specifies whether to keep the file converting status or not.</li>
            </ul>
            ]]></param>
            <category>Folders</category>
            <returns>Inserted file: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@common/insert</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.UploadControllerCommon.InsertFileToMyFromBodyAsync(ASC.Files.Core.ApiModels.RequestDto.InsertFileRequestDto)">
            <summary>
            Inserts a file specified in the request to the "My documents" section by single file uploading.
            </summary>
            <short>Insert a file to the "My documents" section</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.InsertFileRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for inserting a file: <![CDATA[
            <ul>
                <li><b>Stream</b> (Stream) - request input stream,</li>
                <li><b>Title</b> (string) - file name,</li>
                <li><b>CreateNewIfExist</b> (bool?) - specifies whether to create a new file if it already exists or not,</li>
                <li><b>KeepConvertStatus</b> (bool) - specifies whether to keep the file converting status or not.</li>
            </ul>
            ]]></param>
            <category>Folders</category>
            <returns>Inserted file: folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@my/insert</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.UploadControllerCommon.UploadFileToCommonAsync(ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto)">
            <summary>
            Uploads a file specified in the request to the "Common" section by single file uploading or standart multipart/form-data method.
            </summary>
            <short>Upload a file to the "Common" section</short>
            <category>Folders</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for uploading a file: <![CDATA[
            <ul>
                <li><b>File</b> (IFormFile) - request input stream,</li>
                <li><b>ContentType</b> (ContentType) - Content-Type header,</li>
                <li><b>ContentDisposition</b> (ContentDisposition) - Content-Disposition header,</li>
                <li><b>Files</b> (IEnumerable&lt;IFormFile&gt;) - list of files when specified as multipart/form-data,</li>
                <li><b>CreateNewIfExist</b> (bool?) - specifies whether to create a new file if it already exists or not,</li>
                <li><b>StoreOriginalFileFlag</b> (bool?) - specifies whether to upload documents in the original formats as well or not,</li>
                <li><b>KeepConvertStatus</b> (bool) - specifies whether to keep the file converting status or not.</li>
            </ul>
            ]]></param>
            <remarks>
            <![CDATA[
             You can upload files in two different ways:
             <ol>
            <li>Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.</li>
            <li>Using standart multipart/form-data method.</li>
            </ol>]]>
            </remarks>
            <returns>Uploaded file(s): folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@common/upload</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.UploadControllerCommon.UploadFileToMyAsync(ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto)">
            <summary>
            Uploads a file specified in the request to the "My documents" section by single file uploading or standart multipart/form-data method.
            </summary>
            <short>Upload a file to the "My documents" section</short>
            <category>Folders</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for uploading a file: <![CDATA[
            <ul>
                <li><b>File</b> (IFormFile) - request input stream,</li>
                <li><b>ContentType</b> (ContentType) - Content-Type header,</li>
                <li><b>ContentDisposition</b> (ContentDisposition) - Content-Disposition header,</li>
                <li><b>Files</b> (IEnumerable&lt;IFormFile&gt;) - list of files when specified as multipart/form-data,</li>
                <li><b>CreateNewIfExist</b> (bool?) - specifies whether to create a new file if it already exists or not,</li>
                <li><b>StoreOriginalFileFlag</b> (bool?) - specifies whether to upload documents in the original formats as well or not,</li>
                <li><b>KeepConvertStatus</b> (bool) - specifies whether to keep the file converting status or not.</li>
            </ul>
            ]]></param>
            <remarks>
            <![CDATA[
             You can upload files in two different ways:
             <ol>
            <li>Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.</li>
            <li>Using standart multipart/form-data method.</li>
            </ol>]]>
            </remarks>
            <returns>Uploaded file(s): folder ID, version, version group, content length, pure content length, file status, URL to view a file, web URL, file type, file extension, comment, encrypted or not, thumbnail URL, thumbnail status, locked or not, user ID who locked a file, denies file downloading or not, denies file sharing or not, file accessibility</returns>
            <path>api/2.0/files/@my/upload</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsInternalController.CreateRoomAsync(ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto)">
            <summary>
            Creates a room in the "Virtual rooms" section.
            </summary>
            <short>Create a room</short>
            <category>Virtual rooms</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a room: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - room name,</li>
                <li><b>RoomType</b> (RoomType) - room type: FillingFormsRoom (1), EditingRoom (2), ReviewRoom (3), ReadOnlyRoom (4), CustomRoom (5),</li>
                <li><b>Private</b> (bool) - private room or not,</li>
                <li><b>Share</b> (IEnumerable&lt;FileShareParams&gt;) - collection of sharing parameters:</li>
                <ul>
                    <li><b>ShareTo</b> (Guid) - ID of the user with whom we want to share a room,</li>
                    <li><b>Email</b> (string) - user email address,</li>
                    <li><b>Access</b> (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing).</li>
                </ul>
                <li><b>Notify</b> (bool) - notifies users about the shared room or not,</li>
                <li><b>SharingMessage</b> (string) - message to send when notifying about the shared room.</li>
            </ul>
            ]]></param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsThirdPartyController.CreateRoomAsync(System.String,ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto)">
            <summary>
            Creates a room in the "Virtual rooms" section stored in a third-party storage.
            </summary>
            <short>Create a third-party room</short>
            <category>Virtual rooms</category>
            <param type="System.String, System" name="id">ID of the folder in the third-party storage in which the contents of the room will be stored</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a room: <![CDATA[
            <ul>
                <li><b>Title</b> (string) - room name,</li>
                <li><b>RoomType</b> (RoomType) - room type: FillingFormsRoom (1), EditingRoom (2), ReviewRoom (3), ReadOnlyRoom (4), CustomRoom (5),</li>
                <li><b>Private</b> (bool) - private room or not,</li>
                <li><b>Share</b> (IEnumerable&lt;FileShareParams&gt;) - collection of sharing parameters:</li>
                <ul>
                    <li><b>ShareTo</b> (Guid) - ID of the user with whom we want to share a room,</li>
                    <li><b>Email</b> (string) - user email address,</li>
                    <li><b>Access</b> (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing).</li>
                </ul>
                <li><b>Notify</b> (bool) - notifies users about the shared room or not,</li>
                <li><b>SharingMessage</b> (string) - message to send when notifying about the shared room.</li>
            </ul>
            ]]></param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/thirdparty/{id}</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.GetRoomInfoAsync(`0)">
            <summary>
            Returns the virtual room information.
            </summary>
            <short>Get room information</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.UpdateRoomAsync(`0,ASC.Files.Core.ApiModels.RequestDto.UpdateRoomRequestDto)">
            <summary>
            Renames a virtual room with the ID specified in  the request.
            </summary>
            <short>Rename a room</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.UpdateRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for updating a virtual room: Title (string) - new room name</param>
            <returns>Updated room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.DeleteRoomAsync(`0,ASC.Files.Core.ApiModels.RequestDto.DeleteRoomRequestDto)">
            <summary>
            Removes a virtual room with the ID specified in the request.
            </summary>
            <short>Remove a room</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.DeleteRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for deleting a virtual room: DeleteAfter (bool) - specifies whether to delete a room after the editing session is finished or not</param>
            <returns>File operation: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/rooms/{id}</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.ArchiveRoomAsync(`0,ASC.Files.Core.ApiModels.RequestDto.ArchiveRoomRequestDto)">
            <summary>
            Moves a virtual room with the ID specified in the request to the "Archive" section.
            </summary>
            <short>Archive a room</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.ArchiveRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for archiving a virtual room: DeleteAfter (bool) - specifies whether to archive a room after the editing session is finished or not</param>
            <returns>File operation: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/rooms/{id}/archive</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.UnarchiveRoomAsync(`0,ASC.Files.Core.ApiModels.RequestDto.ArchiveRoomRequestDto)">
            <summary>
            Moves a virtual room with the ID specified in the request from the "Archive" section to the "Virtual room" section.
            </summary>
            <short>Unarchive a room</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.ArchiveRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for unarchiving a virtual room: DeleteAfter (bool) - specifies whether to unarchive a room after the editing session is finished or not</param>
            <returns>File operation: operation ID, operation type, operation progress, error, processing status, finished or not, URL, list of files, list of folders</returns>
            <path>api/2.0/files/rooms/{id}/unarchive</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.SetRoomSecurityAsync(`0,ASC.Files.Core.ApiModels.RequestDto.RoomInvitationRequestDto)">
            <summary>
            Sets the access rights to a virtual room with the ID specified in the request.
            </summary>
            <short>Set the room access rights</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.RoomInvitationRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for inviting users to a room: <![CDATA[
            <ul>
                <li><b>Invitations</b> (IEnumerable&lt;RoomInvitation&gt;) - collection of invitation parameters:</li>
                <ul>
                    <li><b>Id</b> (Guid) - ID of the user with whom we want to share a room,</li>
                    <li><b>Email</b> (string) - user email address,</li>
                    <li><b>Access</b> (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing).</li>
                </ul>
                <li><b>Notify</b> (bool) - notifies users about the shared room or not,</li>
                <li><b>Message</b> (string) - message to send when notifying about the shared room.</li>
            </ul>
            ]]></param>
            <returns>Room security information: room members, warning</returns>
            <path>api/2.0/files/rooms/{id}/share</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.GetRoomSecurityInfoAsync(`0)">
            <summary>
            Returns the access rights of a virtual room with the ID specified in the request.
            </summary>
            <short>Get the room access rights</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <returns>Security information of room files: sharing rights, a user who has the access to the specified file, the file is locked by this user or not, this user is an owner of the specified file or not, this user can edit the access to the specified file or not</returns>
            <path>api/2.0/files/rooms/{id}/share</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.SetInvintationLinkAsync(`0,ASC.Files.Core.ApiModels.RequestDto.InvintationLinkRequestDto)">
            <summary>
            Sets an external link to invite the users to a virtual room with the ID specified in the request.
            </summary>
            <short>Set an external invitation link</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.InvintationLinkRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Invitation link request parameters: <![CDATA[
            <ul>
                <li><b>LinkId</b> (Guid) - link ID,</li>
                <li><b>Title</b> (string) - external link name,</li>
                <li><b>Access</b> (FileShare) - sharing rights (None, ReadWrite, Read, Restrict, Varies, Review, Comment, FillForms, CustomFilter, RoomAdmin, Editing).</li>
            </ul>
            ]]></param>
            <returns>Security information of room files: sharing rights, a user who has the access to the specified file, the file is locked by this user or not, this user is an owner of the specified file or not, this user can edit the access to the specified file or not</returns>
            <path>api/2.0/files/rooms/{id}/links</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.AddTagsAsync(`0,ASC.Files.Core.ApiModels.RequestDto.BatchTagsRequestDto)">
            <summary>
            Adds the tags to a virtual room with the ID specified in the request.
            </summary>
            <short>Add room tags</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BatchTagsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for adding tags: Names (IEnumerable&lt;string&gt;) - tag names</param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}/tags</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.DeleteTagsAsync(`0,ASC.Files.Core.ApiModels.RequestDto.BatchTagsRequestDto)">
            <summary>
            Removes the tags from a virtual room with the ID specified in the request.
            </summary>
            <short>Remove room tags</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BatchTagsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for removing tags: Names (IEnumerable&lt;string&gt;) - tag names</param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}/tags</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.CreateRoomLogoAsync(`0,ASC.Files.Core.ApiModels.RequestDto.LogoRequestDto)">
            <summary>
            Creates a logo for a virtual room with the ID specified in the request.
            </summary>
            <short>Create a room logo</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.LogoRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Logo request parameters: <![CDATA[
            <ul>
                <li><b>TmpFile</b> (string) - the path to the temporary image file,</li>
                <li><b>X</b> (integer) - the X coordinate of the rectangle starting point,</li>
                <li><b>Y</b> (integer) - the Y coordinate of the rectangle starting point,</li>
                <li><b>Width</b> (integer) - the rectangle width,</li>
                <li><b>Height</b> (integer) - the rectangle height.</li>
            </ul>
            ]]></param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}/logo</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.DeleteRoomLogoAsync(`0)">
            <summary>
            Removes a logo from a virtual room with the ID specified in the request.
            </summary>
            <short>Remove a room logo</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}/logo</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.PinRoomAsync(`0)">
            <summary>
            Pins a virtual room with the ID specified in the request to the top of the list.
            </summary>
            <short>Pin a room</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}/pin</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.UnpinRoomAsync(`0)">
            <summary>
            Unpins a virtual room with the ID specified in the request from the top of the list.
            </summary>
            <short>Unpin a room</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <returns>Room information: parent folder ID, number of files, number of folders, shareable or not, favorite or not, number for a new folder, list of tags, logo, pinned or not, room type, private or not</returns>
            <path>api/2.0/files/rooms/{id}/unpin</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsController`1.ResendEmailInvitationsAsync(`0,ASC.Files.Core.ApiModels.RequestDto.UserInvintationRequestDto)">
            <summary>
            Resends the email invitations to a virtual room with the ID specified in the request to the selected users.
            </summary>
            <short>Resend room invitations</short>
            <category>Virtual rooms</category>
            <param type="System.Int32, System" name="id">Room ID</param>
            <param type="ASC.Files.Core.ApiModels.RequestDto.UserInvintationRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">User invitation request parameters: UsersIds (IEnumerable&lt;Guid&gt;) - list of user IDs</param>
            <returns>Task awaiter</returns>
            <path>api/2.0/files/rooms/{id}/resend</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsCommonController.GetRoomsFolderAsync(System.Nullable{ASC.Files.Core.ApiModels.RequestDto.RoomFilterType},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{ASC.Files.Core.VirtualRooms.SearchArea},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{ASC.Files.Core.ProviderFilter},System.Nullable{ASC.Files.Core.Core.SubjectFilter})">
            <summary>
            Returns the contents of the "Virtual rooms" section by the parameters specified in the request.
            </summary>
            <short>Get rooms</short>
            <category>Virtual rooms</category>
            <param type="System.Nullable{ASC.Files.Core.ApiModels.RequestDto.RoomFilterType}, System" name="type">Filter by room type (FillingFormsRoomOnly - 1, EditingRoomOnly - 2, ReviewRoomOnly - 3, ReadOnlyRoomOnly - 4, CustomRoomOnly - 5, FoldersOnly - 6)</param>
            <param type="System.String, System" name="subjectId">Filter by user ID</param>
            <param type="System.Nullable{System.Boolean}, System" name="searchInContent">Specifies whether to search within the section contents or not</param>
            <param type="System.Nullable{System.Boolean}, System" name="withSubfolders">Specifies whether to return sections with or without subfolders</param>
            <param type="System.Nullable{ASC.Files.Core.VirtualRooms.SearchArea}, System" name="searchArea">Room search area (Active, Archive, Any)</param>
            <param type="System.Nullable{System.Boolean}, System" name="withoutTags">Specifies whether to search by tags or not</param>
            <param type="System.String, System" name="tags">Tags in the serialized format</param>
            <param type="System.Nullable{System.Boolean}, System" name="excludeSubject">Specifies whether to exclude a subject or not</param>
            <param type="System.Nullable{ASC.Files.Core.ProviderFilter}, System" name="provider">Filter by provider name (None, Box, DropBox, GoogleDrive, kDrive, OneDrive, SharePoint, WebDav, Yandex)</param>
            <param type="System.Nullable{ASC.Files.Core.Core.SubjectFilter}, System" name="subjectFilter">Filter by subject (Owner - 1, Member - 1)</param>
            <returns>Virtual rooms contents: list of files, list of folders, current folder information, folder path, folder start index, number of folder elements, total number of elements in the folder, new element index</returns>
            <path>api/2.0/files/rooms</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsCommonController.CreateTagAsync(ASC.Files.Core.ApiModels.RequestDto.CreateTagRequestDto)">
            <summary>
            Creates a custom tag with the parameters specified in the request.
            </summary>
            <short>Create a tag</short>
            <category>Virtual rooms</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.CreateTagRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for creating a tag: Name (string) - tag name</param>
            <returns>New tag name</returns>
            <path>api/2.0/files/tags</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsCommonController.GetTagsInfoAsync">
            <summary>
            Returns a list of custom tags.
            </summary>
            <short>Get tags</short>
            <category>Virtual rooms</category>
            <returns>List of tag names</returns>
            <path>api/2.0/files/tags</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsCommonController.DeleteTagsAsync(ASC.Files.Core.ApiModels.RequestDto.BatchTagsRequestDto)">
            <summary>
            Deletes a bunch of custom tags specified in the request.
            </summary>
            <short>Delete tags</short>
            <category>Virtual rooms</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.BatchTagsRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Batch tags request parameters: Names (IEnumerable&lt;string&gt;) - list of tag names</param>
            <returns>Task awaiter</returns>
            <path>api/2.0/files/tags</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsCommonController.UploadRoomLogo(Microsoft.AspNetCore.Http.IFormCollection)">
            <summary>
            Uploads a temporary image to create a virtual room logo.
            </summary>
            <short>Upload an image for room logo</short>
            <category>Virtual rooms</category>
            <param type="Microsoft.AspNetCore.Http.IFormCollection, Microsoft.AspNetCore.Http" name="formCollection">Image data</param>
            <returns>Upload result: success or not, data, message</returns>
            <path>api/2.0/files/logos</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Files.Api.VirtualRoomsCommonController.SetSecurityByLink(ASC.Files.Core.ApiModels.RequestDto.AcceptInvitationDto)">
            <summary>
            Accepts an invitation to a virtual room via an external link.
            </summary>
            <short>Accept an invitation</short>
            <category>Virtual rooms</category>
            <param type="ASC.Files.Core.ApiModels.RequestDto.AcceptInvitationDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for accepting invitations: Key (string) - link key</param>
            <returns>Task awaiter</returns>
            <path>api/2.0/files/rooms/accept</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="T:ASC.Api.Documents.PrivacyRoomController`1">
            <summary>
            Provides access to Private Room.
            </summary>
            <name>privacyroom</name>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomController`1.GetPublicKeysWithAccess(`0)">
            <summary>
            Returns all the key pairs of the users who have access to the file with the ID specified in the request.
            </summary>
            <short>Get file key pairs</short>
            <param type="System.Int32, System" name="fileId">File ID</param>
            <returns>List of encryption key pairs: private key, public key, user ID</returns>
            <path>api/2.0/privacyroom/access/{fileId}</path>
            <httpMethod>GET</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomControllerCommon.GetKeys">
            <summary>
            Returns a key pair for the current user.
            </summary>
            <short>Get encryption keys</short>
            <returns>Encryption key pair: private key, public key, user ID</returns>
            <path>api/2.0/privacyroom/keys</path>
            <httpMethod>GET</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomControllerCommon.PrivacyRoom">
            <summary>
            Checks if the Private Room settings are enabled or not.
            </summary>
            <short>Check the Private Room settings</short>
            <returns>Boolean value: true - the Private Room settings are enabled, false - the Private Room settings are disabled</returns>
            <path>api/2.0/privacyroom</path>
            <httpMethod>GET</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomControllerCommon.SetKeys(ASC.Files.Core.ApiModels.RequestDto.PrivacyRoomRequestDto)">
            <summary>
            Sets the key pair for the current user.
            </summary>
            <short>Set encryption keys</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.PrivacyRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for setting encryption keys: <![CDATA[
            <ul>
                <li><b>PublicKey</b> (string) - public key,</li>
                <li><b>PrivateKeyEnc</b> (string) - private key,</li>
                <li><b>Update</b> (bool) - encryption keys need to be updated or not.</li>
            </ul>
            ]]></param>
            <returns>Boolean value: true - the key pair is set</returns>
            <path>api/2.0/privacyroom/keys</path>
            <httpMethod>PUT</httpMethod>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomControllerCommon.SetPrivacyRoom(ASC.Files.Core.ApiModels.RequestDto.PrivacyRoomRequestDto)">
            <summary>
            Enables the Private Room settings.
            </summary>
            <short>Enable the Private Room settings</short>
            <param type="ASC.Files.Core.ApiModels.RequestDto.PrivacyRoomRequestDto, ASC.Files.Core.ApiModels.RequestDto" name="inDto">Request parameters for setting encryption keys: Enable (bool) - specifies whether to enable the Private Room settings or not</param>
            <returns>Boolean value: true - the Private Room settings are enabled, false - the Private Room settings are disabled</returns>
            <path>api/2.0/privacyroom</path>
            <httpMethod>PUT</httpMethod>
            <visible>false</visible>
        </member>
    </members>
</doc>
