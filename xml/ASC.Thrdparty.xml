<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASC.Thrdparty</name>
    </assembly>
    <members>
        <member name="T:ASC.Thrdparty.Message">
            <summary>
            Represents an user activity message
            </summary>
        </member>
        <member name="P:ASC.Thrdparty.Message.UserName">
            <summary>
            User name
            </summary>
            <example>Name user</example>
        </member>
        <member name="P:ASC.Thrdparty.Message.Text">
            <summary>
            Message text
            </summary>
            <example>text</example>
        </member>
        <member name="P:ASC.Thrdparty.Message.PostedOn">
            <summary>
            The date of message post
            </summary>
            <example>2008-04-10T06-30-00.000Z</example>
        </member>
        <member name="P:ASC.Thrdparty.Message.Source">
            <summary>
            Social network
            </summary>
            <example type="int">0</example>
        </member>
        <member name="M:ASC.Thrdparty.InMemoryTokenManager.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ASC.Thrdparty.InMemoryTokenManager"/> class.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
        </member>
        <member name="P:ASC.Thrdparty.InMemoryTokenManager.ConsumerKey">
            <summary>
            Gets the consumer key.
            </summary>
            <value>The consumer key.</value>
        </member>
        <member name="P:ASC.Thrdparty.InMemoryTokenManager.ConsumerSecret">
            <summary>
            Gets the consumer secret.
            </summary>
            <value>The consumer secret.</value>
        </member>
        <member name="M:ASC.Thrdparty.InMemoryTokenManager.GetTokenSecret(System.String)">
            <summary>
            Gets the Token Secret given a request or access token.
            </summary>
            <param name="token">The request or access token.</param>
            <returns>
            The secret associated with the given token.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the secret cannot be found for the given token.</exception>
        </member>
        <member name="M:ASC.Thrdparty.InMemoryTokenManager.StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)">
            <summary>
            Stores a newly generated unauthorized request token, secret, and optional
            application-specific parameters for later recall.
            </summary>
            <param name="request">The request message that resulted in the generation of a new unauthorized request token.</param>
            <param name="response">The response message that includes the unauthorized request token.</param>
            <exception cref="T:System.ArgumentException">Thrown if the consumer key is not registered, or a required parameter was not found in the parameters collection.</exception>
            <remarks>
            Request tokens stored by this method SHOULD NOT associate any user account with this token.
            It usually opens up security holes in your application to do so.  Instead, you associate a user
            account with access tokens (not request tokens) in the <see cref="M:ASC.Thrdparty.InMemoryTokenManager.ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:ASC.Thrdparty.InMemoryTokenManager.ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)">
            <summary>
            Deletes a request token and its associated secret and stores a new access token and secret.
            </summary>
            <param name="consumerKey">The Consumer that is exchanging its request token for an access token.</param>
            <param name="requestToken">The Consumer's request token that should be deleted/expired.</param>
            <param name="accessToken">The new access token that is being issued to the Consumer.</param>
            <param name="accessTokenSecret">The secret associated with the newly issued access token.</param>
            <remarks>
            	<para>
            Any scope of granted privileges associated with the request token from the
            original call to <see cref="M:ASC.Thrdparty.InMemoryTokenManager.StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)"/> should be carried over
            to the new Access Token.
            </para>
            	<para>
            To associate a user account with the new access token,
            <see cref="!:System.Web.HttpContext.User">HttpContext.Current.User</see> may be
            useful in an ASP.NET web application within the implementation of this method.
            Alternatively you may store the access token here without associating with a user account,
            and wait until <see cref="M:DotNetOpenAuth.OAuth.WebConsumer.ProcessUserAuthorization"/> or
            <see cref="M:DotNetOpenAuth.OAuth.DesktopConsumer.ProcessUserAuthorization(System.String,System.String)"/> return the access
            token to associate the access token with a user account at that point.
            </para>
            </remarks>
        </member>
        <member name="M:ASC.Thrdparty.InMemoryTokenManager.GetTokenType(System.String)">
            <summary>
            Classifies a token as a request token or an access token.
            </summary>
            <param name="token">The token to classify.</param>
            <returns>Request or Access token, or invalid if the token is not recognized.</returns>
        </member>
        <member name="M:ASC.Thrdparty.InMemoryTokenManager.StoreOpenIdAuthorizedRequestToken(System.String,DotNetOpenAuth.OpenId.Extensions.OAuth.AuthorizationApprovedResponse)">
            <summary>
            Stores a new request token obtained over an OpenID request.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="authorization">The authorization message carrying the request token and authorized access scope.</param>
            <remarks>
            	<para>The token secret is the empty string.</para>
            	<para>Tokens stored by this method should be short-lived to mitigate
            possible security threats.  Their lifetime should be sufficient for the
            relying party to receive the positive authentication assertion and immediately
            send a follow-up request for the access token.</para>
            </remarks>
        </member>
        <member name="T:ASC.Thrdparty.Twitter.TwitterConsumer">
            <summary>
            A consumer capable of communicating with Twitter.
            </summary>
        </member>
        <member name="F:ASC.Thrdparty.Twitter.TwitterConsumer.SignInWithTwitterServiceDescription">
            <summary>
            The description of Twitter's OAuth protocol URIs for use with their "Sign in with Twitter" feature.
            </summary>
        </member>
        <member name="F:ASC.Thrdparty.Twitter.TwitterConsumer.GetFavoritesEndpoint">
            <summary>
            The URI to get a user's favorites.
            </summary>
        </member>
        <member name="M:ASC.Thrdparty.Twitter.TwitterConsumer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ASC.Thrdparty.Twitter.TwitterConsumer"/> class.
            </summary>
        </member>
        <member name="T:ASC.Thrdparty.Twitter.TwitterDataProvider">
            <summary>
            Contains methods for getting data from Twitter
            </summary>
        </member>
        <member name="M:ASC.Thrdparty.Twitter.TwitterDataProvider.#ctor(ASC.Thrdparty.Twitter.TwitterApiInfo)">
            <summary>
            Costructor
            </summary>
            <param name="apiInfo">TwitterApiInfo object</param>
        </member>
        <member name="M:ASC.Thrdparty.Twitter.TwitterDataProvider.GetUserTweets(System.Nullable{System.Decimal},System.String,System.Int32)">
            <summary>
            Gets tweets posted by specified user
            </summary>   
            <returns>Message list</returns>
        </member>
        <member name="M:ASC.Thrdparty.Twitter.TwitterDataProvider.FindUsers(System.String)">
            <summary>
            Gets last 20 users
            </summary>
            <param name="search">Search string</param>
            <returns>TwitterUserInfo list</returns>
        </member>
        <member name="M:ASC.Thrdparty.Twitter.TwitterDataProvider.GetUrlOfUserImage(System.String,ASC.Thrdparty.Twitter.TwitterDataProvider.ImageSize)">
            <summary>
            Gets url of User image
            </summary>
            <returns>Url of image or null if resource does not exist</returns>
        </member>
        <member name="P:ASC.Thrdparty.Twitter.TwitterUserInfo.UserID">
            <example type="dobule">1,1</example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ASC.Thrdparty.Twitter.TwitterUserInfo.ScreenName" -->
        <!-- Badly formed XML comment ignored for member "P:ASC.Thrdparty.Twitter.TwitterUserInfo.UserName" -->
        <!-- Badly formed XML comment ignored for member "P:ASC.Thrdparty.Twitter.TwitterUserInfo.SmallImageUrl" -->
        <!-- Badly formed XML comment ignored for member "P:ASC.Thrdparty.Twitter.TwitterUserInfo.Description" -->
    </members>
</doc>
