<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASC.Api.Documents</name>
    </assembly>
    <members>
        <member name="T:ASC.Api.Documents.DocumentsApi">
            <summary>
            Provides access to documents
            </summary>
            <name>files</name>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.Name">
            <summary>
            </summary>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.#ctor(ASC.Api.Impl.ApiContext,ASC.Web.Files.Services.WCFService.IFileStorageService)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="fileStorageService"></param>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetMyFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of files and folders located in the current user My section
            </summary>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <short>Section My</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">My folder contents</returns>
            <path>api/2.0/files/@my</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetProjectsFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of files and folders located in the current user Projects section
            </summary>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <short>Section Projects</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Projects folder contents</returns>
            <path>api/2.0/files/@projects</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetCommonFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of files and folders located in the Common section
            </summary>
            <short>Section Common</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Common folder contents</returns>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <path>api/2.0/files/@common</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetShareFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of files and folders located in the Shared with Me section
            </summary>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <short>Section Shared</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Shared folder contents</returns>
            <path>api/2.0/files/@share</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetRecentFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of recent files
            </summary>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <short>Section Recent</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Recent contents</returns>
            <path>api/2.0/files/@recent</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFavoritesFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of favorites files
            </summary>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <short>Section Favorite</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Favorites contents</returns>
            <path>api/2.0/files/@favorites</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetTemplatesFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of templates files
            </summary>
            <short>Section Template</short>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Templates contents</returns>
            <path>api/2.0/files/@templates</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetTrashFolder(System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of files and folders located in the Recycle Bin
            </summary>
            <param name="userIdOrGroupId"></param>
            <param name="filterType"></param>
            <short>Section Trash</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Trash folder contents</returns>
            <path>api/2.0/files/@trash</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFolder(System.String,System.Guid,ASC.Files.Core.FilterType)">
            <summary>
            Returns the detailed list of files and folders located in the folder with the ID specified in the request
            </summary>
            <short>
            Folder by ID
            </short>
            <category>Folders</category>
            <param method="url" name="folderId">Folder ID</param>
            <param method="url" name="userIdOrGroupId" optional="true">User or group ID</param>
            <param method="url" name="filterType" optional="true" remark="Allowed values: None (0), FilesOnly (1), FoldersOnly (2), DocumentsOnly (3), PresentationsOnly (4), SpreadsheetsOnly (5) or ImagesOnly (7)">Filter type</param>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Folder contents</returns>
            <path>api/2.0/files/{folderId}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.UploadFileToMy(System.IO.Stream,System.Net.Mime.ContentType,System.Net.Mime.ContentDisposition,System.Collections.Generic.IEnumerable{System.Web.HttpPostedFileBase})">
            <summary>
            Uploads the file specified with single file upload or standart multipart/form-data method to My section
            </summary>
            <short>Upload to My</short>
            <category>Uploads</category>
            <remarks>
            <![CDATA[
             Upload can be done in 2 different ways:
             <ol>
            <li>Single file upload. You should set Content-Type &amp; Content-Disposition header to specify filename and content type, and send file in request body</li>
            <li>Using standart multipart/form-data method</li>
            </ol>]]>
            </remarks>
            <param name="file" visible="false">Request Input stream</param>
            <param name="contentType" visible="false">Content-Type Header</param>
            <param name="contentDisposition" visible="false">Content-Disposition Header</param>
            <param name="files" visible="false">List of files when posted as multipart/form-data</param>
            <returns>Uploaded file</returns>
            <path>api/2.0/files/@my/upload</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.UploadFileToCommon(System.IO.Stream,System.Net.Mime.ContentType,System.Net.Mime.ContentDisposition,System.Collections.Generic.IEnumerable{System.Web.HttpPostedFileBase})">
            <summary>
            Uploads the file specified with single file upload or standart multipart/form-data method to Common section
            </summary>
            <short>Upload to Common</short>
            <category>Uploads</category>
            <remarks>
            <![CDATA[
             Upload can be done in 2 different ways:
             <ol>
            <li>Single file upload. You should set Content-Type &amp; Content-Disposition header to specify filename and content type, and send file in request body</li>
            <li>Using standart multipart/form-data method</li>
            </ol>]]>
            </remarks>
            <param name="file" visible="false">Request Input stream</param>
            <param name="contentType" visible="false">Content-Type Header</param>
            <param name="contentDisposition" visible="false">Content-Disposition Header</param>
            <param name="files" visible="false">List of files when posted as multipart/form-data</param>
            <returns>Uploaded file</returns>
            <path>api/2.0/files/@common/upload</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.UploadFile(System.String,System.IO.Stream,System.Net.Mime.ContentType,System.Net.Mime.ContentDisposition,System.Collections.Generic.IEnumerable{System.Web.HttpPostedFileBase},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Uploads the file specified with single file upload or standart multipart/form-data method to the selected folder
            </summary>
            <short>Upload file</short>
            <category>Uploads</category>
            <remarks>
            <![CDATA[
             Upload can be done in 2 different ways:
             <ol>
            <li>Single file upload. You should set Content-Type &amp; Content-Disposition header to specify filename and content type, and send file in request body</li>
            <li>Using standart multipart/form-data method</li>
            </ol>]]>
            </remarks>
            <param method="url" name="folderId">Folder ID to upload to</param>
            <param name="file" visible="false">Request Input stream</param>
            <param name="contentType" visible="false">Content-Type Header</param>
            <param name="contentDisposition" visible="false">Content-Disposition Header</param>
            <param name="files" visible="false">List of files when posted as multipart/form-data</param>
            <param name="createNewIfExist" visible="false">Create New If Exist</param>
            <param name="storeOriginalFileFlag" visible="false">If True, upload documents in original formats as well</param>
            <param name="keepConvertStatus" visible="false">Keep status conversation after finishing</param>
            <returns>Uploaded file</returns>
            <path>api/2.0/files/{folderId}/upload</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.InsertFileToMy(System.IO.Stream,System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Uploads the file specified with single file upload to Common section
            </summary>
            <short>Insert to My</short>
            <param name="file" visible="false">Request Input stream</param>
            <param name="title">Name of file which has to be uploaded</param>
            <param name="createNewIfExist" visible="false">Create New If Exist</param>
            <param name="keepConvertStatus" visible="false">Keep status conversation after finishing</param>
            <category>Uploads</category>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"></returns>
            <path>api/2.0/files/@my/insert</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.InsertFileToCommon(System.IO.Stream,System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Uploads the file specified with single file upload to Common section
            </summary>
            <short>Insert to Common</short>
            <param name="file" visible="false">Request Input stream</param>
            <param name="title">Name of file which has to be uploaded</param>
            <param name="createNewIfExist" visible="false">Create New If Exist</param>
            <param name="keepConvertStatus" visible="false">Keep status conversation after finishing</param>
            <category>Uploads</category>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"></returns>
            <path>api/2.0/files/@common/insert</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.InsertFile(System.String,System.IO.Stream,System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Uploads the file specified with single file upload
            </summary>
            <param method="url" name="folderId">Folder ID to upload to</param>
            <param name="file" visible="false">Request Input stream</param>
            <param name="title">Name of file which has to be uploaded</param>
            <param name="createNewIfExist" visible="false">Create New If Exist</param>
            <param name="keepConvertStatus" visible="false">Keep status conversation after finishing</param>
            <category>Uploads</category>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"></returns>
            <path>api/2.0/files/{folderId}/insert</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.UpdateFileStream(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>
            Update file content
            </summary>
            <category>Files</category>
            <param name="file">Stream of file</param>
            <param method="url" name="fileId">File ID</param>
            <param name="encrypted" visible="false"></param>
            <param name="forcesave" visible="false"></param>
            <path>api/2.0/files/{fileId}/update</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"></returns>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.SaveEditing(System.String,System.String,System.String,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Save file 
            </summary>
            <short>Editing save</short>
            <param method="url" name="fileId">File ID</param>
            <param name="fileExtension"></param>
            <param name="downloadUri"></param>
            <param name="stream"></param>
            <param name="doc"></param>
            <param name="forcesave"></param>
            <category>Files</category>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"></returns>
            <path>api/2.0/files/file/{fileId}/saveediting</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.StartEdit(System.String,System.Boolean,System.String)">
            <summary>
            Lock file when editing
            </summary>
            <short>Editing start</short>
            <param method="url" name="fileId">File ID</param>
            <param name="editingAlone" visible="false"></param>
            <param name="doc" visible="false"></param>
            <category>Files</category>
            <returns>File key for Document Service</returns>
            <path>api/2.0/files/file/{fileId}/startedit</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.TrackEditFile(System.String,System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Continue to lock file when editing
            </summary>
            <short>Editing track</short>
            <param method="url" name="fileId">File ID</param>
            <param name="tabId" visible="false"></param>
            <param name="docKeyForTrack" visible="false"></param>
            <param name="doc" visible="false"></param>
            <param method="url" name="isFinish">for unlock</param>
            <category>Files</category>
            <returns></returns>
            <path>api/2.0/files/file/{fileId}/trackeditfile</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.OpenEdit(System.String,System.Int32,System.String)">
            <summary>
            Get initialization configuration for open editor
            </summary>
            <short>Editing open</short>
            <param method="url" name="fileId">File ID</param>
            <param method="url" name="version">File version</param>
            <param method="url" name="doc" visible="false"></param>
            <category>Files</category>
            <returns type="ASC.Web.Files.Services.DocumentService.Configuration, ASC.Web.Files">Configuration</returns>
            <path>api/2.0/files/file/{fileId}/openedit</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateUploadSession(System.String,System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            Creates session to upload large files in multiple chunks.
            </summary>
            <short>Chunked upload</short>
            <category>Uploads</category>
            <param method="url" name="folderId">Id of the folder in which file will be uploaded</param>
            <param name="fileName">Name of file which has to be uploaded</param>
            <param name="fileSize">Length in bytes of file which has to be uploaded</param>
            <param name="relativePath">Relative folder from folderId</param>
            <param name="encrypted" visible="false"></param>
            <remarks>
            <![CDATA[
            Each chunk can have different length but its important what length is multiple of <b>512</b> and greater or equal than <b>5 mb</b>. Last chunk can have any size.
            After initial request respond with status 200 OK you must obtain value of 'location' field from the response. Send all your chunks to that location.
            Each chunk must be sent in strict order in which chunks appears in file.
            After receiving each chunk if no errors occured server will respond with current information about upload session.
            When number of uploaded bytes equal to the number of bytes you send in initial request server will respond with 201 Created and will send you info about uploaded file.
            ]]>
            </remarks>
            <returns>
            <![CDATA[
            Information about created session. Which includes:
            <ul>
            <li><b>id:</b> unique id of this upload session</li>
            <li><b>created:</b> UTC time when session was created</li>
            <li><b>expired:</b> UTC time when session will be expired if no chunks will be sent until that time</li>
            <li><b>location:</b> URL to which you must send your next chunk</li>
            <li><b>bytes_uploaded:</b> If exists contains number of bytes uploaded for specific upload id</li>
            <li><b>bytes_total:</b> Number of bytes which has to be uploaded</li>
            </ul>
            ]]>
            </returns>
            <path>api/2.0/files/{folderId}/upload/create_session</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateTextFileInMy(System.String,System.String)">
            <summary>
            Creates a text (.txt) file in My section with the title and contents sent in the request
            </summary>
            <short>Create txt in My</short>
            <category>Files</category>
            <param name="title">File title</param>
            <param name="content">File contents</param>
            <returns>Folder contents</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateTextFileInCommon(System.String,System.String)">
            <summary>
            Creates a text (.txt) file in Common Documents section with the title and contents sent in the request
            </summary>
            <short>Create txt in Common</short>
            <category>Files</category>
            <param name="title">File title</param>
            <param name="content">File contents</param>
            <returns>Folder contents</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateTextFile(System.String,System.String,System.String)">
            <summary>
            Creates a text (.txt) file in the selected folder with the title and contents sent in the request
            </summary>
            <short>Create txt</short>
            <category>Files</category>
            <param name="folderId">Folder ID</param>
            <param name="title">File title</param>
            <param name="content">File contents</param>
            <returns>Folder contents</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateHtmlFile(System.String,System.String,System.String)">
            <summary>
            Creates an html (.html) file in the selected folder with the title and contents sent in the request
            </summary>
            <short>Create html</short>
            <category>Files</category>
            <param name="folderId">Folder ID</param>
            <param name="title">File title</param>
            <param name="content">File contents</param>
            <returns>Folder contents</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateHtmlFileInMy(System.String,System.String)">
            <summary>
            Creates an html (.html) file in My section with the title and contents sent in the request
            </summary>
            <short>Create html in My</short>
            <category>Files</category>
            <param name="title">File title</param>
            <param name="content">File contents</param>
            <returns>Folder contents</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateHtmlFileInCommon(System.String,System.String)">
            <summary>
            Creates an html (.html) file in Common section with the title and contents sent in the request
            </summary>
            <short>Create html in Common</short>
            <category>Files</category>
            <param name="title">File title</param>
            <param name="content">File contents</param>
            <returns>Folder contents</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateFolder(System.String,System.String)">
            <summary>
            Creates a new folder with the title sent in the request. The ID of a parent folder can be also specified.
            </summary>
            <short>
            Create folder
            </short>
            <category>Folders</category>
            <param method="url" name="folderId">Parent folder ID</param>
            <param name="title">Title of new folder</param>
            <returns type="ASC.Api.Documents.FolderWrapper, ASC.Api.Documents">New folder contents</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateFile(System.String)">
            <summary>
            Creates a new file in the My section with the title sent in the request
            </summary>
            <short>Create file in My</short>
            <category>Files</category>
            <param name="title" remark="Allowed values: the file must have one of the following extensions: DOCX, XLSX, PPTX">File title</param>
            <remarks>In case the extension for the file title differs from DOCX/XLSX/PPTX and belongs to one of the known text, spreadsheet or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not set or is unknown, the DOCX extension will be added to the file title.</remarks>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">New file info</returns>
            <path>api/2.0/files/@my/file</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateFile(System.String,System.String,System.String)">
            <summary>
            Creates a new file in the specified folder with the title sent in the request
            </summary>
            <short>Create file</short>
            <category>Files</category>
            <param method="url" name="folderId">Folder ID</param>
            <param name="title" remark="Allowed values: the file must have one of the following extensions: DOCX, XLSX, PPTX">File title</param>
            <param name="templateId">File ID for using as template</param>
            <remarks>In case the extension for the file title differs from DOCX/XLSX/PPTX and belongs to one of the known text, spreadsheet or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not set or is unknown, the DOCX extension will be added to the file title.</remarks>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">New file info</returns>
            <path>api/2.0/files/{folderId}/file</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.RenameFolder(System.String,System.String)">
            <summary>
            Renames the selected folder to the new title specified in the request
            </summary>
            <short>
            Rename folder
            </short>
            <category>Folders</category>
            <param method="url" name="folderId">Folder ID</param>
            <param name="title">New title</param>
            <returns type="ASC.Api.Documents.FolderWrapper, ASC.Api.Documents">Folder contents</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFolderInfo(System.String)">
            <summary>
            Returns a detailed information about the folder with the ID specified in the request
            </summary>
            <param method="url" name="folderId"></param>
            <short>Folder information</short>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderWrapper, ASC.Api.Documents">Folder info</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFolderPath(System.String)">
            <summary>
            Returns parent folders
            </summary>
            <short>Folder path</short>
            <param method="url" name="folderId"></param>
            <category>Folders</category>
            <returns type="ASC.Api.Documents.FolderWrapper, ASC.Api.Documents">Parent folders</returns>
            <path>api/2.0/files/folder/{folderId}/path</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFileInfo(System.String,System.Int32)">
            <summary>
            Returns a detailed information about the file with the ID specified in the request
            </summary>
            <short>File information</short>
            <category>Files</category>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">File info</returns>
            <path>api/2.0/files/file/{fileId}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.UpdateFile(System.String,System.String,System.Int32)">
            <summary>
                Updates the information of the selected file with the parameters specified in the request
            </summary>
            <short>Update file info</short>
            <category>Files</category>
            <param method="url" name="fileId">File ID</param>
            <param name="title">New title</param>
            <param name="lastVersion">File last version number</param>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">File info</returns>
            <path>api/2.0/files/file/{fileId}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DeleteFile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the file with the ID specified in the request
            </summary>
            <short>Delete file</short>
            <category>Operations</category>
            <param method="url" name="fileId">File ID</param>
            <param name="deleteAfter">Delete after finished</param>
            <param name="immediately">Don't move to the Recycle Bin</param>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/file/{fileId}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.StartConversion(System.String)">
            <summary>
             Start conversion operation
            </summary>
            <short>Convert start</short>
            <category>Operations</category>
            <param method="url" name="fileId"></param>
            <returns type="ASC.Api.Documents.DocumentsApi.ConversationResult, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/file/{fileId}/checkconversion</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CheckConversion(System.String,System.Boolean)">
            <summary>
             Check conversion status
            </summary>
            <short>Convert status</short>
            <category>Operations</category>
            <param method="url" name="fileId"></param>
            <param method="url" name="start"></param>
            <returns type="ASC.Api.Documents.DocumentsApi.ConversationResult, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/file/{fileId}/checkconversion</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DeleteFolder(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the folder with the ID specified in the request
            </summary>
            <short>Delete folder</short>
            <category>Operations</category>
            <param method="url" name="folderId">Folder ID</param>
            <param name="deleteAfter">Delete after finished</param>
            <param name="immediately">Don't move to the Recycle Bin</param>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/folder/{folderId}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.MoveOrCopyBatchCheck(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checking for conflicts
            </summary>
            <category>Operations</category>
            <param method="url" name="destFolderId">Destination folder ID</param>
            <param method="url" name="folderIds">Folder ID list</param>
            <param method="url" name="fileIds">File ID list</param>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">Conflicts file ids</returns>
            <path>api/2.0/files/fileops/move</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.MoveBatchItems(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},ASC.Web.Files.Services.WCFService.FileOperations.FileConflictResolveType,System.Boolean)">
            <summary>
              Moves all the selected files and folders to the folder with the ID specified in the request
            </summary>
            <short>Move to folder</short>
            <category>Operations</category>
            <param name="destFolderId">Destination folder ID</param>
            <param name="folderIds">Folder ID list</param>
            <param name="fileIds">File ID list</param>
            <param name="conflictResolveType">Overwriting behavior: skip(0), overwrite(1) or duplicate(2)</param>
            <param name="deleteAfter">Delete after finished</param>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops/move</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CopyBatchItems(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},ASC.Web.Files.Services.WCFService.FileOperations.FileConflictResolveType,System.Boolean)">
            <summary>
              Copies all the selected files and folders to the folder with the ID specified in the request
            </summary>
            <short>Copy to folder</short>
            <category>Operations</category>
            <param name="destFolderId">Destination folder ID</param>
            <param name="folderIds">Folder ID list</param>
            <param name="fileIds">File ID list</param>
            <param name="conflictResolveType">Overwriting behavior: skip(0), overwrite(1) or duplicate(2)</param>
            <param name="deleteAfter">Delete after finished</param>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops/copy</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.MarkAsRead(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Marks all files and folders as read
            </summary>
            <short>Mark as read</short>
            <category>Operations</category>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops/markasread</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.TerminateTasks">
            <summary>
             Finishes all the active Operations
            </summary>
            <short>Finish all</short>
            <category>Operations</category>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops/terminate</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetOperationStatuses">
            <summary>
             Returns the list of all active Operations
            </summary>
            <short>Operations list</short>
            <category>Operations</category>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.BulkDownload(System.Collections.Generic.IEnumerable{ASC.Api.Collections.ItemKeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Start downlaod process of files and folders with ID
            </summary>
            <short>Finish Operations</short>
            <param name="fileConvertIds" visible="false">File ID list for download with convert to format</param>
            <param name="fileIds">File ID list</param>
            <param name="folderIds">Folder ID list</param>
            <category>Operations</category>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops/bulkdownload</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DeleteBatchItems(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
              Deletes the files and folders with the IDs specified in the request
            </summary>
            <param name="folderIds">Folder ID list</param>
            <param name="fileIds">File ID list</param>
            <param name="deleteAfter">Delete after finished</param>
            <param name="immediately">Don't move to the Recycle Bin</param>
            <short>Delete files and folders</short>
            <category>Operations</category>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops/delete</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.EmptyTrash">
            <summary>
              Deletes all files and folders from the recycle bin
            </summary>
            <short>Clear recycle bin</short>
            <category>Operations</category>
            <returns type="ASC.Api.Documents.FileOperationWraper, ASC.Api.Documents">Operation result</returns>
            <path>api/2.0/files/fileops/emptytrash</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFileVersionInfo(System.String)">
            <summary>
            Returns the detailed information about all the available file versions with the ID specified in the request
            </summary>
            <short>File versions</short>
            <category>Files</category>
            <param method="url" name="fileId">File ID</param>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">File information</returns>
            <path>api/2.0/files/file/{fileId}/history</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.ChangeHistory(System.String,System.Int32,System.Boolean)">
            <summary>
            Change version history
            </summary>
            <param method="url" name="fileId">File ID</param>
            <param name="version">Version of history</param>
            <param name="continueVersion">Mark as version or revision</param>
            <category>Files</category>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"></returns>
            <path>api/2.0/files/file/{fileId}/history</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFileSecurityInfo(System.String)">
            <summary>
            Returns the detailed information about shared file with the ID specified in the request
            </summary>
            <short>File sharing</short>
            <category>Sharing</category>
            <param method="url" name="fileId">File ID</param>
            <returns type="ASC.Api.Documents.FileShareWrapper, ASC.Api.Documents">Shared file information</returns>
            <path>api/2.0/files/file/{fileId}/share</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetFolderSecurityInfo(System.String)">
            <summary>
            Returns the detailed information about shared folder with the ID specified in the request
            </summary>
            <short>Folder sharing</short>
            <param method="url" name="folderId">Folder ID</param>
            <category>Sharing</category>
            <returns type="ASC.Api.Documents.FileShareWrapper, ASC.Api.Documents">Shared folder information</returns>
            <path>api/2.0/files/folder/{folderId}/share</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.SetFileSecurityInfo(System.String,System.Collections.Generic.IEnumerable{ASC.Api.Documents.FileShareParams},System.Boolean,System.String)">
            <summary>
            Sets sharing settings for the file with the ID specified in the request
            </summary>
            <param method="url" name="fileId">File ID</param>
            <param file="ASC.Api.Documents" name="share">Collection of sharing rights</param>
            <param name="notify">Should notify people</param>
            <param name="sharingMessage">Sharing message to send when notifying</param>
            <short>Share file</short>
            <category>Sharing</category>
            <remarks>
            Each of the FileShareParams must contain two parameters: 'ShareTo' - ID of the user with whom we want to share and 'Access' - access type which we want to grant to the user (Read, ReadWrite, etc) 
            </remarks>
            <returns type="ASC.Api.Documents.FileShareWrapper, ASC.Api.Documents">Shared file information</returns>
            <path>api/2.0/files/file/{fileId}/share</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.SetFolderSecurityInfo(System.String,System.Collections.Generic.IEnumerable{ASC.Api.Documents.FileShareParams},System.Boolean,System.String)">
            <summary>
            Sets sharing settings for the folder with the ID specified in the request
            </summary>
            <short>Share folder</short>
            <param method="url" name="folderId">Folder ID</param>
            <param file="ASC.Api.Documents" name="share">Collection of sharing rights</param>
            <param name="notify">Should notify people</param>
            <param name="sharingMessage">Sharing message to send when notifying</param>
            <remarks>
            Each of the FileShareParams must contain two parameters: 'ShareTo' - ID of the user with whom we want to share and 'Access' - access type which we want to grant to the user (Read, ReadWrite, etc) 
            </remarks>
            <category>Sharing</category>
            <returns type="ASC.Api.Documents.FileShareWrapper, ASC.Api.Documents">Shared folder information</returns>
            <path>api/2.0/files/folder/{folderId}/share</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.RemoveSecurityInfo(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Removes sharing rights for the group with the ID specified in the request
            </summary>
            <param name="folderIds">Folders ID</param>
            <param name="fileIds">Files ID</param>
            <short>Remove group sharing rights</short>
            <category>Sharing</category>
            <returns>Shared file information</returns>
            <path>api/2.0/files/share</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GenerateSharedLink(System.String,ASC.Files.Core.Security.FileShare)">
            <summary>
              Returns the external link to the shared file with the ID specified in the request
            </summary>
            <short>Shared link</short>
            <param method="url" name="fileId">File ID</param>
            <param name="share">Access right</param>
            <category>Sharing</category>
            <returns>Shared file link</returns>
            <path>api/2.0/files/{fileId}/sharedlink</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.Capabilities">
            <summary>
              Get a list of available providers
            </summary>
            <category>Third-Party Integration</category>
            <returns>List of provider key</returns>
            <remarks>List of provider key: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive</remarks>
            <returns></returns>
            <path>api/2.0/files/thirdparty/capabilities</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.SaveThirdParty(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
              Saves the third party file storage service account
            </summary>
            <short>Save third party account</short>
            <param name="url">Connection url for SharePoint</param>
            <param name="login">Login</param>
            <param name="password">Password</param>
            <param name="token">Authentication token</param>
            <param name="isCorporate"></param>
            <param name="customerTitle">Title</param>
            <param name="providerKey">Provider Key</param>
            <param name="providerId">Provider ID</param>
            <category>Third-Party Integration</category>
            <returns type="ASC.Api.Documents.FolderWrapper, ASC.Api.Documents">Folder contents</returns>
            <remarks>List of provider key: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive</remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <path>api/2.0/files/thirdparty</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetThirdPartyAccounts">
            <summary>
               Returns the list of all connected third party services
            </summary>
            <category>Third-Party Integration</category>
            <short>Third party list</short>
            <returns type="ASC.Web.Files.Services.WCFService.ThirdPartyParams, ASC.Web.Files">Connected providers</returns>
            <path>api/2.0/files/thirdparty</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetCommonThirdPartyFolders">
            <summary>
               Returns the list of third party services connected in the Common section
            </summary>
            <category>Third-Party Integration</category>
            <short>Third party folder</short>
            <returns type="ASC.Files.Core.Folder, ASC.Web.Files">Connected providers folder</returns>
            <path>api/2.0/files/thirdparty/common</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DeleteThirdParty(System.Int32)">
             <summary>
               Removes the third party file storage service account with the ID specified in the request
             </summary>
             <param method="url" name="providerId">Provider ID. Provider id is part of folder id.
             Example, folder id is "sbox-123", then provider id is "123"
             </param>
             <short>Remove third party account</short>
             <category>Third-Party Integration</category>
             <returns>Folder id</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <path>api/2.0/files/thirdparty/{providerId}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.Search(System.String)">
            <summary>
            Search files
            </summary>
            <param method="url" name="query">Queary string</param>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">Files and folders</returns>
            <path>api/2.0/files/@search/{query}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.AddFavorites(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adding files to favorite list
            </summary>
            <short>Favorite add</short>
            <category>Files</category>
            <param name="folderIds" visible="false"></param>
            <param name="fileIds">File IDs</param>
            <returns></returns>
            <path>api/2.0/files/favorites</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DeleteFavorites(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removing files from favorite list
            </summary>
            <short>Favorite delete</short>
            <category>Files</category>
            <param name="folderIds" visible="false"></param>
            <param name="fileIds">File IDs</param>
            <returns></returns>
            <path>api/2.0/files/favorites</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.AddTemplates(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adding files to template list
            </summary>
            <short>Template add</short>
            <category>Files</category>
            <param name="fileIds">File IDs</param>
            <returns></returns>
            <path>api/2.0/files/templates</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DeleteTemplates(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removing files from template list
            </summary>
            <short>Template delete</short>
            <category>Files</category>
            <param name="fileIds">File IDs</param>
            <returns></returns>
            <path>api/2.0/files/templates</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.StoreOriginal(System.Boolean)">
            <summary>
            Store file in original formats when upload and convert
            </summary>
            <param name="set"></param>
            <category>Settings</category>
            <returns></returns>
            <path>api/2.0/files/storeoriginal</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.HideConfirmConvert(System.Boolean)">
            <summary>
            Do not show the confirmation dialog
            </summary>
            <param name="save"></param>
            <category>Settings</category>
            <visible>false</visible>
            <returns></returns>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.UpdateIfExist(System.Boolean)">
            <summary>
            Update the file version if the same name is exist
            </summary>
            <param name="set"></param>
            <category>Settings</category>
            <returns></returns>
            <path>api/2.0/files/updateifexist</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DisplayRecent(System.Boolean)">
            <summary>
            Display recent folder
            </summary>
            <param name="set"></param>
            <category>Settings</category>
            <returns></returns>
            <path>api/2.0/files/displayRecent</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DisplayFavorite(System.Boolean)">
            <summary>
            Display favorite folder
            </summary>
            <param name="set"></param>
            <category>Settings</category>
            <returns></returns>
            <path>api/2.0/files/settings/favorites</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DisplayTemplates(System.Boolean)">
            <summary>
            Display template folder
            </summary>
            <param name="set"></param>
            <category>Settings</category>
            <returns></returns>
            <path>api/2.0/files/settings/templates</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CheckDocServiceUrl(System.String,System.String,System.String)">
            <summary>
             Checking document service location
            </summary>
            <param name="docServiceUrl">Document editing service Domain</param>
            <param name="docServiceUrlInternal">Document command service Domain</param>
            <param name="docServiceUrlPortal">Community Server Address</param>
            <category>Settings</category>
            <returns></returns>
            <path>api/2.0/files/docservice</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetDocServiceUrl(System.Boolean)">
            <summary>
            Get the address of connected editors
            </summary>
            <category>Settings</category>
            <param name="version" visible="false"></param>
            <returns>Address</returns>
            <path>api/2.0/files/docservice</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetWordpressInfo">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.DeleteWordpressInfo">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.WordpressSave(System.String)">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.CreateWordpressPost(System.String,System.String,System.String,System.Int32)">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetEasybibCitationList(System.Int32,System.String)">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.GetEasybibStyles">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.DocumentsApi.EasyBibCitationBook(System.String)">
            <visible>false</visible>
        </member>
        <member name="T:ASC.Api.Documents.DocumentsApi.ConversationResult">
            <summary>
            Result of file conversation operation.
            </summary>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.ConversationResult.Id">
            <summary>
            Operation Id.
            </summary>
            <example name="id">d5490cba-a5e6-40db-acb2-94203dba12d6</example>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.ConversationResult.OperationType">
            <summary>
            Operation type.
            </summary>
            <example type="int" name="operation">6</example>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.ConversationResult.Progress">
            <summary>
            Operation progress.
            </summary>
            <example type="int" name="progress">30</example>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.ConversationResult.Source">
            <summary>
            Source files for operation.
            </summary>
            <example name="source">source</example>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.ConversationResult.File">
            <summary>
            Result file of operation.
            </summary>
            <type name="result">ASC.Api.Documents.FileWrapper, ASC.Api.Documents</type>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.ConversationResult.Error">
            <summary>
            Error during conversation.
            </summary>
            <example name="error"></example>
        </member>
        <member name="P:ASC.Api.Documents.DocumentsApi.ConversationResult.Processed">
            <summary>
            Is operation processed.
            </summary>
            <example name="processed">1</example>
        </member>
        <member name="T:ASC.Api.Documents.FileEntryWrapper">
            <summary>
            </summary>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.Id">
            <summary>
            </summary>
            <example type="int">857864274</example>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.Title">
            <summary>
            </summary>
            <example>Some titile.txt</example>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.Access">
            <summary>
            </summary>
            <example type="int">1</example>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.Shared">
            <summary>
            </summary>
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.Created">
            <summary>
            </summary>
            <example>2020-12-13T17:13:31.5902727Z</example>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.CreatedBy">
            <summary>
            </summary>
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
            <order>51</order>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.Updated">
            <summary>
            </summary>
            <example>2020-12-13T17:13:31.5902727Z</example>
            <order>52</order>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.RootFolderType">
            <summary>
            </summary>
            <example type="int">2</example>
            <order>41</order>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.UpdatedBy">
            <summary>
            </summary>
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
            <order>41</order>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.ProviderItem">
            <summary>
            </summary>
            <example>true</example>
            <order>55</order>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.ProviderKey">
            <summary>
            </summary>
             <example>1234d</example>
            <order>56</order>
        </member>
        <member name="P:ASC.Api.Documents.FileEntryWrapper.ProviderId">
            <summary>
            </summary>
             <example type="int">1234</example>
            <order>57</order>
        </member>
        <member name="M:ASC.Api.Documents.FileEntryWrapper.#ctor(ASC.Files.Core.FileEntry)">
            <summary>
            
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:ASC.Api.Documents.FileEntryWrapper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ASC.Api.Documents.FileShareParams">
            <summary>
            </summary>
        </member>
        <member name="P:ASC.Api.Documents.FileShareParams.ShareTo">
            <summary>
            </summary>
            <example name="shareTo">2fdfe577-3c26-4736-9df9-b5a683bb8520</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Documents.FileShareParams.Access">
            <summary>
            </summary>
            <example name="access">0</example>
            <order>1</order>
        </member>
        <member name="M:ASC.Api.Documents.FileShareParams.ToAceObject">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASC.Api.Documents.FileShareWrapper">
            <summary>
            </summary>
        </member>
        <member name="M:ASC.Api.Documents.FileShareWrapper.#ctor(ASC.Web.Files.Services.WCFService.AceWrapper)">
            <summary>
            </summary>
            <param name="aceWrapper"></param>
        </member>
        <member name="P:ASC.Api.Documents.FileShareWrapper.Access">
            <summary>
            </summary>
            <example type="int">1</example>
        </member>
        <member name="P:ASC.Api.Documents.FileShareWrapper.SharedTo">
            <summary>
            </summary>
            <object>
                <member>
                    <example name="id">00000000-0000-0000-0000-000000000000</example>
                </member>
                <member>
                    <example name="displayName">Mike Zanyatski</example>
                </member>
                <member>
                    <example name="title">Manager</example>
                </member>
                <member>
                    <example name="avatarSmall">url to small avatar</example>
                </member>
                <member>
                    <example name="profileUrl"></example>
                </member>
            </object>
        </member>
        <member name="P:ASC.Api.Documents.FileShareWrapper.IsLocked">
            <summary>
            </summary>
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Documents.FileShareWrapper.IsOwner">
            <summary>
            </summary>
            <example>true</example>
        </member>
        <member name="M:ASC.Api.Documents.FileShareWrapper.GetSample">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASC.Api.Documents.FileShareLink">
            <summary>
            </summary>
        </member>
        <member name="F:ASC.Api.Documents.FileShareLink.Id">
            <summary>
            </summary>
        </member>
        <member name="F:ASC.Api.Documents.FileShareLink.ShareLink">
            <summary>
            </summary>
        </member>
        <member name="T:ASC.Api.Documents.FileWrapper">
            <summary>
            </summary>
            <inherited>ASC.Api.Documents.FileEntryWrapper, ASC.Api.Documents</inherited>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.FolderId">
            <summary>
            </summary>
            <example type="int">12334</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.Version">
            <summary>
            </summary>
            <example type="int">3</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.VersionGroup">
            <summary>
            </summary>
            <example type="int">1</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.ContentLength">
            <summary>
            </summary>
            <example>12.06 KB</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.PureContentLength">
            <summary>
            </summary>
            <example type="int">12345</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.FileStatus">
            <summary>
            </summary>
            <example type="int">2</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.ViewUrl">
            <summary>
            </summary>
            <example>http:\/\/www.onlyoffice.com\/viewfile?fileid=2221</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.WebUrl">
            <summary>
            </summary>
            <example>http:\/\/www.onlyoffice.com\/viewfile?fileid=2221</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.FileType">
            <summary>
                
            </summary>
            <example type="int">7</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.FileExst">
            <summary>
                
            </summary>
            <example>.txt</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.Comment">
            <summary>
            </summary>
            <example>null</example>
        </member>
        <member name="P:ASC.Api.Documents.FileWrapper.Encrypted">
            <summary>
            </summary>
            <example>true</example>
        </member>
        <member name="M:ASC.Api.Documents.FileWrapper.#ctor(ASC.Files.Core.File)">
            <summary>
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:ASC.Api.Documents.FileWrapper.GetSample">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASC.Api.Documents.FolderContentWrapper">
            <summary>
            </summary>
        </member>
        <member name="P:ASC.Api.Documents.FolderContentWrapper.Files">
            <summary>
            </summary>
            <type>ASC.Api.Documents.FileWrapper, ASC.Api.Documents</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Documents.FolderContentWrapper.Folders">
            <summary>
            </summary>
            <type>ASC.Api.Documents.FolderWrapper, ASC.Api.Documents</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Documents.FolderContentWrapper.Current">
            <summary>
            </summary>
            <type>ASC.Api.Documents.FolderWrapper, ASC.Api.Documents</type>
        </member>
        <member name="P:ASC.Api.Documents.FolderContentWrapper.PathParts">
            <summary>
            </summary>
        </member>
        <member name="P:ASC.Api.Documents.FolderContentWrapper.StartIndex">
            <summary>
            </summary>
            <example type="int">0</example>
        </member>
        <member name="P:ASC.Api.Documents.FolderContentWrapper.Count">
            <summary>
            </summary>
            <example type="int">4</example>
        </member>
        <member name="P:ASC.Api.Documents.FolderContentWrapper.Total">
            <summary>
            </summary>
            <example type="int">4</example>
        </member>
        <member name="M:ASC.Api.Documents.FolderContentWrapper.#ctor(ASC.Web.Files.Services.WCFService.DataWrapper,System.Int32)">
            <summary>
            </summary>
            <param name="folderItems"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:ASC.Api.Documents.FolderContentWrapper.GetSample">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASC.Api.Documents.FileOperationWraper">
            <summary>
            </summary>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Id">
            <summary>
            </summary>
            <example name="id">d5490cba-a5e6-40db-acb2-94203dba12d6</example>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.OperationType">
            <summary>
            </summary>
            <example type="int" name="operation">1</example>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Progress">
            <summary>
            </summary>
            <example type="int" name="progress">100</example>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Error">
            <summary>
            </summary>
            <example name="error"></example>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Processed">
            <summary>
            </summary>
            <example name="processed">1</example>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Finished">
            <summary>
            </summary>
            <example name="finished">false</example>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Url">
            <summary>
            </summary>
            <example name="url">null</example>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Files">
            <summary>
            </summary>
            <type name="files">ASC.Api.Documents.FileWrapper, ASC.Api.Documents</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Documents.FileOperationWraper.Folders">
            <summary>
            </summary>
            <type name="folders">ASC.Api.Documents.FolderWrapper, ASC.Api.Documents</type>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Documents.FileOperationWraper.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ASC.Api.Documents.FileOperationWraper.#ctor(ASC.Web.Files.Services.WCFService.FileOperations.FileOperationResult)">
            <summary>
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:ASC.Api.Documents.FileOperationWraper.GetSample">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASC.Api.Documents.FolderWrapper">
            <summary>
            </summary>
            <inherited>ASC.Api.Documents.FileEntryWrapper, ASC.Api.Documents</inherited>
        </member>
        <member name="P:ASC.Api.Documents.FolderWrapper.ParentId">
            <summary>
            </summary>
            <example type="int">1840746475</example>
        </member>
        <member name="P:ASC.Api.Documents.FolderWrapper.FilesCount">
            <summary>
            </summary>
            <example type="int">1840746475</example>
        </member>
        <member name="P:ASC.Api.Documents.FolderWrapper.FoldersCount">
            <summary>
            </summary>
            <example type="int">1840746475</example>
        </member>
        <member name="P:ASC.Api.Documents.FolderWrapper.IsShareable">
            <summary>
            </summary>
            <example>true</example>
        </member>
        <member name="M:ASC.Api.Documents.FolderWrapper.#ctor(ASC.Files.Core.Folder)">
            <summary>
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:ASC.Api.Documents.FolderWrapper.GetSample">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomApi.SetKeys(System.String,System.String)">
            <summary>
            
            </summary>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomApi.GetPublicKeysWithAccess(System.String)">
            <summary>
            
            </summary>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomApi.PrivacyRoom">
            <summary>
            
            </summary>
            <returns></returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Documents.PrivacyRoomApi.SetPrivacyRoom(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enable"></param>
            <returns></returns>
            <visible>false</visible>
        </member>
    </members>
</doc>
