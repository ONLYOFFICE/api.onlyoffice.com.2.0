<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASC.Api.Calendar</name>
    </assembly>
    <members>
        <member name="P:ASC.Api.Calendar.BusinessObjects.Calendar.SecurityId">
            <inheritdoc/>
        </member>
        <member name="P:ASC.Api.Calendar.BusinessObjects.Calendar.ObjectType">
            <inheritdoc/>
        </member>
        <member name="P:ASC.Api.Calendar.BusinessObjects.Todo.ObjectType">
            <inheritdoc/>
        </member>
        <member name="P:ASC.Api.Calendar.BusinessObjects.Event.ObjectType">
            <inheritdoc/>
        </member>
        <member name="T:ASC.Api.Calendar.iCalApiContentResponse">
            <name>calendar</name>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.#ctor(ASC.Api.Impl.ApiContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetEventDays(ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime)">
            <summary>
            Returns the list of all dates which contain the events from the displayed calendars
            </summary>
            <short>
            Calendar events
            </short>
            <param name="startDate">Period start date</param>
            <param name="endDate">Period end date</param>
            <returns>Date list</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.LoadCalendars(ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime)">
            <summary>
            Returns the list of calendars and subscriptions with the events for the current user for the selected period
            </summary>
            <short>
            Calendars and subscriptions
            </short>
            <param method="url" name="startDate">Period start date</param>
            <param method="url" name="endDate">Period end date</param>
            <httpMethod>GET</httpMethod>
            <path>api/2.0/calendar/calendars/{startDate}/{endDate}</path>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Calendar.Wrappers.CalendarWrapper, ASC.Api.Calendar">List of calendars and subscriptions with events</returns>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.LoadSubscriptions">
            <summary>
            Returns the list of all subscriptions available to the user
            </summary>
            <short>
            Subscription list
            </short>
            <returns type="ASC.Api.Calendar.Wrappers.SubscriptionWrapper, ASC.Api.Calendar">List of subscriptions</returns>
            <collection>list</collection>
            <path>api/2.0/calendar/subscriptions</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.ManageSubscriptions(System.Collections.Generic.IEnumerable{ASC.Api.Calendar.CalendarApi.SubscriptionState})">
            <summary>
            Updates the subscription state either subscribing or unsubscribing the user to/from it
            </summary>
            <short>
            Update subscription
            </short>
            <param name="states">Updated subscription states</param>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetCalendarById(System.String)">
            <summary>
            Returns the detailed information about the calendar with the ID specified in the request
            </summary>
            <short>
            Calendar by ID
            </short>
            <path>api/2.0/calendar/{calendarId}</path>
            <httpMethod>GET</httpMethod>
            <param name="calendarId">Calendar ID</param>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Calendar.Wrappers.CalendarWrapper,ASC.Api.Calendar">Calendar</returns>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.CreateCalendar(System.String,System.String,System.String,System.String,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Collections.Generic.List{ASC.Api.Calendar.CalendarApi.SharingParam},System.String,System.Int32)">
            <summary>
            Creates the new calendar with the parameters (name, description, color, etc.) specified in the request
            </summary>
            <short>
            Create calendar
            </short>
            <param name="name">Calendar name</param>
            <param name="description">Calendar description</param>
            <param name="textColor">Event text color</param>
            <param name="backgroundColor">Event background color</param>
            <param name="timeZone">Calendar time zone</param>
            <param name="alertType">Event alert type, in case alert type is set by default</param>
            <param name="sharingOptions">Calendar sharing options with other users</param>
            <param name="iCalUrl">iCal url</param>
            <param name="isTodo">Calendar for todo list</param>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>POST</httpMethod>
            <path>api/2.0/calendar</path>
            <returns type="ASC.Api.Calendar.Wrappers.CalendarWrapper,ASC.Api.Calendar">Created calendar</returns>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.UpdateCalendar(System.String,System.String,System.String,System.String,System.String,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Boolean,System.Collections.Generic.List{ASC.Api.Calendar.CalendarApi.SharingParam},System.String)">
            <summary>
            Updates the selected calendar with the parameters (name, description, color, etc.) specified in the request for the current user and access rights for other users
            </summary>
            <short>
            Update calendar
            </short>
            <param method="url" name="calendarId">Calendar ID</param>
            <param name="name">Calendar new name</param>
            <param name="description">Calendar new description</param>
            <param name="textColor">Event text color</param>
            <param name="backgroundColor">Event background color</param>
            <param name="timeZone">Calendar time zone</param>
            <param name="alertType">Event alert type, in case alert type is set by default</param>
            <param name="hideEvents">Display type: show or hide events in calendar</param>
            <param name="sharingOptions">Calendar sharing options with other users</param>
            <param name="iCalUrl">iCal url</param>
            <returns type="ASC.Api.Calendar.Wrappers.CalendarWrapper, ASC.Api.Calendar">Updated calendar</returns>
            <path>api/2.0/calendar/{calendarId}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.UpdateCalendarView(System.String,System.String,System.String,System.String,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Boolean)">
            <summary>
            Change the calendar display parameters specified in the request for the current user
            </summary>
            <short>
            Update calendar user view
            </short>
            <param method="url" name="calendarId">Calendar ID</param>
            <param name="name">Calendar name</param>
            <param name="textColor">Event text color</param>
            <param name="backgroundColor">Event background color</param>
            <param name="timeZone">Calendar time zone</param>
            <param name="alertType">Event alert type, in case alert type is set by default</param>
            <param name="hideEvents">Display type: show or hide events in calendar</param>
            <returns type="ASC.Api.Calendar.Wrappers.CalendarWrapper, ASC.Api.Calendar" >Updated calendar</returns>
            <path>api/2.0/calendar/{calendarId}/view</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.RemoveCalendar(System.Int32)">
            <summary>
            Deletes the calendar with the ID specified in the request
            </summary>
            <short>
            Delete calendar
            </short>
            <param method="url" name="calendarId">Calendar ID</param>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>DELETE</httpMethod>
            <path>api/2.0/calendar/{calendarId}</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetCalendariCalUrl(System.String)">
            <summary>
            Returns the link for the iCal associated with the calendar with the ID specified in the request
            </summary>
            <short>
            Get iCal link
            </short>
            <param method="url" name="calendarId">Calendar ID</param>
            <returns>iCal link</returns>
            <path>api/2.0/calendar/{calendarId}/icalurl</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetCalendarCalDavUrl(System.String)">
            <summary>
            Returns the link for the CalDav associated with the calendar with the ID specified in the request
            </summary>
            <short>
            Get CalDav link
            </short>
            <param method="url" name="calendarId">Calendar ID</param>
            <returns>CalDav link</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <path>api/2.0/calendar/{calendarId}/caldavurl</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.ChangeOfCalendarStorage(System.String,System.String)">
            <summary>
            Run caldav event update function
            </summary>
            <short>
            Update CalDav Event
            </short>
            <param name="change">changes of event</param>
            <param name="key"></param>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.CaldavDeleteEvent(System.String,System.String)">
            <summary>
            Run caldav event delete function
            </summary>
            <short>
            Delete CalDav Event
            </short>
            <param name="eventInfo">event info</param>
            <param name="key"></param>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetCalendariCalStream(System.String,System.String)">
            <summary>
            Returns the feed for the iCal associated with the calendar by its ID and signagure specified in the request
            </summary>
            <short>Get iCal feed</short>
            <param method="url" name="calendarId">Calendar ID</param>
            <param method="url" name="signature">Signature</param>
            <remarks>To get the feed you need to use the method returning the iCal feed link (it will generate the necessary signature)</remarks>
            <returns>Calendar iCal feed</returns>
            <httpMethod>GET</httpMethod>
            <path>api/2.0/calendar/{calendarId}/ical/{signature}</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.ImportEvents(System.Collections.Generic.IEnumerable{System.Web.HttpPostedFileBase})">
            <summary>
            Imports the events from the iCal files
            </summary>
            <short>
            Import iCal
            </short>
            <param name="files">iCal formatted files with the events to be imported</param>
            <returns>Returns the number of imported events</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>GET</httpMethod>
            <path>api/2.0/calendar/import</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.ImportEvents(System.Int32,System.Collections.Generic.IEnumerable{System.Web.HttpPostedFileBase})">
            <summary>
            Imports the events from the iCal files to the existing calendar
            </summary>
            <short>
            Import iCal
            </short>
            <param method="url" name="calendarId">ID for the calendar which serves as the future storage base for the imported events</param>
            <param name="files">iCal formatted files with the events to be imported</param>
            <returns>Returns the number of imported events</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <path>api/2.0/calendar/{calendarId}/import</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.ImportEvents(System.Int32,System.String)">
            <summary>
            Imports the events from the iCal files
            </summary>
            <short>
            Import iCal
            </short>
            <param name="calendarId">Calendar ID</param>
            <param name="iCalString">iCal formatted string</param>
            <returns>Returns the number of imported events</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <path>api/2.0/calendar/importIcs</path>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.CreateCalendarStream(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a calendar by the link to the external iCal feed
            </summary>
            <short>
            Create calendar
            </short>
            <param name="iCalUrl">Link to the external iCal feed</param>
            <param name="name">Calendar name</param>
            <param name="textColor">Event text name</param>
            <param name="backgroundColor">Event background name</param>
            <path>api/2.0/calendar/calendarUrl</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Calendar.Wrappers.CalendarWrapper, ASC.Api.Calendar">Created calendar</returns>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.AddEvent(System.String,System.String,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Boolean,System.Collections.Generic.List{ASC.Api.Calendar.CalendarApi.SharingParam})">
            <summary>
            Creates the new event in the default calendar with the parameters specified in the request
            </summary>
            <short>
            Create new event
            </short>
            <param name="name">Event name</param>
            <param name="description">Event description</param>
            <param name="startDate">Event start date</param>
            <param name="endDate">Event end date</param>
            <param name="repeatType">Event recurrence type (RRULE string in iCal format)</param>
            <param name="alertType">Event notification type</param>
            <param name="isAllDayLong">Event duration type: all day long or not</param>
            <param name="sharingOptions">Event sharing access parameters</param>
            <path>api/2.0/calendar/event</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
            <returns type="ASC.Api.Calendar.Wrappers.EventWrapper, ASC.Api.Calendar">Event list</returns>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.AddEvent(System.Int32,System.String,System.String,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Boolean,System.Collections.Generic.List{ASC.Api.Calendar.CalendarApi.SharingParam})">
            <summary>
            Creates the new event in the selected calendar with the parameters specified in the request
            </summary>
            <short>
            Create new event
            </short>
            <param method="url" name="calendarId">ID of the calendar where the event is created</param>
            <param name="name">Event name</param>
            <param name="description">Event description</param>
            <param name="startDate">Event start date</param>
            <param name="endDate">Event end date</param>
            <param name="repeatType">Event recurrence type (RRULE string in iCal format)</param>
            <param name="alertType">Event notification type</param>
            <param name="isAllDayLong">Event duration type: all day long or not</param>
            <param name="sharingOptions">Event sharing access parameters</param>
            <path>api/2.0/calendar/{calendarId}/event</path>
            <httpMethod>POST</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Calendar.Wrappers.EventWrapper, ASC.Api.Calendar">Event list</returns>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.Update(System.String,System.Int32,System.String,System.String,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Boolean,System.Collections.Generic.List{ASC.Api.Calendar.CalendarApi.SharingParam},ASC.Web.Core.Calendars.EventStatus)">
            <summary>
            Updates the existing event in the selected calendar with the parameters specified in the request
            </summary>
            <short>
            Update event
            </short>
            <param method="url" name="calendarId">ID of the calendar where the event belongs</param>
            <param method="url" name="eventId">Event ID</param>
            <param name="name">Event new name</param>
            <param name="description">Event new description</param>
            <param name="startDate">Event start date</param>
            <param name="endDate">Event end date</param>
            <param name="repeatType">Event recurrence type (RRULE string in iCal format)</param>
            <param name="alertType">Event notification type</param>
            <param name="isAllDayLong">Event duration type: all day long or not</param>
            <param name="sharingOptions">Event sharing access parameters</param>
            <param name="status">Event status</param>
            <returns type="ASC.Api.Calendar.Wrappers.EventWrapper, ASC.Api.Calendar">Updated event list</returns>
            <path>api/2.0/calendar/{calendarId}/{eventId}</path>
            <httpMethod>PUT</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.AddTodo(System.String,System.String)">
            <summary>
            Creates the new task in the selected calendar with the parameters specified in the request
            </summary>
            <short>
            Create new task
            </short>
            <param name="ics">Task in iCal format</param>
            <param name="todoUid">Task uid</param>
            <path>api/2.0/calendar/icstodo</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Calendar.Wrappers.TodoWrapper, ASC.Api.Calendar">Todo</returns>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.UpdateTodo(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates the existing task with the parameters specified in the request
            </summary>
            <short>
            Update task
            </short>
            <param name="todoId">Task ID</param>
            <param name="calendarId">ID of the calendar where the task belongs</param>
            <param name="ics">Task in iCal format</param>
            <param name="fromCalDavServer">bool flag says that request from caldav server</param>
            <returns type="ASC.Api.Calendar.Wrappers.TodoWrapper, ASC.Api.Calendar">Updated task</returns>
            <collection>list</collection>
            <path>api/2.0/calendar/icstodo</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.RemoveTodo(System.Int32,System.Boolean)">
            <summary>
            Deletes task
            </summary>
            <short>
            Delete task
            </short>
            <param method="url" name="todoId">Task ID</param>
            <param name="fromCaldavServer">Bool flag says that request from caldav server</param>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>DELETE</httpMethod>
            <path>api/2.0/calendar/todos/{todoId}</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.AddEventOutside(System.String,System.String,System.String)">
            <httpMethod>POST</httpMethod>
            <path>api/2.0/calendar/outsideevent</path>
            <param name="calendarGuid"></param>
            <param name="eventGuid"></param>
            <param name="ics"></param>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.DeleteCaldavCalendar(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Deletes the project calendar with the ID specified in the request
            </summary>
            <short>
            Delete project calendar
            </short>
            <param name="calendarId">Calendar ID</param>
            <param name="team">Project team</param>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>DELETE</httpMethod>
            <path>api/2.0/calendar/caldavprojcal</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.DeleteCaldavEvent(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Deletes the whole caldav event from the calendar
            </summary>
            <short>
            Delete event
            </short>
            <param name="calendarId">ID of the calendar where the event belongs</param>
            <param name="uid">Event uid</param>
            <param name="responsibles">Task responsibles</param>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>DELETE</httpMethod>
            <path>api/2.0/calendar/caldavevent</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.UpdateCaldavEvent(System.String,System.String,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Create/update the existing caldav event in the selected calendar
            </summary>
            <short>
            Update caldav event
            </short>
            <param name="calendarId">ID of the calendar where the event belongs</param>
            <param name="uid">Event uid</param>
            <param name="alert">Event notification type</param>
            <param name="responsibles">Task responsibles</param>
            <requiresAuthorization>true</requiresAuthorization>
            <path>api/2.0/calendar/caldavevent</path>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.AddEvent(System.Int32,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Collections.Generic.List{ASC.Api.Calendar.CalendarApi.SharingParam},System.String)">
            <summary>
            Creates the new event in the selected calendar with the parameters specified in the request
            </summary>
            <short>
            Create new event
            </short>
            <param name="calendarId">ID of the calendar where the event is created</param>
            <param name="ics">Event in iCal format</param>
            <param name="alertType">Event notification type</param>
            <param name="sharingOptions">Event sharing access parameters</param>
            <param name="eventUid">Event uid</param>
            <path>api/2.0/calendar/icsevent</path>
            <httpMethod>POST</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Calendar.Wrappers.EventWrapper, ASC.Api.Calendar">Event</returns>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.UpdateEvent(System.Int32,System.String,System.String,ASC.Web.Core.Calendars.EventAlertType,System.Collections.Generic.List{ASC.Api.Calendar.CalendarApi.SharingParam},System.Boolean,System.String)">
            <summary>
            Updates the existing event in the selected calendar with the parameters specified in the request
            </summary>
            <short>
            Update event
            </short>
            <param name="eventId">Event ID</param>
            <param name="calendarId">ID of the calendar where the event belongs</param>
            <param name="ics">Event in iCal format</param>
            <param name="alertType">Event notification type</param>
            <param name="sharingOptions">Event sharing access parameters</param>
            <param name="fromCalDavServer">bool flag says that request from caldav server</param>
            <param name="ownerId">Event owner id</param>
            <returns type="ASC.Api.Calendar.Wrappers.EventWrapper, ASC.Api.Calendar">Updated event</returns>
            <path>api/2.0/calendar/icsevent</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.RemoveEvent(System.Int32)">
            <summary>
            Deletes the whole event from the calendar (all events in the series)
            </summary>
            <short>
            Delete event series
            </short>
            <param method="url" name="eventId">Event ID</param>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>DELETE</httpMethod>
            <path>api/2.0/calendar/events/{eventId}</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.RemoveEvent(System.Int32,ASC.Specific.ApiDateTime,ASC.Api.Calendar.CalendarApi.EventRemoveType,System.Uri,System.Boolean)">
            <summary>
            Deletes one event from the series of recurrent events
            </summary>
            <short>
            Delete event
            </short>
            <param method="url" name="eventId">Event ID</param>
            <param name="date">Date to be deleted from the recurrent event</param>
            <param name="type">Recurrent event deletion type</param>
            <param name="uri" visible="false">Current uri</param>
            <param name="fromCaldavServer">Bool flag says that request from caldav server</param>
            <path>api/2.0/calendar/events/{eventId}/custom</path>
            <httpMethod>DELETE</httpMethod>
            <returns type="ASC.Api.Calendar.Wrappers.EventWrapper, ASC.Api.Calendar">Updated event series collection</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.UnsubscribeEvent(System.Int32)">
            <summary>
            Unsubscribes the current user from the event with the ID specified in the request
            </summary>
            <short>
            Unsubscribe from event
            </short>
            <param method="url" name="eventId">Event ID</param>
            <requiresAuthorization>true</requiresAuthorization>
            <path>api/2.0/calendar/events/{eventId}/unsubscribe</path>
            <httpMethod>DELETE</httpMethod>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetEventHistoryByUid(System.String)">
            <summary>
            Returns the event in ics format from history
            </summary>
            <short>
            Returns the event in ics format from history
            </short>
            <param method="url" name="eventUid">Event UID</param>
            <returns type="ASC.Api.Calendar.Wrappers.EventHistoryWrapper, ASC.Api.Calendar">Event History</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <path>api/2.0/calendar/events/{eventUid}/historybyuid</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetEventHistoryById(System.Int32)">
            <summary>
            Returns the event in ics format from history
            </summary>
            <short>
            Returns the event in ics format from history
            </short>
            <param method="url" name="eventId">Event ID</param>
            <returns type="ASC.Api.Calendar.Wrappers.EventHistoryWrapper, ASC.Api.Calendar">Event History</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <path>api/2.0/calendar/events/{eventId}/historybyid</path>
            <httpMethod>GET</httpMethod>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetCalendarSharingOptions(System.Int32)">
            <summary>
            Returns the sharing access parameters to the calendar with the ID specified in the request
            </summary>
            <short>
            Get access parameters
            </short>
            <param method="url" name="calendarId">Calendar ID</param>
            <returns type="ASC.Api.Calendar.Wrappers.PublicItemCollection, ASC.Api.Calendar">Sharing access parameters</returns>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>GET</httpMethod>
            <path>api/2.0/calendar/{calendarId}/sharing</path>
        </member>
        <member name="M:ASC.Api.Calendar.CalendarApi.GetDefaultSharingOptions">
            <summary>
            Returns the default values for the sharing access parameters
            </summary>
            <short>
            Get default access
            </short>
            <returns type="ASC.Api.Calendar.Wrappers.PublicItemCollection, ASC.Api.Calendar">Default sharing access parameters</returns>
            <httpMethod>GET</httpMethod>
            <path>api/2.0/calendar/sharing</path>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="T:ASC.Api.Calendar.iCalParser.IEmitter">
            <summary>
            Defines all of the basic operations that must be implemented by parser emitters.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="T:ASC.Api.Calendar.iCalParser.Parser">
            <summary>
            Parse iCalendar rfc2445 streams and convert to another format based on the emitter used.
            </summary>
            
            <remarks>
            This class is the main entry point for the ICalParser library.  A parser is created
            with a TextReader that contains the iCalendar stream to be parsed, and an IEmitter, which 
            is used to transform the iCalendar into another format.
            
            Each iCalendar format file is in the form:
            
              ID[[;attr1;attr2;attr3;...;attrn]:value]
              
            where ID is the main keyword identifying the iCalendar entry, followed optionally by a 
            set of attributes and a single value.  The parser works by identifying the specific IDs,
            attributes and values, categorizing them based on similar 'behaviour' (as defined in the <code>Token</code>
            class) and passing on recognized symbols to the emitter for further processing.  
            
            The error recovery policy of the parser is pretty simple.  When an error is detected, it is recorded,
            and the rest of the (possibly folded) line is read, and parsing continues.  
            </remarks>
            
            <example>
            The following snippet will read the contents of the file 'myCalendar.ics', which the
            parser will expect to contain iCalendar statements, and will write the RdfICalendar
            equivalent to standard output.
            <code>
                RDFEmitter emitter = new RDFEmitter( );
                StreamReader reader = new StreamReader( "myCalendar.ics" );
                Parser parser = new Parser( reader, emitter );
                parser.Parse( );
                Console.WriteLine( emitter.Rdf );
            </code>
            </example>
            
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Parser.#ctor(System.IO.TextReader,ASC.Api.Calendar.iCalParser.IEmitter)">
            <summary>
            Create a new iCalendar parser.
            </summary>
            <param name="reader">The reader that contains the stream of text iCalendar</param>
            <param name="_emitter">The emitter that will transform the iCalendar elements</param>
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Parser.Parse">
            <summary>
            Main entry point for starting the Parser.
            </summary>
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Parser.Parse(System.Boolean)">
            <summary>
            Alternate entry point for starting the parser.
            </summary>
            <param name="emitHandT">Indicates if the emitter should be told to emit headers
            and trailers before and after emitting the iCalendar body</param>
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Parser.parseID">
            <summary>
            Parse the first field (ID) of the line.  Returns a boolean on weather or not the
            method sucesfully recognized an ID.  If not, the method insures that the scanner
            will start at the beginning of a new line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Parser.parseAttributes(ASC.Api.Calendar.iCalParser.Scanner)">
            <summary>
            Parse the list of attributes - separated by ';'s.  Attributes always are in the
            form 'id=value' and indicate key/value pairs in the iCalendar attribute format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Parser.parseValue">
            <summary>
            Parse the value.  The value is the last data item on a iCalendar input line.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASC.Api.Calendar.iCalParser.ParserError">
            <summary>
            Basic error handling mechanism for the Parser
            </summary>
        </member>
        <member name="T:ASC.Api.Calendar.iCalParser.Scanner">
            <summary>
            The scanner is responsible for tokenizing iCalendar (RFC2445) files for use by the
            parser.  
            </summary>
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Scanner.GetNextToken(ASC.Api.Calendar.iCalParser.ScannerState)">
            <summary>
            Returns the next token in the file.  Returns null on EOF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ASC.Api.Calendar.iCalParser.Scanner.ConsumeToEOL">
            <summary>
            This method is used for error recovery, get the rest of the line, including
            folded lines, and position on a fresh line or EOF
            </summary>
        </member>
        <member name="T:ASC.Api.Calendar.iCalParser.Token">
            <summary>
            Represents the individual tokens returned from the scanner to the parser.  Note that the
            Token creation process is sensitive to the ScannerState.  This state is defined by what context
            the scanner currently is in - Parsing IDs, Parmeters, or values:
              e.g.  the iCalendar grammar defines the following possible states
              id;id=parm:value
            each string parsed out of the value has to be treated differently (eg. quoted strings are
            allowed in 'parm' but not in 'id')
            
            </summary>
        </member>
        <member name="T:ASC.Api.Calendar.Notification.CalendarPatternResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.CalendarSharingEmailPattern">
             <summary>
               Looks up a localized string similar to #if($SharingType == &quot;calendar&quot;)
            h1.Access Granted to Calendar: $CalendarName
             
             
            &quot;$UserName&quot;:&quot;$UserLink&quot; has granted you the access to the calendar: $CalendarName 
            
            #end
            #if($SharingType == &quot;event&quot;)
            h1.Access Granted to Event: $EventName
             
             
            &quot;$UserName&quot;:&quot;$UserLink&quot; has granted you the access to the event: $EventName
            
            #end.
             </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.CalendarSharingJabberPattern">
             <summary>
               Looks up a localized string similar to #if($SharingType == &quot;calendar&quot;)
            Calendar. Access Granted to Calendar: $CalendarName
            #end
            #if($SharingType == &quot;event&quot;)
            Calendar. Access Granted to Event: $EventName
            #end.
             </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.CalendarSharingSubject">
             <summary>
               Looks up a localized string similar to #if($SharingType == &quot;calendar&quot;)
            Calendar. Access granted to calendar: $CalendarName
            #end
            #if($SharingType == &quot;event&quot;)
            Calendar. Access granted to event: $EventName
            #end.
             </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.EventAlertEmailPattern">
             <summary>
               Looks up a localized string similar to h1.Reminder about the Event: $EventName
             
             
            The $EventName event is appointed for $EventStartDate #if($EventEndDate!=&quot;&quot;)- $EventEndDate #end
            #if($EventDescription!=&quot;&quot;)
             
             Event Description:
             
            $EventDescription
            #end.
             </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.EventAlertJabberPattern">
             <summary>
               Looks up a localized string similar to The $EventName event is appointed for $EventStartDate #if($EventEndDate!=&quot;&quot;)- $EventEndDate #end
            #if($EventDescription!=&quot;&quot;)
             
             Event Description:
             
            $EventDescription
            #end.
             </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatternResource.EventAlertSubject">
            <summary>
              Looks up a localized string similar to Calendar. Reminder about the event: $EventName.
            </summary>
        </member>
        <member name="T:ASC.Api.Calendar.Notification.CalendarPatterns">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatterns.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatterns.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Notification.CalendarPatterns.calendar_patterns">
             <summary>
               Looks up a localized string similar to &lt;patterns&gt;
              &lt;formatter type=&quot;ASC.Notify.Patterns.NVelocityPatternFormatter, ASC.Common&quot; /&gt;
            
              &lt;pattern id=&quot;CalendarSharingPattern&quot; sender=&quot;email.sender&quot;&gt;
                &lt;subject resource=&quot;|CalendarSharingSubject|ASC.Api.Calendar.Notification.CalendarPatternResource,ASC.Api.Calendar&quot; /&gt;
                &lt;body styler=&quot;ASC.Notify.Textile.TextileStyler,ASC.Notify.Textile&quot; resource=&quot;|CalendarSharingEmailPattern|ASC.Api.Calendar.Notification.CalendarPatternResource,ASC.Api.Calendar&quot; /&gt;
              &lt;/pattern&gt;
              &lt;pattern id=&quot;CalendarSharing [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:ASC.Api.Calendar.Resources.CalendarApiResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.BirthdayCalendarDescription">
            <summary>
              Looks up a localized string similar to Reminds about users&apos; birthdays.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.BirthdayCalendarName">
            <summary>
              Looks up a localized string similar to Users&apos; birthdays.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.CommonCalendarsGroup">
            <summary>
              Looks up a localized string similar to Common calendars.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.DefaultCalendarName">
            <summary>
              Looks up a localized string similar to My calendar.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.ErrorAccessDenied">
            <summary>
              Looks up a localized string similar to Access Denied.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.ErrorEmptyName">
            <summary>
              Looks up a localized string similar to Name can&apos;t be empty.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.ErrorIncorrectDateFormat">
            <summary>
              Looks up a localized string similar to Date format is incorrect.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.ErrorItemNotFound">
            <summary>
              Looks up a localized string similar to Item not found.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.FullAccessOption">
            <summary>
              Looks up a localized string similar to Full Access.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.iCalCalendarsGroup">
            <summary>
              Looks up a localized string similar to iCal Calendars.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.NoNameCalendar">
            <summary>
              Looks up a localized string similar to No title.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.NoNameEvent">
            <summary>
              Looks up a localized string similar to No title.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.OwnerOption">
            <summary>
              Looks up a localized string similar to Owner.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.PersonalCalendarsGroup">
            <summary>
              Looks up a localized string similar to Personal calendars.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.ReadOption">
            <summary>
              Looks up a localized string similar to Read Only.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.SharedCalendarsGroup">
            <summary>
              Looks up a localized string similar to Calendars shared with me.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.SharedEventsCalendarDescription">
            <summary>
              Looks up a localized string similar to Here are all events, which another users shared with me.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.SharedEventsCalendarName">
            <summary>
              Looks up a localized string similar to Events shared with me.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Resources.CalendarApiResource.WrongiCalFeedLink">
            <summary>
              Looks up a localized string similar to An invalid reference to iCal.
            </summary>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.Id">
            <example name="objectId">1</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.Uid">
            <example name="uniqueId">123wda</example>
            <order>140</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.TenantId">
            <example type="int">1</example>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.CalendarId">
            <example name="sourceId">calendarID</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.Name">
            <example name="title">Todo Name</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.Description">
            <example name="description">Todo Description</example>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.Start">
            <example name="start">2020-12-01T06:36:10.8645482Z</example>
            <order>40</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.Completed">
            <example name="completed">2020-12-01T06:36:10.8645482Z</example>
            <order>110</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TodoWrapper.Owner">
            <type name="owner">ASC.Api.Calendar.Wrappers.UserParams, ASC.Api.Calendar</type>
            <order>120</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.CalendarId">
            <example type="int" name="calendarId">1</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.EventUid">
            <example name="eventUid">uid1@onlyoffice.com</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.EventId">
            <example type="int" name="eventId">1</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.MergedIcs">
            <example name="mergedIcs">BEGIN:VCALENDAR
            VERSION:2.0
            PRODID:onlyoffice.com
            BEGIN:VEVENT
            UID:uid1@onlyoffice.com
            DTSTAMP:19970714T170000Z
            ORGANIZER;CN=John Doe:MAILTO:john.doe@example.com
            DTSTART:19970714T170000Z
            DTEND:19970715T035959Z
            SUMMARY:Bastille Day Party
            END:VEVENT
            END:VCALENDAR</example>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.CanEdit">
            <example name="canEdit">true</example>
            <order>40</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.CanNotify">
            <example name="canNotify">true</example>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.Ics">
            <example name="ics">some text</example>
            <order>60</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.TimeZoneInfo">
            <type name="timeZone">ASC.Api.Calendar.Wrappers.TimeZoneWrapper, ASC.Api.Calendar</type>
            <order>70</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventHistoryWrapper.CalendarName">
            <example name="calendarName">Calendar name</example>
            <order>80</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventAlertWrapper.Type">
            <example type="int">-1</example>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Id">
            <example name="objectId">1</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Uid">
            <example name="uniqueId">1234wda</example>
            <order>140</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.TenantId">
            <example>1</example>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Todo">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.CalendarId">
            <example name="sourceId">calendarID</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Name">
            <example name="title">Event Name</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Description">
            <example name="description">Event Description</example>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.AllDayLong">
            <example name="allDay">false</example>
            <order>60</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Start">
            <example name="start">2020-12-01T06:36:10.8645482Z</example>
            <order>40</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.End">
            <example name="end">2020-12-01T06:36:10.8645482Z</example>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.RepeatRule">
            <example name="repeatRule"></example>
            <order>70</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Alert">
            <type name="alert">ASC.Api.Calendar.Wrappers.EventAlertWrapper, ASC.Api.Calendar</type>
            <order>110</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.IsShared">
            <example name="isShared">true</example>
            <order>80</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.CanUnsubscribe">
            <example name="canUnsubscribe">true</example>
            <order>130</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.IsEditable">
            <example name="isEditable">false</example>
            <order>100</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Permissions">
            <type name="permissions">ASC.Api.Calendar.Wrappers.CalendarPermissions, ASC.Api.Calendar</type>
            <order>90</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Owner">
            <type name="owner">ASC.Api.Calendar.Wrappers.UserParams, ASC.Api.Calendar</type>
            <order>120</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.EventWrapper.Status">
            <example name="status" type="int">0</example>
            <order>150</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.PublicItemCollection.AvailableOptions">
            <type name="actions">ASC.Api.Calendar.Wrappers.AccessOption, ASC.Api.Calendar</type>
            <collection>list</collection>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.PublicItemCollection.Items">
            <type name="items">ASC.Api.Calendar.Wrappers.PublicItemWrapper, ASC.Api.Calendar</type>
            <collection>list</collection>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.IsSubscription">
            <example name="isSubscription">false</example>
            <order>80</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.iCalUrl">
            <example name="iCalUrl"></example>
            <order>230</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.IsiCalStream">
            <example name="isiCalStream">false</example>
            <order>220</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.IsHidden">
            <example name="isHidden">false</example>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.CanAlertModify">
            <example name="canAlertModify">true</example>
            <order>200</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.IsShared">
            <example name="isShared">true</example>
            <order>60</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.Permissions">
            <type name="permissions">ASC.Api.Calendar.Wrappers.CalendarPermissions, ASC.Api.Calendar</type>
            <order>70</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.IsEditable">
            <example name="isEditable">true</example>
            <order>90</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.TextColor">
            <example name="textColor">#ffffff</example>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.BackgroundColor">
            <example name="backgroundColor">#000000</example>
            <order>40</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.Description">
            <example name="description">Calendar Description</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.Title">
            <example name="title">Calendar Name</example>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.Id">
            <example name="objectId">1</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.IsTodo">
            <example name="isTodo">false</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.Owner">
            <type name="owner">ASC.Api.Calendar.Wrappers.UserParams, ASC.Api.Calendar</type>
            <order>120</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.IsAcceptedSubscription">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.Events">
            <type name="events">ASC.Api.Calendar.Wrappers.EventWrapper, ASC.Api.Calendar</type>
            <order>150</order>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.Todos">
            <type name="todos">ASC.Api.Calendar.Wrappers.TodoWrapper, ASC.Api.Calendar</type>
            <order>160</order>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.DefaultAlertType">
            <type name="defaultAlert">ASC.Api.Calendar.Wrappers.EventAlertWrapper, ASC.Api.Calendar</type>
            <order>160</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.TimeZoneInfo">
            <type name="timeZone">ASC.Api.Calendar.Wrappers.TimeZoneWrapper, ASC.Api.Calendar</type>
            <order>160</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarWrapper.CanEditTimeZone">
            <example name="canEditTimeZone">false</example>
            <order>160</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.CalendarPermissions.Data">
            <type>ASC.Api.Calendar.Wrappers.PublicItemCollection, ASC.Api.Calendar</type>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.UserParams.Id">
            <example name="objectId">2fdfe577-3c26-4736-9df9-b5a683bb8520</example>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.UserParams.Name">
            <example name="name">Valery Zykov</example>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.PublicItemWrapper.ItemId">
            <example name="id">2fdfe577-3c26-4736-9df9-b5a683bb8520</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.PublicItemWrapper.ItemName">
            <example name="name">Everyone</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.PublicItemWrapper.IsGroup">
            <example name="isGroup">true</example>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.PublicItemWrapper.CanEdit">
            <example name="canEdit">true</example>
            <order>40</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.PublicItemWrapper.SharingOption">
            <type name="selectedAction">ASC.Api.Calendar.Wrappers.AccessOption, ASC.Api.Calendar</type>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.AccessOption.Id">
            <example name="id">read</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.AccessOption.Name">
            <example name="name">Read only</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.AccessOption.Default">
            <example name="defaultAction">true</example>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.AccessOption.DefaultStyle">
            <example name="defaultStyle">read</example>
            <order>40</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.SubscriptionWrapper.IsAccepted">
            <example name="isSubscribed">false</example>
            <order>100</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.SubscriptionWrapper.IsNew">
            <example name="isNew">true</example>
            <order>140</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.SubscriptionWrapper.Group">
            <example name="group">Personal Calendars</example>
            <order>130</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.SubscriptionWrapper.Permissions">
            <type>ASC.Api.Calendar.Wrappers.CalendarPermissions, ASC.Api.Calendar</type>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TimeZoneWrapper.Name">
            <example name="name">UTC</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TimeZoneWrapper.Id">
            <example name="id">UTC</example>
            <order>0</order>
        </member>
        <member name="P:ASC.Api.Calendar.Wrappers.TimeZoneWrapper.Offset">
            <example type="int" name="offset">0</example>
            <order>0</order>
        </member>
    </members>
</doc>
