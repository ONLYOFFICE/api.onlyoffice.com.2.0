<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASC.Api.Projects</name>
    </assembly>
    <members>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.Id">
            <example>00000000-0000-0000-0000-000000000000</example>
            <order>1</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.ParentId">
            <example>00000000-0000-0000-0000-000000000000</example>
            <order>12</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.Text">
            <example>comment text</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.Created">
            <example>2020-12-22T04:11:56.5008512Z</example>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.CreatedBy">
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
            <order>9</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.Updated">
            <example>2020-12-22T04:11:56.5008512Z</example>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.Inactive">
            <example>false</example>
            <order>13</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.CommentWrapper.CanEdit">
            <example>false</example>
            <order>14</order>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.MessageWrapperFull">
            <inherited>ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapperFull.CanEditFiles">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapperFull.CanReadFiles">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapperFull.Subscribers">
            <type>ASC.Api.Employee.EmployeeWraperFull, ASC.Api.Employee</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapperFull.Files">
            <type>ASC.Api.Documents.FileWrapper, ASC.Api.Documents</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapperFull.Comments">
            <type>ASC.Web.Studio.UserControls.Common.Comments.CommentInfo, ASC.Web.Studio</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapperFull.Project">
            <type>ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects</type>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.MessageWrapper">
            <inherited>ASC.Api.Projects.Wrappers.ObjectWrapperFullBase, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapper.ProjectOwner">
            <type>ASC.Api.Projects.Wrappers.SimpleProjectWrapper, ASC.Api.Projects</type>
            <order>14</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapper.Text">
            <example>Hello, this is sample message</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapper.CanCreateComment">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapper.CanEdit">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MessageWrapper.CommentsCount">
            <example type="int">5</example>
            <ordeR>15</ordeR>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.ProjectOwner">
            <type>ASC.Api.Projects.Wrappers.SimpleProjectWrapper, ASC.Api.Projects</type>
            <order>14</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.Deadline">
            <example>2020-12-22T04:11:56.4458522Z</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.IsKey">
            <example>false</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.IsNotify">
            <example>false</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.CanEdit">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.CanDelete">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.ActiveTaskCount">
            <example type="int">15</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.MilestoneWrapper.ClosedTaskCount">
            <example type="int">5</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperBase.Id">
            <example type="int">10</example>
            <order>1</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperBase.Title">
            <example>Sample Title</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperBase.Description">
            <example>Sample description</example>
            <order>11</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperBase.Status">
            <example type="int">0</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperBase.Responsible">
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
            <order>30</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperBase.ResponsibleId">
            <example>00000000-0000-0000-0000-000000000000</example>
            <order>30</order>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.ObjectWrapperFullBase">
            <inherited>ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperFullBase.Created">
            <example>2020-12-22T04:11:56.5658524Z</example>
            <order>50</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperFullBase.CreatedBy">
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
            <order>51</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperFullBase.CreatedById">
            <example>00000000-0000-0000-0000-000000000000</example>
            <order>51</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperFullBase.Updated">
            <example>2020-12-22T04:11:56.5658524Z</example>
            <order>52</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperFullBase.UpdatedBy">
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
            <order>41</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ObjectWrapperFullBase.UpdatedById">
            <example>00000000-0000-0000-0000-000000000000</example>
            <order>41</order>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.ProjectWrapper">
            <inherited>ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapper.CanEdit">
            <example>false</example>
            <order>31</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapper.IsPrivate">
            <example>false</example>
            <order>32</order>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.ProjectWrapperFull">
            <inherited>ASC.Api.Projects.Wrappers.ObjectWrapperFullBase, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.CanEdit">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.CanDelete">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.Security">
            <type>ASC.Web.Projects.Classes.ProjectSecurityInfo, ASC.Web.Projects</type>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.ProjectFolder">
            <example type="int">13234</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.IsPrivate">
            <example>false</example>
            <order>32</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.TaskCount">
            <example type="int">0</example>
            <order>33</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.TaskCountTotal">
            <example type="int">0</example>
            <order>33</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.MilestoneCount">
            <example type="int">0</example>
            <order>34</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.DiscussionCount">
            <example type="int">0</example>
            <order>34</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.ParticipantCount">
            <example type="int">0</example>
            <order>35</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.TimeTrackingTotal">
            <example>TimeTrackingTotal</example>
            <order>35</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.DocumentsCount">
            <example type="int">0</example>
            <order>35</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.IsFollow">
            <example type="int">0</example>
            <order>36</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ProjectWrapperFull.Tags">
            <example>Tags1,Tags2</example>
            <order>37</order>
            <collection split=",">list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SearchItemWrapper.Id">
            <example type="int">345</example>
            <order>1</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SearchItemWrapper.EntityType">
            <example type="int">0</example>
            <order>3</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SearchItemWrapper.Title">
            <example>Sample title</example>
            <order>5</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SearchItemWrapper.Description">
            <example>Sample desription</example>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SearchItemWrapper.Created">
            <example>2020-12-22T04:11:56.5308514Z</example>
            <order>20</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SearchWrapper.Item">
            <type>ASC.Api.Projects.Wrappers.SearchItemWrapper, ASC.Api.Projects</type>
            <order>10</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SearchWrapper.Owner">
            <type>ASC.Api.Projects.Wrappers.SearchItemWrapper, ASC.Api.Projects</type>
            <order>14</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SimpleProjectWrapper.Id">
            <example>123</example>
             <order>60</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SimpleProjectWrapper.Title">
            <example>Sample project</example>
            <order>61</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SimpleProjectWrapper.Status">
            <example type="int">0</example>
            <order>62</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SimpleProjectWrapper.IsPrivate">
            <example>false</example>
            <order>63</order>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.TaskWrapperFull">
            <inherited>ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.Files">
            <type>ASC.Api.Documents.FileWrapper, ASC.Api.Documents</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.Comments">
            <type>ASC.Web.Studio.UserControls.Common.Comments.CommentInfo, ASC.Web.Studio</type>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.CommentsCount">
            <example type="int">1</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.IsSubscribed">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.CanEditFiles">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.CanCreateComment">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.Project">
            <type>ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects</type>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapperFull.TimeSpend">
            <example type="double">3.5</example>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.TaskWrapper">
            <inherited>ASC.Api.Projects.Wrappers.ObjectWrapperFullBase, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.CanEdit">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.CanCreateSubtask">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.CanCreateTimeSpend">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.CanDelete">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.CanReadFiles">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.Deadline">
            <example>2020-12-22T04:11:56.5768573Z</example>
            <order>12</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.StartDate">
            <example>2020-12-22T04:11:56.5768573Z</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.MilestoneId">
            <example type="int">123</example>
            <order>13</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.Priority">
            <example type="int">1</example>
            <order>12</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.ProjectOwner">
            <type>ASC.Api.Projects.Wrappers.SimpleProjectWrapper, ASC.Api.Projects</type>
            <order>14</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.Progress">
            <example type="int">55</example>
            <order>15</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.Subtasks">
            <type>ASC.Api.Projects.Wrappers.SubtaskWrapper, ASC.Api.Projects</type>
            <order>20</order>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.Links">
            <type>ASC.Api.Projects.Wrappers.TaskLinkWrapper, ASC.Api.Projects</type>
            <order>21</order>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.Responsibles">
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
            <order>53</order>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.ResponsibleIds">
            <example>00000000-0000-0000-0000-000000000000</example>
            <order>53</order>
            <collection>list</collection>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.Milestone">
            <type>ASC.Api.Projects.Wrappers.SimpleMilestoneWrapper, ASC.Api.Projects</type>
            <order>54</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskWrapper.CustomTaskStatus">
            <example type="int">1</example>
            <order>55</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.Id">
            <order>1</order>
            <example type="int">10</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.Date">
            <order>5</order>
            <example>2020-12-22T04:11:56.5438537Z</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.Hours">
            <order>6</order>
            <example type="double">3.5</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.Note">
            <order>6</order>
            <example>Sample note</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.RelatedProject">
            <order>7</order>
            <example type="int">123</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.Task">
            <order>7</order>
            <type>ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects</type>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.RelatedTask">
            <order>7</order>
            <example type="int">13456</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.RelatedTaskTitle">
            <order>7</order>
            <example>Sample task</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.CreatedBy">
            <order>51</order>
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.Person">
            <order>51</order>
            <type>ASC.Api.Employee.EmployeeWraper, ASC.Api.Employee</type>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.CanEdit">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.PaymentStatus">
            <example type="int">2</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.StatusChanged">
            <order>54</order>
            <example>2020-12-22T04:11:56.5438537Z</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.CanEditPaymentStatus">
            <example>true</example>
            <order>55</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TimeWrapper.CreateOn">
            <order>56</order>
            <example>2020-12-22T04:11:56.5438537Z</example>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.ParticipantWrapper">
            <inherited>ASC.Api.Employee.EmployeeWraperFull, ASC.Api.Employee</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ParticipantWrapper.CanReadFiles">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ParticipantWrapper.CanReadMilestones">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ParticipantWrapper.CanReadMessages">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ParticipantWrapper.CanReadTasks">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ParticipantWrapper.CanReadContacts">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ParticipantWrapper.IsAdministrator">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ParticipantWrapper.IsRemovedFromTeam">
            <example>true</example>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.ReportTemplateWrapper">
            <inherited>ASC.Api.Projects.Wrappers.ObjectWrapperFullBase, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ReportTemplateWrapper.AutoGenerated">
            <example>true</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ReportTemplateWrapper.Cron">
            <example>Cron</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ReportTemplateWrapper.ReportType">
            <example type="int">0</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.ReportTemplateWrapper.Filter">
            <example>Filter</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SimpleMilestoneWrapper.Id">
            <example type="int">123</example>
            <order>60</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SimpleMilestoneWrapper.Title">
            <example>Title</example>
            <order>61</order>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SimpleMilestoneWrapper.Deadline">
            <example>2020-12-22T04:11:56.5768573Z</example>
            <order>62</order>
        </member>
        <member name="T:ASC.Api.Projects.Wrappers.SubtaskWrapper">
            <inherited>ASC.Api.Projects.Wrappers.ObjectWrapperFullBase, ASC.Api.Projects</inherited>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SubtaskWrapper.CanEdit">
            <example>false</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.SubtaskWrapper.TaskId">
            <example type="int">1234</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskLinkWrapper.DependenceTaskId">
            <example>123</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskLinkWrapper.ParentTaskId">
            <example>44</example>
        </member>
        <member name="P:ASC.Api.Projects.Wrappers.TaskLinkWrapper.LinkType">
            <example>1</example>
        </member>
        <member name="T:ASC.Api.Projects.ProjectApi">
            <summary>
            Projects access
            </summary>
            <name>project</name>
            <name>project</name>
        </member>
        <member name="P:ASC.Api.Projects.ProjectApi.Name">
            <summary>
            Api name entry
            </summary>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.#ctor(ASC.Api.Impl.ApiContext,ASC.Api.Documents.DocumentsApi)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
            <param name="documentsApi">Docs api</param>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateSettings(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{ASC.Web.Projects.StartModuleType},System.Object)">
            <summary>
            
            </summary>
            <param name="everebodyCanCreate"></param>
            <param name="hideEntitiesInPausedProjects"></param>
            <param name="startModule"></param>
            <param name="folderId"></param>
            <returns type="ASC.Web.Projects.ProjectsCommonSettings, ASC.Web.Projects"></returns>
            <path>api/2.0/project/settings</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetSettings">
            <summary>
            
            </summary>
            <returns type="ASC.Web.Projects.ProjectsCommonSettings, ASC.Web.Projects"></returns>
            <path>api/2.0/project/settings</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateStatus(ASC.Web.Projects.CustomTaskStatus)">
            <summary>
            
            </summary>
            <param name="status"></param>
            <returns type="ASC.Web.Projects.CustomTaskStatus, ASC.Web.Projects"></returns>
            <path>api/2.0/project/status</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateStatus(ASC.Web.Projects.CustomTaskStatus)">
            <summary>
            
            </summary>
            <param name="newStatus"></param>
            <returns type="ASC.Web.Projects.CustomTaskStatus, ASC.Web.Projects"></returns>
            <path>api/2.0/project/status</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateStatuses(System.Collections.Generic.List{ASC.Web.Projects.CustomTaskStatus})">
            <summary>
            
            </summary>
            <param name="statuses"></param>
            <returns type="ASC.Web.Projects.CustomTaskStatus, ASC.Web.Projects"></returns>
            <path>api/2.0/project/statuses</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetStatuses">
            <summary>
            
            </summary>
            <returns type="ASC.Web.Projects.CustomTaskStatus, ASC.Web.Projects"></returns>
            <path>api/2.0/project/status</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteStatus(System.Int32)">
            <summary>
            
            </summary>
            <param method="url" name="id"></param>
            <returns type="ASC.Web.Projects.CustomTaskStatus, ASC.Web.Projects"></returns>
            <path>api/2.0/project/status/{id}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMessageByFilter(System.Int32,System.Int32,System.Guid,System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Boolean,System.Boolean,System.Nullable{ASC.Projects.Core.Domain.MessageStatus})">
            <summary>
            Returns the list with the detailed information about all the message matching the filter parameters specified in the request
            </summary>
            <short>
             Get message by filter
            </short>
            <category>Discussions</category>
            <param method="url" name="projectid" optional="true"> Project ID</param>
            <param method="url" name="tag" optional="true">Project Tag</param>
            <param method="url" name="departament" optional="true">Departament GUID</param>
            <param method="url" name="participant" optional="true">Participant GUID</param>
            <param method="url" name="createdStart" optional="true">Minimum value of message creation date</param>
            <param method="url" name="createdStop" optional="true">Maximum value of message creation date</param>
            <param method="url" name="lastId">Last message ID</param>
            <param method="url" name="myProjects">Messages in my projects</param>
            <param method="url" name="follow">Followed messages</param>
            <param method="url" name="status"></param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects">List of messages</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/filter</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessages(System.Int32)">
            <summary>
            Returns the list of all the messages in the discussions within the project with the ID specified in the request
            </summary>
            <short>
            Messages
            </short>
            <category>Discussions</category>
            <param method="url" name="projectid">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects">List of messages</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/message</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectMessage(System.Int32,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a message to the selected discussion within the project with the ID specified in the request
            </summary>
            <short>
            Add message
            </short>
            <category>Discussions</category>
            <param method="url" name="projectid">Project ID</param>
            <param name="title">Discussion title</param>
            <param name="content">Message text</param>
            <param name="participants">IDs (GUIDs) of users separated with ','</param>
            <param name="notify">Notify participants</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects"></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/message</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectMessage(System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Updates the selected message in the discussion within the project with the ID specified in the request
            </summary>
            <short>
            Update message
            </short>
            <category>Discussions</category>
            <param method="url" name="messageid">Message ID</param>
            <param name="projectid">Project ID</param>
            <param name="title">Discussion title</param>
            <param name="content">Message text</param>
            <param name="participants">IDs (GUIDs) of users separated with ','</param>
            <param name="notify">Notify participants</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapperFull, ASC.Api.Projects"></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectMessage(System.Int32,ASC.Projects.Core.Domain.MessageStatus)">
            <summary>
            Updates the selected message status
            </summary>
            <short>
            Update message status
            </short>
            <category>Discussions</category>
            <param method="url" name="messageid">Message ID</param>
            <param name="status">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects"></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/status</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProjectMessage(System.Int32)">
            <summary>
            Deletes the message with the ID specified in the request from a project discussion
            </summary>
            <short>
            Delete message
            </short>
            <category>Discussions</category>
            <param method="url" name="messageid">Message ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects"></returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessage(System.Int32)">
            <summary>
            Returns the detailed information about the message with the ID specified in the request
            </summary>
            <short>
            Message
            </short>
            <category>Discussions</category>
            <param method="url" name="messageid">Message ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapperFull, ASC.Api.Projects">Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMessageFiles(System.Int32)">
            <summary>
            Returns the detailed information about files attached to the message with the ID specified in the request
            </summary>
            <short>
            Message files
            </short>
            <category>Files</category>
            <param method="url" name="messageid">Message ID</param>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"> List of message files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/files</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToMessage(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Uploads the file specified in the request to the selected message
            </summary>
            <short>
            Upload file to message
            </short>
            <category>Files</category>
            <param method="url" name="messageid">Message ID</param>
            <param name="files">File ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects">Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/files</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromMessage(System.Int32,System.Int32)">
            <summary>
            Detaches the selected file from the message with the ID specified in the request
            </summary>
            <short>
            Detach file from message
            </short>
            <category>Files</category>
            <param method="url" name="messageid">Message ID</param>
            <param name="fileid">File ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects">Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/files</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromMessage(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Detaches the selected file from the message with the ID specified in the request
            </summary>
            <short>
            Detach file from message
            </short>
            <category>Files</category>
            <param name="messageid">Message ID</param>
            <param name="files">File ID</param>
            <returns>Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectRecentMessages">
            <summary>
            Returns the list of latest messages in the discussions within the project with the ID specified in the request
            </summary>
            <short>
            Latest messages
            </short>
            <category>Discussions</category>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects">List of messages</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessagesComments(System.Int32)">
            <summary>
            Returns the list of comments to the messages in the discussions within the project with the ID specified in the request
            </summary>
            <short>
            Message comments
            </short>
            <category>Comments</category>
            <param method="url" name="messageid">Message ID</param>
            <returns type="ASC.Api.Projects.Wrappers.CommentWrapper, ASC.Api.Projects">Comments for message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/comment</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectMessagesComment(System.Int32,System.String,System.Guid)">
            <summary>
            Adds a comment to the selected message in a discussion within the project with the content specified in the request. The parent comment ID can also be selected.
            </summary>
            <short>
            Add message comment
            </short>
            <category>Comments</category>
            <param method="url" name="messageid">Message ID</param>
            <param name="content">Comment content</param>
            <param name="parentId">Parrent comment ID</param>
            <returns type="ASC.Api.Projects.Wrappers.CommentWrapper, ASC.Api.Projects"></returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/comment</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SubscribeToMessage(System.Int32)">
            <summary>
            Subscribe to notifications about the actions performed with the task with the ID specified in the request
            </summary>
            <short>
            Subscribe to message action
            </short>
            <category>Discussions</category>
            <returns type="ASC.Api.Projects.Wrappers.MessageWrapper, ASC.Api.Projects">Discussion</returns>
            <param method="url" name="messageid">Message ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/subscribe</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.IsSubscribedToMessage(System.Int32)">
            <summary>
            Checks subscription to notifications about the actions performed with the discussion with the ID specified in the request
            </summary>
            <short>
            Check subscription to discussion action
            </short>
            <category>Discussions</category>
            <param method="url" name="messageid">Message ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/subscribe</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessageSubscribers(System.Int32)">
            <summary>
            Get subscribers
            </summary>
            <short>
            Get subscribers
            </short>
            <category>Discussions</category>
            <param method="url" name="messageid">Message ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/message/{messageid}/subscribes</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Employee.EmployeeWraperFull, ASC.Api.Employee"></returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetPreview(System.String)">
            <summary>
            Get preview
            </summary>
            <short>
            Get preview
            </short>
            <category>Discussions</category>
            <param name="htmltext">html to create preview</param>
            <path>api/2.0/project/message/discussion/preview</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CheckReportData(System.String)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <returns type="ASC.Web.Files.Services.DocumentService.ReportState, ASC.Web.Files"></returns>
            <path>api/2.0/project/report/create</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetReportStatus">
            <summary>
            
            </summary>
            <returns type="ASC.Web.Files.Services.DocumentService.ReportState, ASC.Web.Files"></returns>
            <path>api/2.0/project/report/status</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.TerminateReport">
            <summary>
            
            </summary>
            <path>api/2.0/project/report/terminate</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SaveReportTemplate(System.String,System.String,System.Int32,System.Int32,System.Boolean,ASC.Projects.Core.Domain.Reports.ReportType,System.Int32,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Guid,System.Guid,ASC.Projects.Core.Domain.Reports.ReportTimeInterval,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Boolean)">
            <summary>
            Creates the project report template with the parameters specified in the request. Most of the parameters are optional and depend on the report type selected.
            </summary>
            <short>
            Create report template
            </short>
            <category>Report</category>         
            <param name="name">Report name</param>
            <param name="period" optional="true">Report template generation period. Can be one of the following: Day/Week/Month</param>
            <param name="periodItem" optional="true">Period item. Can be: weekday name (for weekly report, starting with Sunday), day of the month (for monthly report).</param>
            <param name="hour" optional="true">Send time (hour)</param>
            <param name="autoGenerated" optional="true">Automatically generated or not</param>
            <param name="reportType" optional="true">Report type</param>
            <param name="tag" optional="true">Tag</param>
            <param name="project" optional="true">Project</param>
            <param name="status" optional="true">Task status</param>       
            <param name="departament" optional="true">Department/Group</param>
            <param name="userId" optional="true">User GUID</param>
            <param name="reportTimeInterval" optional="true">Report time interval</param>
            <param name="fromDate" optional="true">Report period start date</param>
            <param name="toDate" optional="true">Report period end date</param>
            <param name="viewType" optional="true">View type: view by group or view by project</param>
            <param name="noResponsible" optional="true">Show or hide tasks without responsible</param>   
            <returns type="ASC.Api.Projects.Wrappers.ReportTemplateWrapper, ASC.Api.Projects">Project report template</returns>
            <path>api/2.0/project/report</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateReportTemplate(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Boolean,ASC.Projects.Core.Domain.Reports.ReportType,System.Int32,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Guid,System.Guid,ASC.Projects.Core.Domain.Reports.ReportTimeInterval,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Boolean)">
            <summary>
            Updates the selected project report template with the parameters specified in the request
            </summary>
            <short>
            Update report template
            </short>
            <category>Report</category>           
            <param method="url" name="reportid">Report template ID</param>    
            <param name="name">Report name</param>
            <param name="period" optional="true">Report template generation period. Can be one of the following: Day/Week/Month</param>
            <param name="periodItem" optional="true">Period item. Can be: weekday name (for weekly report, starting with Sunday), day of the month (for monthly report).</param>
            <param name="hour" optional="true">Send time (hour)</param>
            <param name="autoGenerated" optional="true">Automatically generated or not</param>
            <param name="reportType" optional="true">Report type</param>
            <param name="tag" optional="true">Tag</param>
            <param name="project" optional="true">Project</param>
            <param name="status" optional="true">Task status</param>       
            <param name="departament" optional="true">Department/Group</param>
            <param name="userId" optional="true">User GUID</param>
            <param name="reportTimeInterval" optional="true">Report time interval</param>
            <param name="fromDate" optional="true">Report period start date</param>
            <param name="toDate" optional="true">Report period end date</param>
            <param name="viewType" optional="true">View type: view by group or view by project</param>
            <param name="noResponsible" optional="true">Show or hide tasks without responsible</param>   
            <returns type="ASC.Api.Projects.Wrappers.ReportTemplateWrapper, ASC.Api.Projects">Project report template</returns>
            <path>api/2.0/project/report/{reportid}</path>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>PUT</httpMethod>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetReportTemplate(System.Int32)">
            <summary>
            
            </summary>
            <category>Report</category>
            <param method="url" name="reportid"></param>
            <returns type="ASC.Api.Projects.Wrappers.ReportTemplateWrapper,  ASC.Api.Projects"></returns>
            <path>api/2.0/project/report/{reportid}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteReportTemplate(System.Int32)">
            <summary>
            Deletes the project report template with the ID specified in the request
            </summary>
            <short>
            Delete report template
            </short>
            <category>Report</category>   
            <param method="url" name="reportid">Report template ID</param>        
            <returns type="ASC.Api.Projects.Wrappers.ReportTemplateWrapper, ASC.Api.Projects">Project report template</returns>
            <path>api/2.0/project/report/{reportid}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetGeneratedReports">
            <summary>
            
            </summary>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents"></returns>
            <path>api/2.0/project/report/files</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.RemoveGeneratedReport(System.Int32)">
            <summary>
            
            </summary>
            <param method="url" name="fileid"></param>
            <returns type="ASC.Projects.Core.Domain.Reports.ReportFile, ASC.Web.Projects"></returns>
            <path>api/2.0/project/report/files/{fileid}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetAllProjects">
            <summary>
            Returns the list of all the portal projects with base information about them
            </summary>
            <short>
            Projects
            </short>
            <category>Projects</category>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapper, ASC.Api.Projects">List of projects</returns>
            <path>api/2.0/project</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMyProjects">
            <summary>
            Returns the list of all projects in which the current user participates
            </summary>
            <short>
            Participated projects
            </short>
            <category>Projects</category>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapper, ASC.Api.Projects">List of projects</returns>
            <path>api/2.0/project/@self</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetFollowProjects">
            <summary>
            Returns the list of all projects which the current user follows
            </summary>
            <short>
            Followed projects
            </short>
            <category>Projects</category>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapper, ASC.Api.Projects">List of projects</returns>
            <path>api/2.0/project/@follow</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjects(ASC.Projects.Core.Domain.ProjectStatus)">
            <summary>
            Returns the list of all projects with the status specified in the request
            </summary>
            <short>
            Project by status
            </short>
            <category>Projects</category>
            <param method="url" name="status">"open"|"paused"|"closed"</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapper, ASC.Api.Projects">List of projects</returns>
            <path>api/2.0/project/{status}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProject(System.Int32)">
            <summary>
            Returns the detailed information about the project with ID specified in the request
            </summary>
            <short>
            Project by ID
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectsByFilter(System.Int32,System.Nullable{ASC.Projects.Core.Domain.ProjectStatus},System.Guid,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Returns the list of all the portal projects filtered using project title, status or participant ID and 'Followed' status specified in the request
            </summary>
            <short>
            Projects
            </short>
            <category>Projects</category>
            <param method="url" name="tag" optional="true">Project tag</param>
            <param method="url" name="status" optional="true">Project status</param>
            <param method="url" name="participant" optional="true">Participant GUID</param>
            <param method="url" name="manager" optional="true">Project manager GUID</param>
            <param method="url" name="departament"></param>
            <param method="url" name="follow" optional="true">My followed project</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Projects list</returns>
            <path>api/2.0/project/filter</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SearchProject(System.Int32,System.String)">
            <summary>
            Returns the search results for the project containing the words/phrases matching the query specified in the request
            </summary>
            <short>
            Search project
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <param method="url" name="query">Search query</param>
            <returns type="ASC.Api.Projects.Wrappers.SearchWrapper, ASC.Api.Projects">List of results</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/@search/{query}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SearchProjects(System.String)">
            <summary>
            Returns the list of all projects matching the query specified in the request
            </summary>
            <short>
            Search all projects
            </short>
            <category>Projects</category>
            <param method="url" name="query">Search query</param>
            <returns type="ASC.Api.Projects.Wrappers.SearchWrapper, ASC.Api.Projects">List of results</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/@search/{query}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateProject(System.String,System.String,System.Guid,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Task},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Milestone},System.Nullable{System.Boolean})">
            <summary>
            Creates a new project using all the necessary (title, description, responsible ID, etc) and some optional parameters specified in the request
            </summary>
            <short>
            Create project
            </short>
             <category>Projects</category>
            <param name="title">Title</param>
            <param name="description">Description</param>
            <param name="responsibleId">Responsible ID</param>
            <param name="tags">Tags</param>
            <param name="private">Is project private</param>
            <param name="participants" optional="true">Project participants</param>
            <param name="notify" optional="true">Notify project manager</param>
            <param name="tasks"></param>
            <param name="milestones"></param>
            <param name="notifyResponsibles"></param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Newly created project</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <path>api/2.0/project</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateProject(System.String,System.String,System.Guid,System.String,System.Boolean,System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Participant},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Task},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Milestone},System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="description"></param>
            <param name="responsibleId"></param>
            <param name="tags"></param>
            <param name="private"></param>
            <param name="participants"></param>
            <param name="notify"></param>
            <param name="tasks"></param>
            <param name="milestones"></param>
            <param name="notifyResponsibles"></param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects"></returns>
            <path>api/2.0/project/withSecurity</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProject(System.Int32,System.String,System.String,System.Guid,System.String,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{ASC.Projects.Core.Domain.ProjectStatus},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Updates the existing project information using all the parameters (project ID, title, description, responsible ID, etc) specified in the request
            </summary>
            <short>
            Update project
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <param name="title">Title</param>
            <param name="description">Description</param>
            <param name="responsibleId">Responsible ID</param>
            <param name="tags">Tags</param>
            <param name="participants">participants</param>
            <param name="status">Status. One of (Open|Closed)</param>
            <param name="private">Is project private</param>
            <param name="notify">Notify project manager</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Updated project</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>  
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProject(System.Int32,System.String,System.String,System.Guid,System.String,System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Participant},System.Nullable{ASC.Projects.Core.Domain.ProjectStatus},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            
            </summary>
            <param method="url" name="id"></param>
            <param name="title"></param>
            <param name="description"></param>
            <param name="responsibleId"></param>
            <param name="tags"></param>
            <param name="participants"></param>
            <param name="status"></param>
            <param name="private"></param>
            <param name="notify"></param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects"></returns>
            <path>api/2.0/project/{id}/withSecurityInfo</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProject(System.Int32,ASC.Projects.Core.Domain.ProjectStatus)">
            <summary>
            Updates the status of the project with the ID specified in the request
            </summary>
            <short>
            Update project status
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <param name="status">Status. One of (Open|Paused|Closed)</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Updated project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/status</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProject(System.Int32)">
            <summary>
            Deletes the project with the ID specified in the request from the portal
            </summary>
            <short>
            Delete project
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Deleted project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProjects(System.Int32[])">
            <summary>
            Deletes the project with the ID specified in the request from the portal
            </summary>
            <short>
            Delete project
            </short>
            <category>Projects</category>
            <param name="projectids">Project IDs</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Deleted project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.FollowToProject(System.Int32)">
            <summary>
            Subscribe or unsubscribe to notifications about the actions performed with the project with the ID specified in the request
            </summary>
            <short>
            Following/Unfollowing project
            </short>
            <category>Projects</category>
            <param method="url" name="projectId">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapper, ASC.Api.Projects">Project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/follow</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTags(System.Int32,System.String)">
            <summary>
            Updates the tags for the project with the selected project ID with the tags specified in the request
            </summary>
            <short>
            Update project tags
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <param name="tags">Tags</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/tag</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTags(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Updates the tags for the project with the selected project ID with the tags specified in the request
            </summary>
            <short>
            Update project tags
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <param name="tags">Tags</param>
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/tags</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTime(System.Int32)">
            <summary>
            Returns the detailed information about the time spent on the project with the ID specified in the request
            </summary>
            <short>
            Project time spent
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TimeWrapper, ASC.Api.Projects">List of time spent</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <httpMethod>GET</httpMethod>
            <path>api/2.0/project/{id}/time</path>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTotalProjectTime(System.Int32)">
            <summary>
            
            </summary>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <returns>List of time spent</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/time/total</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectMilestone(System.Int32,System.String,ASC.Specific.ApiDateTime,System.Boolean,System.Boolean,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a new milestone using the parameters (project ID, milestone title, deadline, etc) specified in the request
            </summary>
            <short>
            Add milestone
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <param name="title">Milestone title</param>
            <param name="deadline">Milestone deadline</param>
            <param name="isKey">Is milestone key or not</param>
            <param name="isNotify">Remind me 48 hours before the due date</param>
            <param name="description">Milestone description</param>
            <param name="responsible">Milestone responsible</param>
            <param name="notifyResponsible">Notify responsible</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">Created milestone</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/milestone</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMilestones(System.Int32)">
            <summary>
            Returns the list of all the milestones within the project with the ID specified in the request
            </summary>
            <short>
            Get milestones by project ID
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">List of milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/milestone</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <colection>list</colection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMilestones(System.Int32,ASC.Projects.Core.Domain.MilestoneStatus)">
            <summary>
            Returns the list of all the milestones with the selected status within the project with the ID specified in the request
            </summary>
            <short>
            Get milestones by project ID and milestone status
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <param method="url" name="status">Milestone status</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">List of milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{id}/milestone/{status}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTeam(System.Int32)">
            <summary>
            Returns the list of all users participating in the project with the ID specified in the request
            </summary>
            <short>
            Project team
            </short>
            <category>Team</category>
            <param method="url" name="projectid">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.ParticipantWrapper, ASC.Api.Projects">List of team members</returns>
            <path>api/2.0/project/{projectid}/team</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTeamExcluded(System.Int32)">
            <summary>
            Returns the list of all users participating in the project with the ID specified in the request
            </summary>
            <short>
            Project team
            </short>
            <category>Team</category>
            <param method="url" name="projectid">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.ParticipantWrapper, ASC.Api.Projects">List of team members</returns>
            <path>api/2.0/project/{projectid}/teamExcluded</path>
            <httpMethod>GET</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTeam(System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns the list of all users participating in the project with the ID specified in the request
            </summary>
            <short>
            Project team
            </short>
            <category>Team</category>
            <param name="ids">Project IDs</param>
            <returns type="ASC.Api.Projects.Wrappers.ParticipantWrapper, ASC.Api.Projects">List of team members</returns>
            <path>api/2.0/project/team</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddToProjectTeam(System.Int32,System.Guid)">
            <summary>
            Adds the user with the ID specified in the request to the selected project team
            </summary>
            <short>
            Add to team
            </short>
            <category>Team</category>
            <param method="url" name="projectid">Project ID</param>
            <param name="userId">ID of the user to add</param>
            <returns type="ASC.Api.Projects.Wrappers.ParticipantWrapper, ASC.Api.Projects">List of team members</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/team</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SetProjectTeamSecurity(System.Int32,System.Guid,ASC.Projects.Core.Domain.ProjectTeamSecurity,System.Boolean)">
            <summary>
            Sets the security rights for the user or users with the IDs specified in the request within the selected project
            </summary>
            <short>
            Set team security
            </short>
            <category>Team</category>
            <param method="url" name="projectid">Project ID</param>
            <param name="userId">ID of the user to set</param>
            <param name="security">Security rights</param>
            <param name="visible">Visible</param>
            <returns type="ASC.Api.Projects.Wrappers.ParticipantWrapper, ASC.Api.Projects">List of team members</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/team/security</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteFromProjectTeam(System.Int32,System.Guid)">
            <summary>
            Removes the user with the ID specified in the request from the selected project team
            </summary>
            <short>
            Remove from team
            </short>
            <category>Team</category>
            <param method="url" name="projectid">Project ID</param>
            <param name="userId">ID of the user to add</param>
            <returns type="ASC.Api.Projects.Wrappers.ParticipantWrapper, ASC.Api.Projects">List of team members</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/team</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTeam(System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Updates the project team with the users IDs specified in the request
            </summary>
            <short>
            Updates project team
            </short>
            <category>Team</category>
            <param method="url" name="projectId">Project ID</param>
            <param name="participants">IDs of users to update team</param>
            <param name="notify">Notify project team</param>
            <returns type="ASC.Api.Projects.Wrappers.ParticipantWrapper, ASC.Api.Projects">String with the number of project participants</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/team</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTasks(System.Int32)">
            <summary>
            Returns the list of all the tasks within the project with the ID specified in the request
            </summary>
            <short>
            Tasks
            </short>
            <category>Tasks</category>
            <param method="url" name="projectid">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects"></returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException">List of tasks</exception>
            <path>api/2.0/project/{projectid}/task</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectTask(System.Int32,System.String,ASC.Specific.ApiDateTime,ASC.Projects.Core.Domain.TaskPriority,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,ASC.Specific.ApiDateTime)">
            <summary>
            Adds the task to the selected project with the parameters (responsible user ID, task description, deadline time, etc) specified in the request
            </summary>
            <short>
            Add task
            </short>
            <category>Tasks</category>
            <param method="url" name="projectid">Project ID</param>
            <param name="description">Description</param>
            <param name="deadline">Deadline time</param>
            <param name="priority">Priority: Low|Normal|High</param>
            <param name="title">Title</param>
            <param name="milestoneid">Milestone ID</param>
            <param name="responsibles">List responsibles</param>
            <param name="notify">Notify responsible</param>
            <param name="startDate"></param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Created task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/task</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectTaskByMessage(System.Int32,System.Int32)">
            <summary>
            Adds the task to the selected project 
            </summary>
            <short>
            Add task
            </short>
            <category>Tasks</category>
            <param method="url" name="projectid">Project ID</param>
            <param method="url" name="messageid">Message ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Created task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/task/{messageid}</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTasks(System.Int32,ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Returns the list of all tasks with the selected status in the project with the ID specified in the request
            </summary>
            <short>
            Tasks with status
            </short>
            <category>Tasks</category>
            <param method="url" name="projectid">Project ID</param>
            <param method="url" name="status">Task status. Can be one of: notaccept|open|closed|disable|unclassified|notinmilestone</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/task/{status}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMyTasks(System.Int32,ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Returns the list of all tasks for the current user with the selected status in the project with the ID specified in the request
            </summary>
            <short>
            My tasks
            </short>
            <category>Tasks</category>
            <param method="url" name="projectid">Project ID</param>
            <param method="url" name="status">Task status. Can be one of: notaccept|open|closed|disable|unclassified|notinmilestone</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{projectid}/task/@self/{status}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectFiles(System.Int32)">
            <summary>
            Returns the detailed list of all files and folders for the project with the ID specified in the request
            </summary>
            <short>
            Project files by project ID
            </short>
            <category>Projects</category>
            <param method="url" name="id">Project ID</param>
            <returns type="ASC.Api.Documents.FolderContentWrapper, ASC.Api.Documents">Project files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <httpMethod>GET</httpMethod>
            <path>api/2.0/project/{id}/files</path>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetEntityFiles(ASC.Projects.Core.Domain.EntityType,System.Int32)">
            <summary>
            Returns the list of all files within the entity (project, milestone, task) with the type and ID specified
            </summary>
            <short>
            Entity files
            </short>
            <category>Files</category>
            <param method="url" name="entityType">Entity type</param>
            <param method="url" name="entityID">Entity ID</param>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/{entityID}/entityfiles</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Uploads the selected files to the entity (project, milestone, task) with the type and ID specified
            </summary>
            <short>
            Upload file to entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type </param>
            <param name="entityID">Entity ID</param>
            <param name="files">File IDs</param>
            <returns>Uploaded files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.Int32)">
            <summary>
            Detaches the selected file from the entity (project, milestone, task) with the type and ID specified
            </summary>
            <short>
            Detach file from entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type </param>
            <param name="entityID">Entity ID</param>
            <param name="fileid">File ID</param>
            <returns>Detached file</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Detaches the selected file from the entity (project, milestone, task) with the type and ID specified
            </summary>
            <short>
            Detach file from entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type </param>
            <param name="entityID">Entity ID</param>
            <param name="files">files</param>
            <returns>Detached file</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.String,System.IO.Stream,System.Net.Mime.ContentType,System.Net.Mime.ContentDisposition,System.Collections.Generic.IEnumerable{System.Web.HttpPostedFileBase},System.Boolean,System.Boolean)">
            <summary>
            Uploads the selected files to the entity (project, milestone, task) with the type and ID specified
            </summary>
            <short>
            Upload file to entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type </param>
            <param name="entityID">Entity ID</param>
            <param name="folderid">ID of the folder to upload to</param>
            <param name="file" visible="false">Request enput stream</param>
            <param name="contentType" visible="false">Content-type header</param>
            <param name="contentDisposition" visible="false">Content disposition header</param>
            <param name="files" visible="false">List of files when posted as multipart/form-data</param>
            <param name="createNewIfExist" visible="false">Create new if exist</param>
            <param name="storeOriginalFileFlag" visible="false">If true, upload documents in original formats as well</param>
            <returns>Uploaded files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectsByContactID(System.Int32)">
            <summary>
             Returns the list of all the projects linked with the contact with the ID specified in the request
            </summary>
            <param method="url" name="contactid">Contact ID</param>
            <category>Contacts</category>
            <short>Get projects for contact</short> 
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">
                Projects list
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <path>api/2.0/project/contact/{contactid}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectContact(System.Int32,System.Int32)">
            <summary>
             Adds the selected contact to the project with the ID specified in the request
            </summary>
            <param method="url" name="projectid">Project ID</param>
            <param name="contactid">Contact ID</param>
            <category>Contacts</category>
            <short>Add project contact</short> 
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Project</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <path>api/2.0/project/{projectid}/contact</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProjectContact(System.Int32,System.Int32)">
            <summary>
             Deletes the selected contact from the project with the ID specified in the request
            </summary>       
            <param method="url" name="projectid">Project ID</param>
            <param name="contactid">Contact ID</param>
            <category>Contacts</category>
            <short>Delete project contact</short> 
            <returns type="ASC.Api.Projects.Wrappers.ProjectWrapperFull, ASC.Api.Projects">Project</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <path>api/2.0/project/{projectid}/contact</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetAllTemplates">
            <summary>
            Returns the list of all the templates with base information about them
            </summary>
            <short>
            Templates
            </short>
            <category>Template</category>
            <returns>List of templates</returns>
            <path>api/2.0/project/template</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTemplate(System.Int32)">
            <summary>
            Returns the detailed information about the template with ID specified in the request
            </summary>
            <short>
            Template by ID
            </short>
            <category>Template</category>
            <param method="url" name="id">Template ID</param>
            <returns type="ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects">Template</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/template/{id}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateTemplate(System.String,System.String)">
            <summary>
            Creates a new template 
            </summary>
            <short>
            Create template
            </short>
            <category>Template</category>
            <param name="title">Title</param>
            <param name="description">JSON template structure. Sample: {"tasks":[{"title":"Task without milestone"}],"milestones":[{"title":"milestone title","duration":0.5,"tasks":[{"title":"task milestone"}]}]}</param>
            <returns type="ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects">Newly created template</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <path>api/2.0/project/template</path>
            <requiresAuthorization>true</requiresAuthorization>
            <httpMethod>POST</httpMethod>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTemplate(System.Int32,System.String,System.String)">
            <summary>
            Updates the existing template information 
            </summary>
            <short>
            Update template
            </short>
            <category>Template</category>
            <param method="url" name="id">Template ID</param>
            <param name="title">Title</param>
            <param name="description">JSON template structure. Sample: {"tasks":[{"title":"Task without milestone"}],"milestones":[{"title":"milestone title","duration":0.5,"tasks":[{"title":"task milestone"}]}]}</param>
            <returns type="ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects">Updated template</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/template/{id}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTemplate(System.Int32)">
            <summary>
            Deletes the template with the ID specified in the request from the portal
            </summary>
            <short>
            Delete template
            </short>
            <category>Template</category>
            <param method="url" name="id">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects">Deleted template</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/template/{id}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectSecurityInfo">
            <summary>
             Returns the basic information about the access rights
            </summary>
            <short>
              Access rights info
            </short>
            <category>Projects</category>
            <returns>Basic information about access rights</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMaxLastModified">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskOrder(System.Int32)">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SetTaskOrder(System.Int32,System.String)">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMyTasks">
            <summary>
            Returns the list with the detailed information about all tasks for the current user
            </summary>
            <short>
            My tasks
            </short>
            <category>Tasks</category>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">List of tasks</returns>
            <path>api/2.0/project/task/@self</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMyTasks(ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Returns the list with the detailed information about the tasks for the current user with the status specified in the request
            </summary>
            <short>
            My tasks by status
            </short>
            <category>Tasks</category>
            <param method="url" name="status">Status of task. One of notaccept|open|closed|disable|unclassified|notinmilestone</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">List of tasks</returns>
            <path>api/2.0/project/task/@self/{status}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTask(System.Int32)">
            <summary>
            Returns the detailed information about the task with the ID specified in the request
            </summary>
            <short>
            Get task
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapperFull, ASC.Api.Projects">Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTask(System.Collections.Generic.IEnumerable{System.Int32})">
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Nullable{System.Int32},System.Boolean,System.Guid,System.Nullable{System.Guid},System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32)">
            <summary>
            Returns the list with the detailed information about all the tasks matching the filter parameters specified in the request
            </summary>
            <short>
            Get task by filter
            </short>
            <category>Tasks</category>
            <param method="url" name="projectid" optional="true"> Project Id</param>
            <param method="url" name="myProjects">Tasks in My Projects</param>
            <param method="url" name="milestone" optional="true">Milestone ID</param>
            <param method="url" name="myMilestones">Tasks in My Milestones</param>
            <param method="url" name="nomilestone">Tasks without Milestone</param>
            <param method="url" name="tag" optional="true">Project Tag</param>
            <param method="url" name="status" optional="true">Task Status</param>
            <param method="url" name="substatus" optional="true">Custom Task Status</param>
            <param method="url" name="follow">Followed tasks</param>
            <param method="url" name="departament" optional="true">Departament GUID</param>
            <param method="url" name="participant" optional="true">Participant GUID</param>
            <param method="url" name="creator">Creator GUID</param>
            <param method="url" name="deadlineStart" optional="true">Minimum value of task deadline</param>
            <param method="url" name="deadlineStop" optional="true">Maximum value of task deadline</param>
            <param method="url" name="lastId">Last task ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/filter</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetSimpleTaskByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Boolean,System.Guid,System.Nullable{System.Guid},System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32)">
            <summary>
            Returns the list with the detailed information about all the tasks matching the filter parameters specified in the request
            </summary>
            <short>
            Get task by filter
            </short>
            <category>Tasks</category>
            <param name="projectid" optional="true"> Project Id</param>
            <param name="tag" optional="true">Project Tag</param>
            <param name="status" optional="true">Task Status</param>
            <param name="departament" optional="true">Departament GUID</param>
            <param name="participant" optional="true">Participant GUID</param>
            <param name="creator">Creator GUID</param>
            <param name="milestone" optional="true">Milestone ID</param>
            <param name="deadlineStart" optional="true">Minimum value of task deadline</param>
            <param name="deadlineStop" optional="true">Maximum value of task deadline</param>
            <param name="lastId">Last task ID</param>
            <param name="myProjects">Tasks in My Projects</param>
            <param name="myMilestones">Tasks in My Milestones</param>
            <param name="follow">Followed tasks</param>
            <visible>false</visible>
            <returns>List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskFiles(System.Int32)">
            <summary>
            Returns the list of all files attached to the task with the ID specified in the request
            </summary>
            <short>
            Get task files
            </short>
            <category>Files</category>
            <param method="url" name="taskid">Task ID</param>
            <returns type="ASC.Api.Documents.FileWrapper, ASC.Api.Documents">List of files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/files</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToTask(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Uploads the file specified in the request to the selected task
            </summary>
            <short>
            Upload file to task
            </short>
            <category>Files</category>
            <param method="url" name="taskid">Task ID</param>
            <param name="files">File ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/files</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromTask(System.Int32,System.Int32)">
            <summary>
            Detaches the selected file from the task with the ID specified in the request
            </summary>
            <short>
            Detach file from task
            </short>
            <category>Files</category>
            <param method="url" name="taskid">Task ID</param>
            <param name="fileid">File ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/files</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromTask(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Detaches the selected file from the task with the ID specified in the request
            </summary>
            <short>
            Detach file from task
            </short>
            <category>Files</category>
            <param name="taskid">Task ID</param>
            <param name="files">files</param>
            <returns>Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTask(System.Int32,ASC.Projects.Core.Domain.TaskStatus,System.Int32)">
            <summary>
            Updates the status of the task with the ID specified in the request
            </summary>
            <short>
            Update task status
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <param name="status">Status of task. Can be one of: open|closed</param>
            <param name="statusId"></param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapperFull, ASC.Api.Projects">Updated task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/status</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTasks(System.Int32[],ASC.Projects.Core.Domain.TaskStatus,System.Int32)">
            <summary>
            Updates the status of the tasks with the IDs specified in the request
            </summary>
            <short>
            Update tasks status
            </short>
            <category>Tasks</category>
            <param name="taskids">Tasks ID</param>
            <param name="status">Status of tasks. Can be one of: open|closed</param>
            <param name="statusId">Custom status id</param>
            <path>api/2.0/project/task/status</path>
            <httpMethod>PUT</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapperFull, ASC.Api.Projects"></returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTask(System.Int32,System.Int32)">
            <summary>
            Updates the milestone of the task with the ID specified in the request
            </summary>
            <short>
            Update task milestone
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <param name="milestoneid">Milestone ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapperFull, ASC.Api.Projects">Updated task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/milestone</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTasks(System.Int32[],System.Int32)">
            <summary>
            Updates the milestone of the tasks with the IDs specified in the request
            </summary>
            <short>
            Update tasks milestone
            </short>
            <category>Tasks</category>
            <param name="taskids">Task ID</param>
            <param name="milestoneid">Milestone ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapperFull, ASC.Api.Projects">Updated tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/milestone</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CopyTask(System.Int32,System.String,ASC.Specific.ApiDateTime,ASC.Projects.Core.Domain.TaskPriority,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,ASC.Specific.ApiDateTime,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copy task
            </summary>
            <short>
            Copy task
            </short>
            <category>Tasks</category>
            <param name="projectid">Project ID</param>
            <param name="description">Description</param>
            <param name="deadline">Deadline time</param>
            <param name="priority">Priority: Low|Normal|High</param>
            <param name="title">Title</param>
            <param name="milestoneid">Milestone ID</param>
            <param name="responsibles">List responsibles</param>
            <param name="notify">Notify responsible</param>
            <param name="startDate"></param>
            <param method="url" name="copyFrom"></param>
            <param name="copySubtasks"></param>
            <param name="copyFiles"></param>
            <param name="removeOld"></param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Created task</returns>
            <path>api/2.0/project/task/{copyFrom}/copy</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTask(System.Int32,System.String,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Nullable{ASC.Projects.Core.Domain.TaskPriority},System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Int32},System.Boolean,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Nullable{System.Int32})">
            <summary>
            Updates the selected task with the parameters (responsible user ID, task description, deadline time, etc) specified in the request
            </summary>
            <short>
            Update Task
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">task ID</param>
            <param name="description">description</param>
            <param name="deadline">deadline time</param>
            <param name="startDate">task start date</param>
            <param name="priority">priority</param>
            <param name="title">title</param>
            <param name="milestoneid">milestone ID</param>
            <param name="responsibles">list responsibles</param>
            <param name="projectID">Project ID</param>
            <param name="notify">notify responsible</param>
            <param name="status" optional="true">status</param>
            <param name="progress" optional="true">Progress</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapperFull, ASC.Api.Projects">Updated task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTask(System.Int32)">
            <summary>
            Deletes the task with the ID specified in the request from the project
            </summary>
            <short>
            Delete task
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">task ID</param>
            <returns>Deleted task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTasks(System.Int32[])">
            <summary>
            Deletes the tasks with the IDs specified in the request from the project
            </summary>
            <short>
            Delete tasks
            </short>
            <category>Tasks</category>
            <param name="taskids">task ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Deleted tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskComments(System.Int32)">
            <summary>
            Returns the list of the comments for the task with the ID specified in the request
            </summary>
            <short>
            Task comments
            </short>
            <category>Comments</category>
            <param method="url" name="taskid">Task ID</param>
            <returns type="ASC.Api.Projects.Wrappers.CommentWrapper, ASC.Api.Projects">List of comments</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/comment</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddTaskComments(System.Int32,System.String,System.Guid)">
            <summary>
            Adds the comments for the selected task with the comment text and parent comment ID specified in the request
            </summary>
            <short>
            Add task comment
            </short>
            <category>Comments</category>
            <param method="url" name="taskid">Task ID</param>
            <param name="content">Comment text</param>
            <param name="parentid">Parent comment ID</param>
            <returns type="ASC.Api.Projects.Wrappers.CommentWrapper, ASC.Api.Projects">List of comments</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/comment</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.NotifyTaskResponsible(System.Int32)">
            <summary>
            Notify the responsible for the task with the ID specified in the request about the task
            </summary>
            <short>
            Notify task responsible
            </short>
            <category>Tasks</category>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Task</returns>
            <param method="url" name="taskid">Task ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/notify</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SubscribeToTask(System.Int32)">
            <summary>
            Subscribe to notifications about the actions performed with the task with the ID specified in the request
            </summary>
            <short>
            Subscribe to task action
            </short>
            <category>Tasks</category>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Task</returns>
            <param method="url" name="taskid">Task ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/subscribe</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.IsSubscribeToTask(System.Int32)">
            <summary>
            Checks subscription to notifications about the actions performed with the task with the ID specified in the request
            </summary>
            <short>
            Check subscription to task action
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/subscribe</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddLink(System.Int32,System.Int32,ASC.Projects.Core.Domain.TaskLinkType)">
            <summary>
            Add link between dependenceTaskId and parentTaskId
            </summary>
            <short>
            Add link 
            </short>
            <category>Tasks</category>
            <param method="url" name="parentTaskId">Parent Task ID</param>
            <param name="dependenceTaskId">Dependent Task ID</param>
            <param name="linkType">Link Type</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{parentTaskId}/link</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects"></returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.RemoveLink(System.Int32,System.Int32)">
            <summary>
            Remove link between dependenceTaskId and parentTaskId
            </summary>
            <short>
            Remove link 
            </short>
            <category>Tasks</category>
            <param name="dependenceTaskId">Dependent Task ID</param>
            <param name="parentTaskId">Parent Task ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/link</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects"></returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddSubtask(System.Int32,System.Guid,System.String)">
            <summary>
            Creates the subtask with the selected title and responsible within the parent task specified in the request
            </summary>
            <short>
            Create subtask
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Parent task ID</param>
            <param name="responsible">Subtask responsible</param>
            <param name="title">Subtask title</param>
            <returns type="ASC.Api.Projects.Wrappers.SubtaskWrapper, ASC.Api.Projects">Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CopySubtask(System.Int32,System.Int32)">
            <summary>
            Copy subtask
            </summary>
            <short>
            Copy subtask
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <param method="url" name="subtaskid">Subtask ID</param>
            <returns type="ASC.Api.Projects.Wrappers.SubtaskWrapper, ASC.Api.Projects">New task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/{subtaskid}/copy</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateSubtask(System.Int32,System.Int32,System.Guid,System.String)">
            <summary>
            Updates the subtask with the selected title and responsible with the subtask ID specified in the request
            </summary>
            <short>
            Update subtask
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <param method="url" name="subtaskid">Subtask ID</param>
            <param name="responsible">Subtask responsible</param>
            <param name="title">Subtask title</param>
            <returns type="ASC.Api.Projects.Wrappers.SubtaskWrapper, ASC.Api.Projects">Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/{subtaskid}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteSubtask(System.Int32,System.Int32)">
            <summary>
            Deletes the selected subtask from the parent task with the ID specified in the request
            </summary>
            <short>
            Delete subtask
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <param method="url" name="subtaskid">Subtask ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/{subtaskid}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Api.Projects.Wrappers.SubtaskWrapper, ASC.Api.Projects"></returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateSubtask(System.Int32,System.Int32,ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Updates the selected subtask status in the parent task with the ID specified in the request
            </summary>
            <short>
            Update subtask status
            </short>
            <category>Tasks</category>
            <param method="url" name="taskid">Task ID</param>
            <param method="url" name="subtaskid">Subtask ID</param>
            <param name="status">Status of task. Can be one of: open|closed|disable|unclassified</param>
            <returns type="ASC.Api.Projects.Wrappers.SubtaskWrapper, ASC.Api.Projects">Updated task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/{subtaskid}/status</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetComment(System.Guid)">
            <summary>
            Returns the information about the comment with the ID specified in the request
            </summary>
            <short>
            Get comment
            </short>
            <category>Comments</category>
            <param method="url" name="commentid">Comment ID</param>
            <returns type="ASC.Api.Projects.Wrappers.CommentWrapper, ASC.Api.Projects">Comment</returns>        
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/comment/{commentid}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectCommentPreview(System.String,System.String)">
            <summary>
            Get preview
            </summary>
            <short>
            Get preview
            </short>
            <category>Comments</category>
            <param name="htmltext">html to create preview</param>
            <param name="commentid">guid of editing comment or empty string if comment is new</param>
            <path>api/2.0/project/comment/preview</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <returns type="ASC.Web.Studio.UserControls.Common.Comments.CommentInfo, ASC.Web.Studio"></returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.RemoveProjectComment(System.String)">
            <summary>
            Remove comment with the id specified in the request
            </summary>
            <short>Remove comment</short>
            <section>Comments</section>
            <param method="url" name="commentid">Comment ID</param>
            <returns>Comment id</returns>
            <category>Comments</category>
            <path>api/2.0/project/comment/{commentid}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectComment(System.String,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="parentcommentid"></param>
            <param name="entityid"></param>
            <param name="content"></param>
            <param name="type"></param>
            <category>Comments</category>
            <returns type="ASC.Web.Studio.UserControls.Common.Comments.CommentInfo, ASC.Web.Studio"></returns>
            <path>api/2.0/project/comment</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateComment(System.String,System.String)">
            <summary>
            
            </summary>
            <param method="url" name="commentid"></param>
            <param name="content"></param>
            <category>Comments</category>
            <returns></returns>
            <path>api/2.0/project/comment/{commentid}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetAllTags">
            <summary>
            Returns the list of all available project tags
            </summary>
            <short>
            Project tags
            </short>
            <category>Tags</category>
            <returns type="ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects">List of tags</returns>
            <path>api/2.0/project/tag</path>
            <httpMethod>GET</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateNewTag(System.String)">
            <summary>
            Creates new tag
            </summary>
            <short>
            Tag
            </short>
            <category>Tags</category>
            <returns type="ASC.Api.Projects.Wrappers.ObjectWrapperBase, ASC.Api.Projects">Created tag</returns>
            <path>api/2.0/project/tag</path>
            <httpMethod>POST</httpMethod>
            <param name="data"></param>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectsByTags(System.String)">
            <summary>
            Returns the detailed list of all projects with the specified tag
            </summary>
            <short>
            Project by tag
            </short>
            <category>Tags</category>
            <param method="url" name="tag">Tag name</param>
            <returns>List of projects</returns>
            <path type="ASC.Api.Projects.Wrappers.ProjectWrapper, ASC.Api.Projects">api/2.0/project/tag/{tag}</path>
            <httpMethod>GET</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTagsByName(System.String)">
            <summary>
            Returns the list of all tags like the specified tag name
            </summary>
            <short>
            Tags by tag name
            </short>
            <category>Tags</category>
            <param name="tagName">Tag name</param>
            <returns>List of tags</returns>
            <path>api/2.0/project/tag/search</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestones">
            <summary>
            Returns the list of all upcoming milestones within all portal projects
            </summary>
            <short>
            Upcoming milestones
            </short>
            <category>Milestones</category>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">List of milestones</returns>
            <path>api/2.0/project/milestone</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestonesByFilter(System.Int32,System.Int32,System.Nullable{ASC.Projects.Core.Domain.MilestoneStatus},ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Nullable{System.Guid},System.Int32,System.Boolean,System.Guid)">
            <summary>
            Returns the list of all milestones matching the filter with the parameters specified in the request
            </summary>
            <short>
            Milestones by filter
            </short>
            <category>Milestones</category>
            <param method="url" name="projectid" optional="true">Project ID</param>
            <param method="url" name="tag" optional="true">Project tag</param>
            <param method="url" name="status" optional="true">Milstone status/ Can be open or closed</param>
            <param method="url" name="deadlineStart" optional="true">Minimum value of task deadline</param>
            <param method="url" name="deadlineStop" optional="true">Maximum value of task deadline</param>
            <param method="url" name="taskResponsible" optional="true">Responsible for the task in milestone GUID</param>
            <param method="url" name="lastId">Last milestone ID</param>
            <param method="url" name="myProjects">Miletone in my Projects</param>
            <param method="url" name="milestoneResponsible">Responsible for the milestone GUID</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">List of milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/milestone/filter</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetLateMilestones">
            <summary>
            Returns the list of all overdue milestones in the portal projects
            </summary>
            <short>
            Overdue milestones
            </short>
            <category>Milestones</category>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">List of milestones</returns>
            <path>api/2.0/project/milestone/late</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestonesByDeadLineFull(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the list of all milestones due on the date specified in the request
            </summary>
            <short>
            Milestones by full date
            </short>
            <category>Milestones</category>
            <param method="url" name="year">Deadline year</param>
            <param method="url" name="month">Deadline month</param>
            <param method="url" name="day">Deadline day</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">List of milestones</returns>
            <path>api/2.0/project/milestone/{year}/{month}/{day}</path>
            <httpMethod>GET</httpMethod>
            <collection>list</collection>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestonesByDeadLineMonth(System.Int32,System.Int32)">
            <summary>
            Returns the list of all milestones due in the month specified in the request
            </summary>
            <short>
            Milestones by month
            </short>
            <category>Milestones</category>
            <param method="url" name="year">Deadline year</param>
            <param method="url" name="month">Deadline month</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">List of milestones</returns>
            <path>api/2.0/project/milestone/{year}/{month}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestoneById(System.Int32)">
            <summary>
            Returns the list with the detailed information about the milestone with the ID specified in the request
            </summary>
            <short>
            Get milestone
            </short>
            <category>Milestones</category>
            <param method="url" name="id">Milestone ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">Milestone</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/milestone/{id}</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestoneTasks(System.Int32)">
            <summary>
            Returns the list of all tasks within the milestone with the ID specified in the request
            </summary>
            <short>
            Get milestone tasks 
            </short>
            <category>Milestones</category>
            <param method="url" name="id">Milestone ID </param>
            <returns type="ASC.Api.Projects.Wrappers.TaskWrapper, ASC.Api.Projects">Tasks list</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/milestone/{id}/task</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateMilestone(System.Int32,System.String,ASC.Specific.ApiDateTime,System.Nullable{System.Boolean},ASC.Projects.Core.Domain.MilestoneStatus,System.Nullable{System.Boolean},System.String,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Updates the selected milestone changing the milestone parameters (title, deadline, status, etc.) specified in the request
            </summary>
            <short>
            Update milestone
            </short>
            <category>Milestones</category>
            <param method="url" name="id">Milestone ID</param>
            <param name="title">Title</param>
            <param name="deadline">Deadline</param>
            <param name="isKey">Is key or not</param>
            <param name="status">Status</param>
            <param name="isNotify">Remind me 48 hours before the due date</param>
            <param name="description">Milestone description</param>
            <param name="projectID">Project ID</param>
            <param name="responsible">Milestone responsible</param>
            <param name="notifyResponsible">Notify responsible</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">Updated milestone</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <example>
            <![CDATA[
            Sending data in application/json:
            
            {
                title:"New title",
                deadline:"2011-03-23T14:27:14",
                isKey:false,
                status:"Open"
            }
            ]]>
            </example>
            <path>api/2.0/project/milestone/{id}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateMilestone(System.Int32,ASC.Projects.Core.Domain.MilestoneStatus)">
            <summary>
            Updates the status of the milestone with the ID specified in the request
            </summary>
            <short>
            Update milestone status
            </short>
            <category>Milestones</category>
            <param method="url" name="id">Milestone ID</param>
            <param name="status">Status</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">Updated milestone</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <example>
            <![CDATA[
            Sending data in application/json:
            
            {
                status:"Open"
            }
            ]]>
            </example>
            <path>api/2.0/project/milestone/{id}/status</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteMilestone(System.Int32)">
            <summary>
            Deletes the milestone with the ID specified in the request
            </summary>
            <short>
            Delete milestone
            </short>
            <category>Milestones</category>
            <param method="url" name="id">Milestone ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">Deleted milestone</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/milestone/{id}</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteMilestones(System.Int32[])">
            <summary>
            Deletes milestones with the IDs specified in the request
            </summary>
            <short>
            Delete milestones
            </short>
            <category>Milestones</category>
            <param name="ids">Milestones ID</param>
            <returns type="ASC.Api.Projects.Wrappers.MilestoneWrapper, ASC.Api.Projects">Deleted milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/milestone</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskTimeByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Guid,System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Nullable{ASC.Projects.Core.Domain.PaymentStatus})">
            <summary>
            Returns the list with the detailed information about all the time spent matching the filter parameters specified in the request
            </summary>
            <short>
            Get time spent by filter
            </short>
            <category>Time</category>
            <param method="url" name="projectid" optional="true"> Project Id</param>
            <param method="url" name="tag" optional="true">Project Tag</param>
            <param method="url" name="departament" optional="true">Departament GUID</param>
            <param method="url" name="participant" optional="true">Participant GUID</param>
            <param method="url" name="createdStart" optional="true">Minimum value of create time</param>
            <param method="url" name="createdStop" optional="true">Maximum value of create time</param>
            <param method="url" name="lastId">Last time spent ID</param>
            <param method="url" name="myProjects">Tasks time in My Projects</param>
            <param method="url" name="myMilestones">Tasks time in My Milestones</param>
            <param method="url" name="milestone" optional="true">Milestone ID</param>
            <param method="url" name="status" optional="true">Payment status</param>
            <returns type="ASC.Api.Projects.Wrappers.TimeWrapper, ASC.Api.Projects">List of time spent</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/time/filter</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTotalTaskTimeByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Guid,System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Nullable{ASC.Projects.Core.Domain.PaymentStatus})">
            <summary>
            Returns the total time spent matching the filter parameters specified in the request
            </summary>
            <short>
            Get total time spent by tilter
            </short>
            <category>Time</category>
            <param method="url" name="projectid" optional="true"> Project ID</param>
            <param method="url" name="tag" optional="true">Project tag</param>
            <param method="url" name="departament" optional="true">Departament GUID</param>
            <param method="url" name="participant" optional="true">Participant GUID</param>
            <param method="url" name="createdStart" optional="true">Minimum value of create time</param>
            <param method="url" name="createdStop" optional="true">Maximum value of create time</param>
            <param method="url" name="lastId">Last time spent ID</param>
            <param method="url" name="myProjects">Tasks time in My Projects</param>
            <param method="url" name="myMilestones">Tasks time in My Milestones</param>
            <param method="url" name="milestone" optional="true">Milestone ID</param>
            <param method="url" name="status" optional="true">Payment status</param>
            <returns>Total time spent</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/time/filter/total</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskTime(System.Int32)">
            <summary>
            Returns the time spent on the task with the ID specified in the request
            </summary>
            <short>
            Get time spent
            </short>
            <category>Time</category>
            <param method="url" name="taskid">Task ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TimeWrapper, ASC.Api.Projects"></returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/time</path>
            <httpMethod>GET</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddTaskTime(System.Int32,System.String,System.DateTime,System.Guid,System.Single,System.Int32)">
            <summary>
            Adds the time to the selected task with the time parameters specified in the request
            </summary>
            <short>
            Add task time
            </short>
            <category>Time</category>
            <param method="url" name="taskid">Task ID</param>
            <param name="note">Note</param>
            <param name="date">Date</param>
            <param name="personId">Person that spends time</param>
            <param name="hours">Hours spent</param>
            <param name="projectId">Project ID</param>
            <returns type="ASC.Api.Projects.Wrappers.TimeWrapper, ASC.Api.Projects">Created time</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/task/{taskid}/time</path>
            <httpMethod>POST</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTime(System.Int32,System.String,System.DateTime,System.Guid,System.Single)">
            <summary>
            Updates the time for the selected task with the time parameters specified in the request
            </summary>
            <short>
            Update task time
            </short>
            <category>Time</category>
            <param method="url" name="timeid">ID of time spent</param>
            <param name="note">Note</param>
            <param name="date">Date</param>
            <param name="personId">Person that spends time</param>
            <param name="hours">Hours spent</param>
            <returns type="ASC.Api.Projects.Wrappers.TimeWrapper, ASC.Api.Projects">Created time</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/time/{timeid}</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTimes(System.Int32[],ASC.Projects.Core.Domain.PaymentStatus)">
            <summary>
            Updates the time status of payment
            </summary>
            <short>
            Updates the time status of payment
            </short>
            <category>Time</category>
            <param name="timeids">List IDs of time spent</param>
            <param name="status">Status</param>
            <returns type="ASC.Api.Projects.Wrappers.TimeWrapper, ASC.Api.Projects">Created time</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/time/times/status</path>
            <httpMethod>PUT</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTaskTimes(System.Int32[])">
            <summary>
            Deletes the times from the tasks with the ID specified in the request
            </summary>
            <short>
            Delete time spents
            </short>
            <category>Time</category>
            <param name="timeids">IDs of time spents</param>
            <returns type="ASC.Api.Projects.Wrappers.TimeWrapper, ASC.Api.Projects"></returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <path>api/2.0/project/time/times/remove</path>
            <httpMethod>DELETE</httpMethod>
            <requiresAuthorization>true</requiresAuthorization>
            <collection>list</collection>
        </member>
    </members>
</doc>
