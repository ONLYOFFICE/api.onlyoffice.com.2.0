// // #/components/schemas/ASC.Core.Common.EF.FireBaseUser           a
// // #/components/schemas/ASC.Core.Common.EF.Model.DbTenant         b
// // #/components/schemas/ASC.Core.Common.EF.Model.DbTenantPartner  c
// // #/components/schemas/ASC.Core.Common.EF.Model.DbTenant         b
// // #/components/schemas/ASC.Core.Common.EF.Model.DbTenantPartner  c
// // #/components/schemas/ASC.Core.Common.EF.Model.DbTenant         b x
// // #/components/schemas/ASC.Core.Common.EF.Model.DbTenantPartner  c

// /**
//  * types
//  * @typedef {T[]} TS
//  */

// /**
//  * references
//  * @typedef {Record<string, T>} RS
//  */

// /**
//  * retrieve
//  * @callback RE
//  * @param {string} n
//  * @returns {T | undefined}
//  */

// /**
//  * retriever
//  * @typedef {Object} RR
//  * @property {string[]} h
//  * @property {RE} re
//  * @property {function (string): boolean } is is loop
//  */

// /**
//  * type
//  * @typedef {O | R | L} T
//  */

// /**
//  * object
//  * @typedef {Object} O
//  * @property {T[]} p
//  */

// /**
//  * reference
//  * @typedef {Object} R
//  * @property {string} n
//  */

// /**
//  * literal
//  * @typedef {Object} L
//  */

// /**
//  * loop
//  * @param {TS} ts
//  * @param {RE} re
//  * @returns {T}
//  */
// function lo(ts, re) {
//   let s = -1
//   let n = -1

//   /** @type {RR} */
//   const rr = {
//     h: [],
//     is(b) {
//       const i = rr.h.indexOf(b)
//       if (i !== -1) {
//         if (s === -1) {
//           s = i
//           n = 0
//         } else {
//           if (i - (s + n) === 1) {
//             n += 1
//           } else {
//             if (i === s) {
//               return true
//             } else {
//               s = -1
//               n = -1
//             }
//           }
//         }
//       }
//       return false
//     },
//     re
//   }

//   return ts.map((t) => {
//     t = ha(t, rr)
//     rr.h = []
//     s = -1
//     n = -1
//     return t
//   })
// }

// /**
//  * handle
//  * @param {T} t
//  * @param {RR} rr
//  * @returns {T}
//  */
// function ha(t, rr) {
//   if ("p" in t) {
//     return ho(t, rr)
//   }
//   if ("n" in t) {
//     return hr(t, rr)
//   }
//   return hl(t)
// }

// /**
//  * handle object
//  * @param {O} o
//  * @param {RR} rr
//  * @returns {T}
//  */
// function ho(o, rr) {
//   return {
//     p: o.p.map((p) => {
//       return ha(p, rr)
//     })
//   }
// }

// /**
//  * handle reference
//  * @param {R} r
//  * @param {RR} rr
//  * @returns {T}
//  */
// function hr(r, rr) {
//   if (rr.is(r.n)) {
//     return { loop: true }
//   }
//   rr.h.push(r.n)
//   let t = rr.re(r.n)
//   if (t === undefined) {
//     throw new Error(`reference not found: ${r.n}`)
//   }
//   t = ha(t, rr)
//   rr.h.pop()
//   return t
// }

// /**
//  * handle literal
//  * @param {L} l
//  * @returns {T}
//  */
// function hl(l) {
//   return l
// }

// /** @type {TS} */
// const os = [
//   { n: "a" }
// ]

// // /** @type {RS} */
// // const rs = {
// //   a: { p: [{ p: [{}] }, { n: "a" }] }
// // }

// /** @type {RS} */
// const rs = {
//   a: { p: [{ p: [{}] }, { n: "b" }] },
//   b: { p: [{ p: [{ n: "a" }] }]}
// }

// /** @type {RE} */
// function re(n) {
//   return rs[n]
// }

// const r = lo(os, re)

// console.log(`objects:\n${JSON.stringify(os, null, 2)}\n`)
// console.log(`references:\n${JSON.stringify(rs, null, 2)}\n`)
// console.log(`result:\n${JSON.stringify(r, null, 2)}`)

// // ;[
// //   [["a", "b", "c", "b", "c", "d", "b", "c"], "abcbcdbc"], // false, not possible
// //   // [["a", "b", "c", "d"], "abcd"],
// //   // [["a", "b", "c", "d", "b", "c", "d"], "abcdbcd"],
// //   // [["a", "b", "c", "d", "b", "c", "d", "b", "c", "d"], "abcdbcd"],
// //   // [["a", "b", "c", "d", "b", "c", "d", "e", "b", "c", "d"], "abcdbcdebcd"],
// //   // [["a", "b", "c", "d", "e", "f", "g", "h", "f", "g", "h"], "abcdefghfgh"],
// //   // [["a", "b", "c", "d", "e", "f", "g", "h", "f", "g", "h", "f", "g", "h"], "abcdefghfgh"],
// //   // [["a", "b", "c", "d", "e", "f", "g", "h", "f", "g", "h", "i", "f", "g", "h"], "abcdefghfghifgh"],
// // ].forEach(([s, e]) => {
// //   const a = main(s)
// //   console.log(a === e, { a, e })
// // })
// // // abcdefghijklmnopqrstuvwâ€¦

// #/components/schemas/ASC.Core.Common.EF.FireBaseUser           a
// #/components/schemas/ASC.Core.Common.EF.Model.DbTenant         b
// #/components/schemas/ASC.Core.Common.EF.Model.DbTenantPartner  c
// #/components/schemas/ASC.Core.Common.EF.Model.DbTenant         b
// #/components/schemas/ASC.Core.Common.EF.Model.DbTenantPartner  c
// #/components/schemas/ASC.Core.Common.EF.Model.DbTenant         b x
// #/components/schemas/ASC.Core.Common.EF.Model.DbTenantPartner  c

/**
 * types
 * @typedef {T[]} TS
 */

/**
 * references
 * @typedef {Record<string, T>} RS
 */

/**
 * retrieve
 * @callback RE
 * @param {string} n
 * @returns {T | undefined}
 */

/**
 * retriever
 * @typedef {Object} RR
 * @property {RE} re
 * @property {function (string): void } push
 * @property {function (): boolean } is
 * @property {function (): void } pop
 */

/**
 * type
 * @typedef {O | R | L} T
 */

/**
 * object
 * @typedef {Object} O
 * @property {T[]} p
 */

/**
 * reference
 * @typedef {Object} R
 * @property {string} n
 */

/**
 * literal
 * @typedef {Object} L
 */

/**
 * loop
 * @param {TS} ts
 * @param {RE} re
 * @returns {T}
 */
function lo(ts, re) {
  /** @type {string[]} */
  let h = []
  let n = -1

  /** @type {RR} */
  const rr = {
    push(id) {
      const i = h.lastIndexOf(id)
      if (i !== -1) {
        if (n === -1) {
          n = i
        } else {
          if (i - n === 1) {
            n += 1
          } else {
            rr.c()
          }
        }
      }
      h.push(id)
    },
    is() {
      if (n !== -1) {
        const c = h[h.length - 1]
        const p = h[(h.length - 1) - (n + 1)]
        if (c === p) {
          return true
        }
      }
      return false
    },
    pop() {
      h.pop()
    },
    re,
    c() {
      n = -1
    }
  }

  return ts.map((t) => {
    return ha(t, rr)
  })
}

/**
 * handle
 * @param {T} t
 * @param {RR} rr
 * @returns {T}
 */
function ha(t, rr) {
  if ("p" in t) {
    return ho(t, rr)
  }
  if ("n" in t) {
    return hr(t, rr)
  }
  return hl(t)
}

/**
 * handle object
 * @param {O} o
 * @param {RR} rr
 * @returns {T}
 */
function ho(o, rr) {
  return {
    p: o.p.map((p) => {
      return ha(p, rr)
    })
  }
}

/**
 * handle reference
 * @param {R} r
 * @param {RR} rr
 * @returns {T}
 */
function hr(r, rr) {
  rr.push(r.n)
  if (rr.is()) {
    rr.pop()
    rr.c()
    return { loop: true }
  }
  let t = rr.re(r.n)
  if (t === undefined) {
    throw new Error(`reference not found: ${r.n}`)
  }
  t = ha(t, rr)
  rr.pop()
  return t
}

/**
 * handle literal
 * @param {L} l
 * @returns {T}
 */
function hl(l) {
  return l
}

/** @type {TS} */
const os = [
  { n: "a" }
]

/** @type {RS} */
const rs = {
  a: {
    p: [
      {
        p: [
          {}
        ]
      },
      {
        n: "b"
      }
    ]
  },
  b: {
    p: [
      {
        p: [
          {
            n: "a"
          }
        ]
      },
      {
        n: "c"
      }
    ]
  },
  c: {
    n: "a"
  }
}

/** @type {RE} */
function re(n) {
  return rs[n]
}

const r = lo(os, re)

console.log(
  JSON.stringify(r) ==
  JSON.stringify(
    [
      // a
      {
        p: [
          {
            p: [
              {}
            ]
          },
          // ab
          {
            p: [
              {
                p: [
                  // aba
                  {
                    p: [
                      {
                        p: [
                          {}
                        ]
                      },
                      // abab
                      {
                        loop: true
                      }
                    ]
                  }
                ]
              },
              // abc
              // abca
              {
                p: [
                  {
                    p: [
                      {}
                    ]
                  },
                  // abcab
                  {
                    p: [
                      {
                        p: [
                          // abcaba
                          {
                            p: [
                              {
                                p: [
                                  {}
                                ]
                              },
                              // abcabab
                              {
                                loop: true
                              }
                            ]
                          }
                        ]
                      },
                      // abcabc
                      {
                        loop: true
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  )
)














  // function setup(id: string): void {
  //   // const i = s.lastIndexOf(id)
  //   const i = s.indexOf(id)
  //   if (i !== -1) {
  //     if (n === -1) {
  //       n = i
  //       c = 0
  //     } else {
  //       console.log("?: ", i - (n + c) === 1)
  //       c += 1
  //       // if (i - (n + c) === 1) {
  //       //   c += 1
  //       // } else {
  //       //   n = -1
  //       //   c = -1
  //       // }
  //     }
  //   }
  //   s.push(id)
  //   y += 1
  // }

  // function isLoop(): boolean {
  //   console.log()
  //   console.log("s: ", s)
  //   console.log("n: ", n)
  //   console.log("c: ", c)
  //   console.log(s[n] !== undefined && s[n] === s[n + c + 1])
  //   return s[n] !== undefined && s[n] === s[n + c + 1]

  //   // console.log(s[n])
  //   // console.log(s[s.length - 1])
  //   // console.log(!(n === -1 || c === 0) && s[n] === s[s.length - 1])

  //   return false

  //   // if (n === -1 || c === 0) {
  //   //   return false
  //   // }
  //   // const a = s[n]
  //   // if (a === undefined) {
  //   //   return false
  //   // }
  //   // const b = s[s.length - 1]
  //   // if (b === undefined) {
  //   //   return false
  //   // }
  //   // if (a !== b) {
  //   //   return false
  //   // }

  //   // if (n === -1) {
  //   //   return false
  //   // }
  //   // const c = s[s.length - 1]
  //   // if (c === undefined) {
  //   //   return false
  //   // }
  //   // const p = s[(s.length - 1) - (n + 1)]
  //   // if (p === undefined) {
  //   //   return false
  //   // }
  //   // if (c !== p) {
  //   //   return false
  //   // }
  //   return true
  // }

  // function register() {
  //   r.add(y)
  //   n = -1
  //   c = -1
  // }

  // function isRegistered(i: number): boolean {
  //   return r.has(i)
  // }

  // function teardown(): void {
  //   s.pop()
  // }


    // x += 1
    // if (isRegistered(x)) {
    //   return {
    //     type: "unknown"
    //   }
    // }
    // return retrieve(id)


		      // setup(t.id)
      // if (isLoop()) {
      //   register()
      // } else {
      //   const r = retrieve(t.id)
      //   if (r === undefined) {
      //     throw new Error(`unable to retrieve reference: ${t.id}`)
      //   }
      //   process(r)
      //   teardown()
      // }


			  // let n = -1
  // let c = -1
