<script webc:setup>
/**
 * Renders a type recursively.
 * https://github.com/11ty/webc/issues/184
 *
 * @param {ReflectionType[]} type
 * @returns {string}
 */
function renderType(type) {
  let c = ""
  type.forEach((t) => {
    if (t.permalink) {
      const href = t.permalink(this["$data"])
      c += `<a href="${href}">${t.name}</a>`
    } else {
      c += t.name
    }
    if (t.child.length > 0) {
      const s = renderType(t.child)
      c += wrapType(s)
    }
  })
  return c
}

/**
 * Wraps a type in angle brackets.
 *
 * @param {string} t
 * @returns {string}
 */
function wrapType(t) {
  return `&lt;${t}&gt;`
}
</script>
<table webc:root="override">
  <caption class="sr-only"><slot name="caption"></slot></caption>
  <thead class="sr-only">
    <tr>
      <th><slot name="head"></slot></th>
    </tr>
  </thead>
  <tbody>
    <tr webc:for="r of value">
      <td class="reflection__record">
        <div class="reflection-record">
          <p class="reflection-record__meta">
            <code class="reflection-record__tag reflection-record__tag_name" @text="r.name"></code>
            <code class="reflection-record__tag" @raw="renderType(r.type)"></code>
            <span webc:if="r.required" class="reflection-record__tag reflection-record__tag_required"><l>Required</l></span>
          </p>
          <p class="reflection-record__description" @text="r.description"></p>
          <p webc:if="r.default"><l>Default</l> <template webc:nokeep @text="r.default"></template></p>
          <p webc:if="r.example"><l>Example</l> <template webc:nokeep @text="r.example"></template></p>
        </div>
      </td>
    </tr>
  </tbody>
</table>